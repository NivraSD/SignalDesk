import React, { useState, useEffect } from 'react';
import { FileText, Users, TrendingUp, MessageSquare, Hash, HelpCircle, ExternalLink } from 'lucide-react';
import nivStateManager from './NivStateManager';

// PROOF OF CONCEPT: Clean Work Items Panel
// This component ONLY displays work items - completely separate from chat

const WorkItemsPanelPOC = ({ onOpenWorkspace }) => {
  const [workItems, setWorkItems] = useState([]);
  const [selectedItem, setSelectedItem] = useState(null);

  useEffect(() => {
    // Subscribe to work item updates
    const unsubscribe = nivStateManager.subscribe('workItems', (event) => {
      if (event.type === 'item_added' || event.type === 'reset') {
        setWorkItems(nivStateManager.getWorkItems());
      }
    });

    // Load initial work items
    setWorkItems(nivStateManager.getWorkItems());

    return () => unsubscribe();
  }, []);

  const getIcon = (type) => {
    const icons = {
      'media-list': Users,
      'content-draft': FileText,
      'strategy-plan': TrendingUp,
      'key-messaging': MessageSquare,
      'social-content': Hash,
      'faq-document': HelpCircle
    };
    return icons[type] || FileText;
  };

  const getTypeColor = (type) => {
    const colors = {
      'media-list': '#3b82f6',
      'content-draft': '#8b5cf6',
      'strategy-plan': '#10b981',
      'key-messaging': '#f59e0b',
      'social-content': '#ec4899',
      'faq-document': '#14b8a6'
    };
    return colors[type] || '#6b7280';
  };

  const handleItemClick = (item) => {
    setSelectedItem(item.id);
    // Open in workspace through state manager
    nivStateManager.openWorkspace(item.id);
    
    // Notify parent if callback provided
    if (onOpenWorkspace) {
      onOpenWorkspace(item);
    }
  };

  return (
    <div style={{
      width: '320px',
      height: '100%',
      background: 'rgba(30, 30, 45, 0.4)',
      borderLeft: '1px solid rgba(139, 92, 246, 0.2)',
      display: 'flex',
      flexDirection: 'column'
    }}>
      {/* Header */}
      <div style={{
        padding: '20px',
        borderBottom: '1px solid rgba(139, 92, 246, 0.2)',
        background: 'rgba(30, 30, 45, 0.6)'
      }}>
        <h3 style={{
          margin: 0,
          fontSize: '16px',
          fontWeight: '600',
          color: '#fff'
        }}>
          Generated by Niv
        </h3>
        <p style={{
          margin: '4px 0 0 0',
          fontSize: '12px',
          color: '#9ca3af'
        }}>
          {workItems.length} {workItems.length === 1 ? 'item' : 'items'} ready to work on
        </p>
      </div>

      {/* Work Items List */}
      <div style={{
        flex: 1,
        overflowY: 'auto',
        padding: '12px'
      }}>
        {workItems.length === 0 ? (
          <div style={{
            textAlign: 'center',
            color: '#6b7280',
            fontSize: '14px',
            marginTop: '40px',
            padding: '0 20px'
          }}>
            Ask Niv to create materials and they'll appear here
          </div>
        ) : (
          workItems.map(item => {
            const Icon = getIcon(item.type);
            const isSelected = selectedItem === item.id;
            
            return (
              <div
                key={item.id}
                onClick={() => handleItemClick(item)}
                style={{
                  background: isSelected 
                    ? 'linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2))'
                    : 'rgba(30, 30, 45, 0.4)',
                  border: `1px solid ${isSelected ? 'rgba(139, 92, 246, 0.4)' : 'rgba(139, 92, 246, 0.2)'}`,
                  borderRadius: '10px',
                  padding: '14px',
                  marginBottom: '10px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  transform: isSelected ? 'scale(1.02)' : 'scale(1)'
                }}
                onMouseEnter={(e) => {
                  if (!isSelected) {
                    e.currentTarget.style.background = 'rgba(139, 92, 246, 0.1)';
                    e.currentTarget.style.transform = 'translateX(-4px)';
                  }
                }}
                onMouseLeave={(e) => {
                  if (!isSelected) {
                    e.currentTarget.style.background = 'rgba(30, 30, 45, 0.4)';
                    e.currentTarget.style.transform = 'translateX(0)';
                  }
                }}
              >
                {/* Icon and Type */}
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '12px',
                  marginBottom: '8px'
                }}>
                  <div style={{
                    width: '36px',
                    height: '36px',
                    background: `linear-gradient(135deg, ${getTypeColor(item.type)}40, ${getTypeColor(item.type)}20)`,
                    borderRadius: '8px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <Icon size={18} color={getTypeColor(item.type)} />
                  </div>
                  <div style={{ flex: 1 }}>
                    <div style={{
                      fontSize: '14px',
                      fontWeight: '600',
                      color: '#e8e8e8',
                      marginBottom: '2px'
                    }}>
                      {item.title}
                    </div>
                    <div style={{
                      fontSize: '11px',
                      color: '#9ca3af',
                      textTransform: 'uppercase',
                      letterSpacing: '0.5px'
                    }}>
                      {item.type.replace('-', ' ')}
                    </div>
                  </div>
                </div>

                {/* Description */}
                {item.description && (
                  <div style={{
                    fontSize: '12px',
                    color: '#9ca3af',
                    marginBottom: '8px',
                    lineHeight: '1.4'
                  }}>
                    {item.description}
                  </div>
                )}

                {/* Status and Action */}
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  marginTop: '8px'
                }}>
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px'
                  }}>
                    <div style={{
                      width: '6px',
                      height: '6px',
                      borderRadius: '50%',
                      background: '#10b981'
                    }} />
                    <span style={{
                      fontSize: '11px',
                      color: '#10b981'
                    }}>
                      Ready to edit
                    </span>
                  </div>
                  <ExternalLink size={14} color="#9ca3af" />
                </div>

                {/* Content Preview (if available) */}
                {item.generatedContent && (
                  <div style={{
                    marginTop: '8px',
                    padding: '8px',
                    background: 'rgba(0, 0, 0, 0.2)',
                    borderRadius: '6px',
                    fontSize: '11px',
                    color: '#6b7280'
                  }}>
                    {/* Show a preview based on type */}
                    {item.type === 'media-list' && item.generatedContent.journalists && (
                      <div>
                        {item.generatedContent.journalists.length} journalists identified
                      </div>
                    )}
                    {item.type === 'social-content' && item.generatedContent.platforms && (
                      <div>
                        Content for {Object.keys(item.generatedContent.platforms).join(', ')}
                      </div>
                    )}
                    {item.type === 'key-messaging' && item.generatedContent.sections && (
                      <div>
                        Core message + {Object.keys(item.generatedContent.sections).length - 1} sections
                      </div>
                    )}
                    {item.type === 'content-draft' && item.generatedContent.content && (
                      <div>
                        {item.generatedContent.wordCount || 'Draft'} ready
                      </div>
                    )}
                  </div>
                )}
              </div>
            );
          })
        )}
      </div>

      {/* Footer Stats */}
      {workItems.length > 0 && (
        <div style={{
          padding: '16px 20px',
          borderTop: '1px solid rgba(139, 92, 246, 0.2)',
          background: 'rgba(30, 30, 45, 0.6)',
          fontSize: '12px',
          color: '#9ca3af'
        }}>
          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <span>Materials generated</span>
            <span style={{ color: '#e8e8e8', fontWeight: '600' }}>
              {workItems.length}
            </span>
          </div>
        </div>
      )}
    </div>
  );
};

export default WorkItemsPanelPOC;