import { NextRequest, NextResponse } from 'next/server'
import PptxGenJS from 'pptxgenjs'

export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'

interface SlideData {
  type: string
  title: string
  body?: string[]
  notes?: string
  visual_element?: {
    type: string
    description?: string
    chart_type?: string
    data?: { labels: string[], values: number[] }
  }
  imageUrl?: string
}

interface PresentationData {
  title: string
  slides: SlideData[]
}

interface Theme {
  primary: string
  secondary: string
  accent: string
}

export async function POST(request: NextRequest) {
  console.log('üìä Build presentation API called')

  try {
    const body = await request.json()
    const { presentationData, theme, organizationId } = body as {
      presentationData: PresentationData
      theme: Theme
      organizationId: string
    }

    if (!presentationData) {
      return NextResponse.json(
        { success: false, error: 'No presentation data provided' },
        { status: 400 }
      )
    }

    if (!presentationData.slides || !Array.isArray(presentationData.slides)) {
      console.error('Invalid presentation data - slides missing or not an array:', presentationData)
      return NextResponse.json(
        {
          success: false,
          error: 'Invalid presentation data: slides array is required',
          received: presentationData
        },
        { status: 400 }
      )
    }

    if (presentationData.slides.length === 0) {
      return NextResponse.json(
        { success: false, error: 'No slides provided in presentation data' },
        { status: 400 }
      )
    }

    console.log('üìù Presentation data:', {
      title: presentationData.title,
      slideCount: presentationData.slides.length
    })

    // Create presentation
    const pptx = new PptxGenJS()

    // Set presentation properties
    pptx.author = 'SignalDesk'
    pptx.company = organizationId || 'SignalDesk'
    pptx.title = presentationData.title
    pptx.subject = 'Generated by SignalDesk AI'

    // Define theme colors
    const primaryColor = theme?.primary || '1a1a2e'
    const secondaryColor = theme?.secondary || '16213e'
    const accentColor = theme?.accent || '0f3460'

    console.log('üé® Using theme:', { primaryColor, secondaryColor, accentColor })

    // Process each slide
    for (let i = 0; i < presentationData.slides.length; i++) {
      const slideData = presentationData.slides[i]
      const slide = pptx.addSlide()

      console.log(`üìÑ Adding slide ${i + 1}: ${slideData.title}`)

      // Add background
      slide.background = { color: 'FFFFFF' }

      // Title slide (first slide)
      if (i === 0 || slideData.type === 'title') {
        slide.addText(slideData.title, {
          x: 0.5,
          y: 2.5,
          w: 9,
          h: 1.5,
          fontSize: 44,
          bold: true,
          color: primaryColor,
          align: 'center',
          valign: 'middle'
        })

        if (slideData.body && slideData.body.length > 0) {
          slide.addText(slideData.body.join('\n'), {
            x: 1,
            y: 4.5,
            w: 8,
            h: 1,
            fontSize: 20,
            color: secondaryColor,
            align: 'center'
          })
        }
      }
      // Content slide
      else {
        // Add title
        slide.addText(slideData.title, {
          x: 0.5,
          y: 0.5,
          w: 9,
          h: 0.8,
          fontSize: 32,
          bold: true,
          color: primaryColor
        })

        // Check if slide has a chart - adjust layout accordingly
        const hasChart = slideData.visual_element?.type === 'chart' && slideData.visual_element?.data

        // Add body content
        if (slideData.body && slideData.body.length > 0) {
          const bulletText = slideData.body.map(point => ({
            text: point,
            options: { bullet: true, color: '333333', fontSize: hasChart ? 14 : 18 }
          }))

          slide.addText(bulletText, {
            x: 0.75,
            y: 1.5,
            w: hasChart ? 4 : 8.5,  // Narrower if chart is present
            h: hasChart ? 4.5 : 4,
            fontSize: hasChart ? 14 : 18,
            color: '333333'
          })
        }

        // Add visual element if present
        if (slideData.visual_element) {
          const visualType = slideData.visual_element.type

          // Add chart
          if (visualType === 'chart' && slideData.visual_element.data) {
            const chartType = slideData.visual_element.chart_type || 'bar'
            const chartData = slideData.visual_element.data

            console.log(`  üìä Adding ${chartType} chart with ${chartData.labels.length} data points`)

            slide.addChart(pptx.ChartType[chartType as keyof typeof pptx.ChartType] || pptx.ChartType.bar, [
              {
                name: slideData.visual_element.description || slideData.title,
                labels: chartData.labels,
                values: chartData.values
              }
            ], {
              x: 5,        // Position on right side
              y: 1.5,
              w: 4.5,      // Wider chart
              h: 4.5,      // Taller chart
              showTitle: true,
              showLegend: true,
              showValue: true,
              chartColors: ['#' + accentColor, '#' + primaryColor, '#' + secondaryColor, '#4CAF50', '#FF9800'],
              titleFontSize: 14,
              titleColor: primaryColor,
              valAxisLabelFontSize: 11,
              catAxisLabelFontSize: 11
            })
          }

          // Add image if URL provided
          if (slideData.imageUrl) {
            try {
              console.log(`  üñºÔ∏è Adding image from ${slideData.imageUrl}`)
              slide.addImage({
                path: slideData.imageUrl,
                x: 1,
                y: 2.5,
                w: 8,
                h: 3.5
              })
            } catch (error) {
              console.error('  ‚ö†Ô∏è Error adding image:', error)
              // Continue without image
            }
          }
        }

        // Add speaker notes
        if (slideData.notes) {
          slide.addNotes(slideData.notes)
        }
      }
    }

    // Generate the PowerPoint file
    console.log('üì¶ Generating .pptx file...')
    const pptxData = await pptx.write({ outputType: 'base64' }) as string

    const timestamp = Date.now()
    const fileName = `presentation-${organizationId || 'default'}-${timestamp}.pptx`

    console.log('‚úÖ PowerPoint generated:', fileName)

    // Return file data
    return NextResponse.json({
      success: true,
      fileName,
      filePath: `/tmp/${fileName}`,
      fileSize: Math.round((pptxData.length * 3) / 4), // Approximate size from base64
      fileData: pptxData, // Base64 encoded for transfer
      metadata: {
        title: presentationData.title,
        slideCount: presentationData.slides?.length,
        generated: new Date().toISOString()
      }
    })

  } catch (error) {
    console.error('‚ùå Build presentation error:', error)

    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        details: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    )
  }
}

// Health check endpoint
export async function GET(request: NextRequest) {
  return NextResponse.json({
    success: true,
    message: 'SignalDeck presentation builder API is running',
    version: '1.0.0',
    builderPath: path.join(process.cwd(), 'presentation-builder')
  })
}
