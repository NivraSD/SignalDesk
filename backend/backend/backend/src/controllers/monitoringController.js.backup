const pool = require('../../config/database');
const claudeService = require('../../config/claude');

// Save monitoring configuration
exports.saveConfig = async (req, res) => {
  try {
    const { dataSource, claude, alerts } = req.body;
    const userId = req.user.id;

    await pool.query(
  `INSERT INTO monitoring_configs (user_id, config_type, config_data, updated_at)
   VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
   ON CONFLICT (user_id)
   DO UPDATE SET config_data = $3, updated_at = NOW()`,
  [userId, 'monitoring', JSON.stringify({ dataSource, claude, alerts })]
);

    res.json({ success: true, message: 'Configuration saved' });
  } catch (error) {
    console.error('RSS fetch error:', error);
    // Return empty array if all feeds fail
    res.json({ success: true, mentions: [] });
  }
};

// Helper function for fallback analysis
function fallbackAnalysis(text) {
  const lowerText = text.toLowerCase();
  
  const positiveKeywords = ['excellent', 'amazing', 'love', 'great', 'fantastic'];
  const negativeKeywords = ['terrible', 'awful', 'hate', 'disappointed', 'issue'];
  const criticalKeywords = ['breach', 'lawsuit', 'fraud', 'outage', 'crisis'];
  
  let positiveCount = 0;
  let negativeCount = 0;
  let criticalCount = 0;
  
  positiveKeywords.forEach(keyword => {
    if (lowerText.includes(keyword)) positiveCount++;
  });
  
  negativeKeywords.forEach(keyword => {
    if (lowerText.includes(keyword)) negativeCount++;
  });
  
  criticalKeywords.forEach(keyword => {
    if (lowerText.includes(keyword)) criticalCount++;
  });
  
  let sentiment = 'neutral';
  let sentimentScore = 0;
  
  if (criticalCount > 0) {
    sentiment = 'negative';
    sentimentScore = -80;
  } else if (positiveCount > negativeCount) {
    sentiment = 'positive';
    sentimentScore = positiveCount * 20;
  } else if (negativeCount > positiveCount) {
    sentiment = 'negative';
    sentimentScore = negativeCount * -20;
  }
  
  return {
    sentiment,
    sentiment_score: sentimentScore,
    confidence: 0.6,
    summary: `${sentiment} sentiment detected based on keyword analysis.`,
    rationale: `Found ${positiveCount} positive and ${negativeCount} negative keywords.`,
    key_topics: [],
    urgency_level: criticalCount > 0 ? 'high' : 'low',
    actionable_insights: null,
    recommended_action: null,
    is_fallback: true
  };
}

module.exports = exports;
