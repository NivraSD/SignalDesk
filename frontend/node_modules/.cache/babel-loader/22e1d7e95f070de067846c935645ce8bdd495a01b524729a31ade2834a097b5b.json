{"ast":null,"code":"// SUPABASE-ONLY MODE - No traditional backend API\nimport { supabase } from './supabase';\nconst getAPIBaseURL = () => {\n  // Return empty string - all API calls go through Supabase\n  return '';\n};\nconst API_BASE_URL = ''; // No backend server - Supabase handles everything\n\n// Enhanced API configuration with retry logic and error handling\nconst API_CONFIG = {\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds\n  retryAttempts: 3,\n  retryDelay: 1000,\n  // 1 second\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n};\n\n// Log the current configuration\nconsole.log('SignalDesk Configuration - SUPABASE ONLY:');\nconsole.log('- Backend Mode: Supabase Edge Functions');\nconsole.log('- Supabase URL:', process.env.REACT_APP_SUPABASE_URL);\nconsole.log('- Environment:', process.env.NODE_ENV);\nconsole.log('- Auth: Supabase Auth');\nconsole.log('- Database: Supabase PostgreSQL');\nconsole.log('- APIs: Supabase Edge Functions');\nconsole.log('✅ Supabase-only configuration loaded');\n\n// Debug log - only warn if API_BASE_URL is supposed to have a value\nif (API_BASE_URL && !API_BASE_URL.startsWith('http')) {\n  console.error('⚠️ WARNING: API_BASE_URL is missing protocol:', API_BASE_URL);\n  console.error('This will cause requests to fail. Check environment variables.');\n} else if (!API_BASE_URL) {\n  console.log('✅ Supabase-only mode: No API_BASE_URL needed');\n}\n\n// API request helper with retry logic\nexport async function apiRequest(url, options = {}) {\n  const fullUrl = url.startsWith('http') ? url : `${API_BASE_URL}${url}`;\n  let lastError;\n  for (let attempt = 1; attempt <= API_CONFIG.retryAttempts; attempt++) {\n    try {\n      const response = await fetch(fullUrl, {\n        ...options,\n        headers: {\n          ...API_CONFIG.headers,\n          ...options.headers\n        }\n      });\n\n      // Log successful requests in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`[API] ${options.method || 'GET'} ${url} - Status: ${response.status}`);\n      }\n      return response;\n    } catch (error) {\n      lastError = error;\n      console.error(`[API] Attempt ${attempt}/${API_CONFIG.retryAttempts} failed for ${url}:`, error.message);\n      if (attempt < API_CONFIG.retryAttempts) {\n        await new Promise(resolve => setTimeout(resolve, API_CONFIG.retryDelay * attempt));\n      }\n    }\n  }\n  throw lastError;\n}\n\n// Check API health\nexport async function checkAPIHealth() {\n  try {\n    const response = await apiRequest('/health');\n    return response.ok;\n  } catch (error) {\n    console.error('[API] Health check failed:', error);\n    return false;\n  }\n}\nexport { API_CONFIG };\nexport default API_BASE_URL;","map":{"version":3,"names":["supabase","getAPIBaseURL","API_BASE_URL","API_CONFIG","baseURL","timeout","retryAttempts","retryDelay","headers","console","log","process","env","REACT_APP_SUPABASE_URL","NODE_ENV","startsWith","error","apiRequest","url","options","fullUrl","lastError","attempt","response","fetch","method","status","message","Promise","resolve","setTimeout","checkAPIHealth","ok"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/config/api.js"],"sourcesContent":["// SUPABASE-ONLY MODE - No traditional backend API\nimport { supabase } from './supabase';\n\nconst getAPIBaseURL = () => {\n  // Return empty string - all API calls go through Supabase\n  return '';\n};\n\nconst API_BASE_URL = '';  // No backend server - Supabase handles everything\n\n// Enhanced API configuration with retry logic and error handling\nconst API_CONFIG = {\n  baseURL: API_BASE_URL,\n  timeout: 30000, // 30 seconds\n  retryAttempts: 3,\n  retryDelay: 1000, // 1 second\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n};\n\n// Log the current configuration\nconsole.log('SignalDesk Configuration - SUPABASE ONLY:');\nconsole.log('- Backend Mode: Supabase Edge Functions');\nconsole.log('- Supabase URL:', process.env.REACT_APP_SUPABASE_URL);\nconsole.log('- Environment:', process.env.NODE_ENV);\nconsole.log('- Auth: Supabase Auth');\nconsole.log('- Database: Supabase PostgreSQL');\nconsole.log('- APIs: Supabase Edge Functions');\nconsole.log('✅ Supabase-only configuration loaded');\n\n// Debug log - only warn if API_BASE_URL is supposed to have a value\nif (API_BASE_URL && !API_BASE_URL.startsWith('http')) {\n  console.error('⚠️ WARNING: API_BASE_URL is missing protocol:', API_BASE_URL);\n  console.error('This will cause requests to fail. Check environment variables.');\n} else if (!API_BASE_URL) {\n  console.log('✅ Supabase-only mode: No API_BASE_URL needed');\n}\n\n// API request helper with retry logic\nexport async function apiRequest(url, options = {}) {\n  const fullUrl = url.startsWith('http') ? url : `${API_BASE_URL}${url}`;\n  let lastError;\n  \n  for (let attempt = 1; attempt <= API_CONFIG.retryAttempts; attempt++) {\n    try {\n      const response = await fetch(fullUrl, {\n        ...options,\n        headers: {\n          ...API_CONFIG.headers,\n          ...options.headers\n        }\n      });\n      \n      // Log successful requests in development\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`[API] ${options.method || 'GET'} ${url} - Status: ${response.status}`);\n      }\n      \n      return response;\n    } catch (error) {\n      lastError = error;\n      console.error(`[API] Attempt ${attempt}/${API_CONFIG.retryAttempts} failed for ${url}:`, error.message);\n      \n      if (attempt < API_CONFIG.retryAttempts) {\n        await new Promise(resolve => setTimeout(resolve, API_CONFIG.retryDelay * attempt));\n      }\n    }\n  }\n  \n  throw lastError;\n}\n\n// Check API health\nexport async function checkAPIHealth() {\n  try {\n    const response = await apiRequest('/health');\n    return response.ok;\n  } catch (error) {\n    console.error('[API] Health check failed:', error);\n    return false;\n  }\n}\n\nexport { API_CONFIG };\nexport default API_BASE_URL;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}