{"ast":null,"code":"/**\n * Intelligence Orchestrator Service\n * Manages the complete 4-phase intelligence flow:\n * 1. Intelligent Discovery\n * 2. Source Mapping\n * 3. Parallel Data Gathering\n * 4. Intelligent Synthesis\n */class IntelligenceOrchestratorService{constructor(){this.supabaseUrl=process.env.REACT_APP_SUPABASE_URL||'https://zskaxjtyuaqazydouifp.supabase.co';this.supabaseKey=process.env.REACT_APP_SUPABASE_ANON_KEY||'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpza2F4anR5dWFxYXp5ZG91aWZwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMjk2MzcsImV4cCI6MjA3MDcwNTYzN30.5PhMVptHk3n-1dTSwGF-GvTwrVM0loovkHGUBDtBOe8';this.cache=new Map();this.activeRequests=new Map();}/**\n   * Run the complete intelligence orchestration flow\n   * @param {Object} organization - Organization details\n   * @param {string} organization.name - Organization name\n   * @param {string} organization.industry - Industry hint\n   * @param {string} method - Method to run: 'full', 'discovery', 'gather'\n   */async orchestrateIntelligence(organization){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'full';console.log(\"\\uD83C\\uDFAF Starting Intelligence Orchestration for \".concat(organization.name));// Check cache\nconst cacheKey=\"\".concat(organization.name,\"_\").concat(organization.industry,\"_\").concat(method);if(this.cache.has(cacheKey)){const cached=this.cache.get(cacheKey);if(Date.now()-cached.timestamp<300000){// 5 minute cache\nconsole.log('üì¶ Using cached orchestration results');return cached.data;}}// Check if request is already in progress\nif(this.activeRequests.has(cacheKey)){console.log('‚è≥ Request already in progress, waiting...');return this.activeRequests.get(cacheKey);}// Start new request\nconst requestPromise=this._executeOrchestration(organization,method);this.activeRequests.set(cacheKey,requestPromise);try{const result=await requestPromise;// Cache successful result\nif(result.success){this.cache.set(cacheKey,{data:result,timestamp:Date.now()});}return result;}finally{this.activeRequests.delete(cacheKey);}}async _executeOrchestration(organization,method){try{const response=await fetch(\"\".concat(this.supabaseUrl,\"/functions/v1/intelligence-orchestrator\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(this.supabaseKey)},body:JSON.stringify({organization,method})});if(!response.ok){throw new Error(\"Orchestration failed: \".concat(response.status));}const data=await response.json();console.log('‚úÖ Orchestration complete:',data);// Check if the Edge Function returned an error\nif(!data.success&&data.error){console.error('‚ùå Edge Function error:',data.error);throw new Error(data.error);}return this._processOrchestrationResult(data);}catch(error){console.error('‚ùå Orchestration error:',error);return{success:false,error:error.message,fallback:await this._getFallbackIntelligence(organization)};}}_processOrchestrationResult(data){var _data$statistics,_data$statistics2,_data$statistics3,_data$statistics4;if(!data.success){return data;}// Extract and structure the intelligence for frontend consumption\nconst processed={success:true,organization:data.organization,industry:data.industry,// Phase completion status\nphases:data.phases_completed||{},// Statistics\nstats:{competitors:((_data$statistics=data.statistics)===null||_data$statistics===void 0?void 0:_data$statistics.competitors_identified)||0,websites:((_data$statistics2=data.statistics)===null||_data$statistics2===void 0?void 0:_data$statistics2.websites_scraped)||0,articles:((_data$statistics3=data.statistics)===null||_data$statistics3===void 0?void 0:_data$statistics3.articles_processed)||0,sources:((_data$statistics4=data.statistics)===null||_data$statistics4===void 0?void 0:_data$statistics4.sources_used)||0},// Main intelligence data\nintelligence:data.intelligence||{},// Extracted insights for different tabs\ninsights:{competitive:this._extractCompetitiveInsights(data),stakeholder:this._extractStakeholderInsights(data),risk:this._extractRiskInsights(data),opportunity:this._extractOpportunityInsights(data),predictive:this._extractPredictiveInsights(data)},timestamp:data.timestamp||new Date().toISOString()};return processed;}_extractCompetitiveInsights(data){const intelligence=data.intelligence||{};return{competitors:intelligence.competitors||[],positioning:intelligence.competitive_positioning||{},advantages:intelligence.competitive_advantages||[],threats:intelligence.competitive_threats||[],recommendations:intelligence.competitive_recommendations||[]};}_extractStakeholderInsights(data){const intelligence=data.intelligence||{};return{groups:intelligence.stakeholder_groups||[],sentiment:intelligence.stakeholder_sentiment||{},concerns:intelligence.stakeholder_concerns||[],communications:intelligence.stakeholder_communications||[]};}_extractRiskInsights(data){const intelligence=data.intelligence||{};return{immediate:intelligence.immediate_risks||[],emerging:intelligence.emerging_risks||[],mitigation:intelligence.risk_mitigation||[],alerts:intelligence.risk_alerts||[]};}_extractOpportunityInsights(data){const intelligence=data.intelligence||{};return{immediate:intelligence.immediate_opportunities||[],strategic:intelligence.strategic_opportunities||[],market:intelligence.market_opportunities||[],partnerships:intelligence.partnership_opportunities||[]};}_extractPredictiveInsights(data){const intelligence=data.intelligence||{};return{trends:intelligence.predicted_trends||[],scenarios:intelligence.future_scenarios||[],timeline:intelligence.prediction_timeline||[],confidence:intelligence.prediction_confidence||{}};}async _getFallbackIntelligence(organization){// Basic fallback intelligence if orchestration fails\nreturn{organization:organization.name,industry:organization.industry||'unknown',message:'Using simplified intelligence gathering',insights:{competitive:{competitors:[],positioning:{}},stakeholder:{groups:[],sentiment:{}},risk:{immediate:[],emerging:[]},opportunity:{immediate:[],strategic:[]},predictive:{trends:[],scenarios:[]}}};}/**\n   * Get just the discovery phase data\n   */async runDiscovery(organizationName,industryHint){return this.orchestrateIntelligence({name:organizationName,industry:industryHint},'discovery');}/**\n   * Get discovery + gathering (no synthesis)\n   */async runGathering(organizationName,industryHint){return this.orchestrateIntelligence({name:organizationName,industry:industryHint},'gather');}/**\n   * Clear cache for an organization\n   */clearCache(){let organizationName=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(organizationName){// Clear specific organization\nfor(const[key]of this.cache){if(key.includes(organizationName)){this.cache.delete(key);}}}else{// Clear all cache\nthis.cache.clear();}console.log('üóëÔ∏è Cache cleared');}}// Export singleton instance\nconst intelligenceOrchestratorService=new IntelligenceOrchestratorService();export default intelligenceOrchestratorService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}