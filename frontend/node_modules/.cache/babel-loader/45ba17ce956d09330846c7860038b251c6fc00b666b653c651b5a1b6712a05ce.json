{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * API Service for SignalDesk Frontend\n * Handles all communication with the backend intelligence monitoring system\n */import FORCE_API_URL from'../config/apiUrl';// Use the EMERGENCY hardcoded URL\nconsole.log('âœ… API Service initialized with FORCE URL:',FORCE_API_URL);class ApiService{constructor(){this.updateToken();// Store the hardcoded API URL\nthis.apiUrl=FORCE_API_URL;console.log('API Service using URL:',this.apiUrl);}updateToken(){this.token=localStorage.getItem('token');return this.token;}/**\n   * Make authenticated API request\n   */async request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// Build the full URL\nconst url=\"\".concat(this.apiUrl).concat(endpoint);console.log('API Request URL:',url);// Always get the latest token\nthis.updateToken();const config=_objectSpread(_objectSpread({},options),{},{headers:_objectSpread(_objectSpread({'Content-Type':'application/json'},this.token&&{'Authorization':\"Bearer \".concat(this.token)}),options.headers)});if(options.body&&typeof options.body==='object'){config.body=JSON.stringify(options.body);}console.log('API Request:',config.method||'GET',url);console.log('Request body:',config.body);try{const response=await fetch(url,config);if(!response.ok){console.error(\"API error at \".concat(url,\":\"),response.status);throw new Error(\"API error: \".concat(response.status));}return await response.json();}catch(error){console.error('API request failed:',error);console.error('Failed URL:',url);throw error;}}/**\n   * Convenience methods for common HTTP methods\n   */async get(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return this.request(endpoint,_objectSpread(_objectSpread({},options),{},{method:'GET'}));}async post(endpoint,body){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return this.request(endpoint,_objectSpread(_objectSpread({},options),{},{method:'POST',body}));}async put(endpoint,body){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return this.request(endpoint,_objectSpread(_objectSpread({},options),{},{method:'PUT',body}));}async delete(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return this.request(endpoint,_objectSpread(_objectSpread({},options),{},{method:'DELETE'}));}// ============================================\n// Intelligence Pipeline\n// ============================================\n/**\n   * Process intelligence request through the full pipeline\n   */async analyzeIntelligence(query,organizationId){let targetType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'mixed';return this.request('/intelligence/analyze',{method:'POST',body:{query,organizationId,targetType}});}/**\n   * Clarify an ambiguous query\n   */async clarifyQuery(query){let answers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let projectId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;return this.request('/intelligence/clarify',{method:'POST',body:{query,answers,projectId}});}/**\n   * Get research project by ID\n   */async getProject(projectId){return this.request(\"/intelligence/projects/\".concat(projectId));}/**\n   * Get all projects for an organization\n   */async getOrganizationProjects(organizationId){return this.request(\"/intelligence/organizations/\".concat(organizationId,\"/projects\"));}// ============================================\n// Intelligence Targets\n// ============================================\n/**\n   * Create a new intelligence target\n   */async createTarget(target){return this.request('/intelligence/targets',{method:'POST',body:target});}/**\n   * Get intelligence targets for an organization\n   */async getOrganizationTargets(organizationId){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const params=new URLSearchParams(filters).toString();return this.request(\"/intelligence/organizations/\".concat(organizationId,\"/targets?\").concat(params));}/**\n   * Update an intelligence target\n   */async updateTarget(targetId,updates){return this.request(\"/intelligence/targets/\".concat(targetId),{method:'PUT',body:updates});}/**\n   * Delete an intelligence target\n   */async deleteTarget(targetId){return this.request(\"/intelligence/targets/\".concat(targetId),{method:'DELETE'});}// ============================================\n// Findings\n// ============================================\n/**\n   * Get intelligence findings\n   */async getFindings(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const params=new URLSearchParams(filters).toString();return this.request(\"/intelligence/findings?\".concat(params));}/**\n   * Get single finding\n   */async getFinding(findingId){return this.request(\"/intelligence/findings/\".concat(findingId));}/**\n   * Create a new finding\n   */async createFinding(finding){return this.request('/intelligence/findings',{method:'POST',body:finding});}// ============================================\n// Opportunities\n// ============================================\n/**\n   * Get opportunities for an organization\n   */async getOpportunities(organizationId){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const params=new URLSearchParams(filters).toString();return this.request(\"/opportunities/organization/\".concat(organizationId,\"?\").concat(params));}/**\n   * Get single opportunity\n   */async getOpportunity(opportunityId){return this.request(\"/opportunities/\".concat(opportunityId));}/**\n   * Update opportunity status\n   */async updateOpportunityStatus(opportunityId,status){return this.request(\"/opportunities/\".concat(opportunityId,\"/status\"),{method:'PATCH',body:{status}});}/**\n   * Auto-identify opportunities\n   */async identifyOpportunities(organizationId){return this.request('/opportunities/identify',{method:'POST',body:{organizationId}});}// ============================================\n// Monitoring\n// ============================================\n/**\n   * Start monitoring for an organization\n   */async startMonitoring(organizationId){let targetIds=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return this.request('/intelligence/monitor/start',{method:'POST',body:{organizationId,targetIds}});}/**\n   * Stop monitoring\n   */async stopMonitoring(organizationId){let targetIds=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return this.request('/intelligence/monitor/stop',{method:'POST',body:{organizationId,targetIds}});}/**\n   * Get monitoring status\n   */async getMonitoringStatus(organizationId){return this.request(\"/intelligence/monitor/status/\".concat(organizationId));}/**\n   * Get monitoring metrics\n   */async getMonitoringMetrics(organizationId){let days=arguments.length>1&&arguments[1]!==undefined?arguments[1]:7;return this.request(\"/monitoring/metrics/\".concat(organizationId,\"?days=\").concat(days));}/**\n   * Manually trigger monitoring\n   */async triggerMonitoring(organizationId){return this.request('/intelligence/monitor/trigger',{method:'POST',body:{organizationId}});}/**\n   * Analyze a specific competitor\n   */async analyzeCompetitor(data){return this.request('/intelligence/analysis/competitor',{method:'POST',body:data});}/**\n   * Analyze a specific topic\n   */async analyzeTopic(data){return this.request('/intelligence/analysis/topic',{method:'POST',body:data});}/**\n   * Get overview analysis for all targets\n   */async getOverviewAnalysis(organizationId){return this.request(\"/intelligence/analysis/overview/\".concat(organizationId));}/**\n   * Get sources for a specific target\n   */async getTargetSources(targetId){return this.request(\"/intelligence/targets/\".concat(targetId,\"/sources\"));}/**\n   * Add a source to a target\n   */async addTargetSource(targetId,sourceData){return this.request(\"/intelligence/targets/\".concat(targetId,\"/sources\"),{method:'POST',body:sourceData});}/**\n   * Update a source\n   */async updateTargetSource(sourceId,updates){return this.request(\"/intelligence/sources/\".concat(sourceId),{method:'PUT',body:updates});}/**\n   * Delete a source\n   */async deleteTargetSource(sourceId){return this.request(\"/intelligence/sources/\".concat(sourceId),{method:'DELETE'});}/**\n   * Discover sources for a target using AI\n   */async discoverSourcesForTarget(targetId){return this.request(\"/intelligence/targets/\".concat(targetId,\"/discover-sources\"),{method:'POST'});}/**\n   * Test a source URL\n   */async testSource(sourceData){return this.request('/intelligence/sources/test',{method:'POST',body:sourceData});}/**\n   * Bulk add sources to a target\n   */async bulkAddTargetSources(targetId,sources){return this.request(\"/intelligence/targets/\".concat(targetId,\"/sources/bulk\"),{method:'POST',body:{sources}});}// ============================================\n// Organizations\n// ============================================\n/**\n   * Get all organizations\n   */async getOrganizations(){return this.request('/organizations');}/**\n   * Get single organization\n   */async getOrganization(organizationId){return this.request(\"/organizations/\".concat(organizationId));}/**\n   * Create organization\n   */async createOrganization(organization){return this.request('/organizations',{method:'POST',body:organization});}/**\n   * Update organization\n   */async updateOrganization(organizationId,updates){return this.request(\"/organizations/\".concat(organizationId),{method:'PUT',body:updates});}/**\n   * Delete organization\n   */async deleteOrganization(organizationId){return this.request(\"/organizations/\".concat(organizationId),{method:'DELETE'});}// ============================================\n// Real-time Updates (WebSocket)\n// ============================================\n/**\n   * Connect to real-time updates (Mock for now - WebSocket pending)\n   */connectToRealtime(organizationId,callbacks){// Mock WebSocket connection until real implementation\nconsole.log('Mock real-time connection for organization:',organizationId);// Simulate connection\nsetTimeout(()=>{callbacks.onConnect&&callbacks.onConnect();},100);// Return mock connection object with close method\nreturn{close:()=>{console.log('Closing mock real-time connection');}};}// Intelligence Analysis endpoints for Opportunity Execution\nasync analyzeCompetitor(params){return this.request('/intelligence/analysis/competitor',{method:'POST',body:params});}async analyzeTopic(params){return this.request('/intelligence/analysis/topic',{method:'POST',body:params});}async getUnifiedIntelligence(organizationId){return this.request(\"/intelligence/analysis/unified/\".concat(organizationId));}async getTopicMomentum(organizationId){return this.request(\"/intelligence/analysis/topic-momentum/\".concat(organizationId));}async analyzeOpportunityPosition(data){return this.request('/opportunity/analyze-position',{method:'POST',body:data});}}export default new ApiService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}