{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _process$env$REACT_AP,_process$env$REACT_AP2;// Supabase Client Configuration for Frontend - SINGLETON INSTANCE\nimport{createClient}from'@supabase/supabase-js';// Singleton enforcement - prevent multiple client creation\nif(window.__SUPABASE_CLIENT__){console.warn('WARNING: Attempting to create multiple Supabase clients. Using existing singleton.');throw new Error('Multiple Supabase clients detected! Use the singleton from config/supabase.js');}// Get from environment variables - NO HARDCODED FALLBACKS FOR SECURITY\n// Trim any whitespace/newlines that might have been accidentally included\nconst supabaseUrl=(_process$env$REACT_AP=process.env.REACT_APP_SUPABASE_URL)===null||_process$env$REACT_AP===void 0?void 0:_process$env$REACT_AP.trim();const supabaseAnonKey=(_process$env$REACT_AP2=process.env.REACT_APP_SUPABASE_ANON_KEY)===null||_process$env$REACT_AP2===void 0?void 0:_process$env$REACT_AP2.trim();// Log configuration (for debugging)\nconsole.log('🔧 Supabase Configuration:',{url:supabaseUrl,hasKey:!!supabaseAnonKey,envVarsPresent:!!(process.env.REACT_APP_SUPABASE_URL&&process.env.REACT_APP_SUPABASE_ANON_KEY),buildTime:new Date().toISOString()});// Validate configuration\nif(!supabaseUrl||!supabaseAnonKey){console.error('CRITICAL: Supabase configuration missing from environment variables');console.error('Required environment variables:');console.error('- REACT_APP_SUPABASE_URL');console.error('- REACT_APP_SUPABASE_ANON_KEY');console.error('Please set these in your .env file locally or in Vercel environment settings for production');throw new Error('Supabase configuration is required. Please set REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY environment variables.');}// Create SINGLETON Supabase client - DO NOT create multiple instances\nexport const supabase=window.__SUPABASE_CLIENT__||(()=>{const client=createClient(supabaseUrl,supabaseAnonKey,{auth:{autoRefreshToken:true,persistSession:true,detectSessionInUrl:false,// Prevents conflicts with SPA routing\nstorage:window.localStorage,flowType:'pkce',// Added PKCE for better security\ndebug:process.env.NODE_ENV==='development'// Enable auth debugging in dev\n},realtime:{params:{eventsPerSecond:10}},global:{headers:{'X-Client-Info':'signaldesk-frontend'}}});// Store singleton reference globally to prevent multiple instances\nwindow.__SUPABASE_CLIENT__=client;// Add development validation\nif(process.env.NODE_ENV==='development'){// Add global method to check client health\nwindow.__SUPABASE_VALIDATE__=()=>{const isValid=client&&typeof client.auth==='object';console.log('🔍 Supabase singleton validation:',isValid?'✅ PASS':'❌ FAIL');return isValid;};}console.log('✅ Supabase singleton client created successfully');return client;})();// Add global error handler for database schema issues\nconst originalFrom=supabase.from.bind(supabase);supabase.from=function(table){const query=originalFrom(table);const originalSelect=query.select.bind(query);query.select=function(){const result=originalSelect(...arguments);// Add error handling for schema access issues\nconst originalPromise=result.then.bind(result);result.then=function(onSuccess,onError){return originalPromise(onSuccess,error=>{var _error$message,_error$message2;if(error!==null&&error!==void 0&&(_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes('schema')||error!==null&&error!==void 0&&(_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes('permission')){console.warn(\"Database schema access issue for table '\".concat(table,\"':\"),error.message);// Return empty result instead of throwing\nif(onSuccess){return onSuccess({data:[],error:null,count:0});}}if(onError)return onError(error);throw error;});};return result;};return query;};// Helper functions for the frontend\n// Authentication\nexport const signIn=async(email,password)=>{const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error)throw error;// Get user profile with proper error handling\ntry{var _data$user$email;const{data:profile,error:profileError}=await supabase.from('users').select('*, organization:organizations(*)').eq('id',data.user.id).maybeSingle();// Use maybeSingle to handle no rows gracefully\nif(profileError&&!profileError.message.includes('Row not found')){console.warn('Profile fetch warning:',profileError.message);}return _objectSpread(_objectSpread({},data),{},{profile:profile||{id:data.user.id,email:data.user.email,username:(_data$user$email=data.user.email)===null||_data$user$email===void 0?void 0:_data$user$email.split('@')[0],role:'admin'}});}catch(profileError){var _data$user$email2;console.warn('Profile fetch failed (non-critical):',profileError.message);// Return basic user data without profile\nreturn _objectSpread(_objectSpread({},data),{},{profile:{id:data.user.id,email:data.user.email,username:(_data$user$email2=data.user.email)===null||_data$user$email2===void 0?void 0:_data$user$email2.split('@')[0],role:'admin'}});}};export const signOut=async()=>{const{error}=await supabase.auth.signOut();if(error)throw error;localStorage.removeItem('token');localStorage.removeItem('user');};export const getCurrentUser=async()=>{const{data:{user},error}=await supabase.auth.getUser();if(error||!user)return null;// Get user profile with proper error handling\ntry{var _user$email;const{data:profile,error:profileError}=await supabase.from('users').select('*, organization:organizations(*)').eq('id',user.id).maybeSingle();// Use maybeSingle to handle no rows gracefully\nif(profileError&&!profileError.message.includes('Row not found')){console.warn('Profile fetch warning:',profileError.message);}return _objectSpread(_objectSpread({},user),{},{profile:profile||{id:user.id,email:user.email,username:(_user$email=user.email)===null||_user$email===void 0?void 0:_user$email.split('@')[0],role:'admin'}});}catch(profileError){var _user$email2;console.warn('Profile fetch failed (non-critical):',profileError.message);// Return basic user data without profile\nreturn _objectSpread(_objectSpread({},user),{},{profile:{id:user.id,email:user.email,username:(_user$email2=user.email)===null||_user$email2===void 0?void 0:_user$email2.split('@')[0],role:'admin'}});}};// Real-time subscriptions\nexport const subscribeToFindings=(organizationId,callback)=>{return supabase.channel('intelligence-findings').on('postgres_changes',{event:'INSERT',schema:'public',table:'intelligence_findings',filter:\"organization_id=eq.\".concat(organizationId)},payload=>{console.log('New finding:',payload);callback(payload.new);}).subscribe();};export const subscribeToMonitoring=(organizationId,callback)=>{return supabase.channel('monitoring-runs').on('postgres_changes',{event:'*',schema:'public',table:'monitoring_runs',filter:\"organization_id=eq.\".concat(organizationId)},payload=>{console.log('Monitoring update:',payload);callback(payload);}).subscribe();};export const subscribeToOpportunities=(organizationId,callback)=>{return supabase.channel('opportunities').on('postgres_changes',{event:'*',schema:'public',table:'opportunity_queue',filter:\"organization_id=eq.\".concat(organizationId)},payload=>{console.log('Opportunity update:',payload);callback(payload);}).subscribe();};// Data fetching\nexport const getIntelligenceFindings=async function(organizationId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;const{data,error}=await supabase.from('intelligence_findings').select(\"\\n      *,\\n      target:intelligence_targets(name, type)\\n    \").eq('organization_id',organizationId).order('created_at',{ascending:false}).limit(limit);if(error)throw error;return data;};export const getOpportunities=async organizationId=>{const{data,error}=await supabase.from('opportunity_queue').select('*').eq('organization_id',organizationId).eq('status','active').order('score',{ascending:false});if(error)throw error;return data;};export const getProjects=async organizationId=>{const{data,error}=await supabase.from('projects').select('*').eq('organization_id',organizationId).order('created_at',{ascending:false});if(error)throw error;return data;};export const getContent=async projectId=>{const{data,error}=await supabase.from('content').select('*').eq('project_id',projectId).order('created_at',{ascending:false});if(error)throw error;return data;};// Monitoring\nexport const triggerMonitoring=async function(organizationId){let targetId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const{data,error}=await supabase.functions.invoke('monitor-intelligence',{body:{organizationId,targetId}});if(error)throw error;return data;};// Content operations\nexport const saveContent=async content=>{const{data,error}=await supabase.from('content').insert(content).select().single();if(error)throw error;return data;};export const updateContent=async(id,updates)=>{const{data,error}=await supabase.from('content').update(updates).eq('id',id).select().single();if(error)throw error;return data;};// MemoryVault operations\nexport const searchMemory=async(organizationId,query)=>{const{data,error}=await supabase.from('memoryvault_items').select('*').eq('organization_id',organizationId).textSearch('content',query).limit(10);if(error)throw error;return data;};export const addToMemory=async item=>{const{data,error}=await supabase.from('memoryvault_items').insert(item).select().single();if(error)throw error;return data;};export default supabase;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}