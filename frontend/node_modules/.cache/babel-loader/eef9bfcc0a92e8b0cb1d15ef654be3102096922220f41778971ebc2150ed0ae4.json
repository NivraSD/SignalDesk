{"ast":null,"code":"// Standardized data structures for all Niv-generated content\n// This ensures consistency across all workspace components\n\n// ============================================\n// MEDIA PLAN STRUCTURE  \n// ============================================\nexport const MediaPlanStructure = {\n  title: 'string - Title of the media plan',\n  description: 'string - Strategic approach summary',\n  totalContacts: 'number - Total number of contacts',\n  journalists: [{\n    name: 'string - Journalist name',\n    outlet: 'string - Media outlet',\n    beat: 'string - Coverage area',\n    email: 'string - Email address',\n    tier: 'string - Tier level (1, 2, 3)',\n    relevance: 'string - Why they matter',\n    recentCoverage: 'string - Recent relevant articles',\n    pitchAngle: 'string - Suggested approach'\n  }],\n  categories: {\n    tier1: 'array - Top tier media',\n    trade: 'array - Industry publications',\n    regional: 'array - Local outlets',\n    influencers: 'array - Key voices'\n  }\n};\n\n// Alias for backward compatibility\nexport const MediaListStructure = MediaPlanStructure;\n\n// ============================================\n// STRATEGIC PLAN STRUCTURE\n// ============================================\nexport const StrategicPlanStructure = {\n  title: 'string - Plan title',\n  objective: 'string - Primary objective',\n  duration: 'string - Timeline (e.g., \"6 weeks\")',\n  // Flat milestone structure for easy rendering\n  milestones: [{\n    week: 'number - Week number',\n    phase: 'string - Phase name',\n    task: 'string - Task description',\n    details: 'string - Detailed description',\n    deliverables: 'array - List of deliverables',\n    owner: 'string - Responsible party',\n    status: 'string - pending|in-progress|completed',\n    budget: 'string - Budget allocation'\n  }],\n  keyMessages: {\n    primary: 'string - Main message',\n    supporting: 'array - Supporting messages',\n    audienceSpecific: 'object - Messages per audience'\n  },\n  targetAudiences: {\n    primary: 'object - Primary audience details',\n    secondary: 'object - Secondary audience details',\n    influencers: 'object - Key influencers'\n  },\n  successMetrics: {\n    reach: 'string - Target reach',\n    coverage: 'string - Coverage goals',\n    engagement: 'string - Engagement targets',\n    conversions: 'string - Conversion goals'\n  },\n  risks: [{\n    risk: 'string - Risk description',\n    likelihood: 'string - low|medium|high',\n    impact: 'string - low|medium|high',\n    mitigation: 'string - Mitigation strategy'\n  }]\n};\n\n// ============================================\n// CONTENT DRAFT STRUCTURE (Press Release, etc)\n// ============================================\nexport const ContentDraftStructure = {\n  title: 'string - Content title',\n  type: 'string - press_release|blog_post|social_media|email',\n  // Main content\n  headline: 'string - Main headline',\n  subheadline: 'string - Supporting headline',\n  body: 'string - Full content body',\n  // Metadata\n  metadata: {\n    wordCount: 'number - Word count',\n    readingTime: 'string - Estimated reading time',\n    tone: 'string - Content tone',\n    targetAudience: 'string - Target audience'\n  },\n  // Additional elements\n  quotes: 'array - Notable quotes',\n  keyPoints: 'array - Bullet points',\n  callToAction: 'string - CTA text',\n  boilerplate: 'string - Company boilerplate',\n  contactInfo: 'string - Contact information'\n};\n\n// ============================================\n// SOCIAL CONTENT STRUCTURE\n// ============================================\nexport const SocialContentStructure = {\n  title: 'string - Content package title',\n  platforms: {\n    twitter: [{\n      text: 'string - Tweet text',\n      hashtags: 'array - Hashtags',\n      mediaType: 'string - image|video|link',\n      threadPosition: 'number - Position in thread'\n    }],\n    linkedin: {\n      headline: 'string - Post headline',\n      body: 'string - Full post text',\n      hashtags: 'array - Hashtags'\n    },\n    instagram: {\n      caption: 'string - Post caption',\n      hashtags: 'array - Hashtags',\n      imageDescription: 'string - Visual description'\n    }\n  },\n  schedule: 'array - Posting schedule',\n  engagementTips: 'array - Best practices'\n};\n\n// ============================================\n// KEY MESSAGING STRUCTURE\n// ============================================\nexport const KeyMessagingStructure = {\n  title: 'string - Framework title',\n  elevator: 'string - 30-second pitch',\n  coreMessages: [{\n    message: 'string - Key message',\n    supportingPoints: 'array - Supporting facts',\n    proof: 'string - Evidence/data',\n    audience: 'string - Target audience'\n  }],\n  differentiators: 'array - Unique selling points',\n  competitivePositioning: 'object - vs competitors',\n  talkingPoints: {\n    executives: 'array - C-level talking points',\n    technical: 'array - Technical details',\n    customers: 'array - Customer-facing points'\n  },\n  objectionHandling: [{\n    objection: 'string - Common objection',\n    response: 'string - Recommended response'\n  }]\n};\n\n// ============================================\n// FAQ DOCUMENT STRUCTURE\n// ============================================\nexport const FAQStructure = {\n  title: 'string - FAQ title',\n  categories: [{\n    category: 'string - Category name',\n    questions: [{\n      question: 'string - Question text',\n      answer: 'string - Answer text',\n      audience: 'string - Target audience',\n      sensitivity: 'string - public|internal|restricted'\n    }]\n  }],\n  lastUpdated: 'string - Date',\n  approvedBy: 'string - Approver'\n};\n\n// ============================================\n// TRANSFORMATION FUNCTIONS\n// ============================================\n\n// Transform Niv's generated content to standardized structure\nexport const standardizeMediaPlan = rawContent => {\n  var _rawContent$journalis;\n  if (!rawContent) return getDefaultMediaList();\n  return {\n    title: rawContent.title || 'Strategic Media Plan',\n    description: rawContent.description || '',\n    totalContacts: ((_rawContent$journalis = rawContent.journalists) === null || _rawContent$journalis === void 0 ? void 0 : _rawContent$journalis.length) || 0,\n    journalists: rawContent.journalists || [],\n    categories: rawContent.categories || {\n      tier1: [],\n      trade: [],\n      regional: [],\n      influencers: []\n    }\n  };\n};\n\n// Alias for backward compatibility\nexport const standardizeMediaList = standardizeMediaPlan;\nexport const standardizeStrategicPlan = rawContent => {\n  var _rawContent$timeline, _rawContent$timeline2, _rawContent$timeline3;\n  if (!rawContent) return getDefaultStrategicPlan();\n\n  // Flatten phases into milestones\n  let milestones = [];\n\n  // Handle both nested phases structure and flat milestones\n  if ((_rawContent$timeline = rawContent.timeline) !== null && _rawContent$timeline !== void 0 && _rawContent$timeline.phases) {\n    rawContent.timeline.phases.forEach(phase => {\n      if (phase.milestones) {\n        phase.milestones.forEach(milestone => {\n          milestones.push({\n            ...milestone,\n            phase: phase.phase || phase.name,\n            status: milestone.status || 'pending'\n          });\n        });\n      }\n    });\n  } else if ((_rawContent$timeline2 = rawContent.timeline) !== null && _rawContent$timeline2 !== void 0 && _rawContent$timeline2.milestones) {\n    milestones = rawContent.timeline.milestones;\n  } else if (rawContent.milestones) {\n    milestones = rawContent.milestones;\n  }\n  return {\n    title: rawContent.title || 'Strategic Plan',\n    objective: rawContent.objective || '',\n    duration: ((_rawContent$timeline3 = rawContent.timeline) === null || _rawContent$timeline3 === void 0 ? void 0 : _rawContent$timeline3.duration) || '4 weeks',\n    milestones: milestones.length > 0 ? milestones : getDefaultMilestones(),\n    keyMessages: rawContent.keyMessages || getDefaultKeyMessages(),\n    targetAudiences: rawContent.targetAudiences || {},\n    successMetrics: rawContent.successMetrics || getDefaultMetrics(),\n    risks: rawContent.risks || []\n  };\n};\nexport const standardizeContentDraft = rawContent => {\n  if (!rawContent) return getDefaultContentDraft();\n\n  // Handle different content formats\n  if (typeof rawContent === 'string') {\n    return {\n      title: 'Content Draft',\n      type: 'press_release',\n      headline: '',\n      subheadline: '',\n      body: rawContent,\n      metadata: {\n        wordCount: rawContent.split(' ').length,\n        readingTime: `${Math.ceil(rawContent.split(' ').length / 200)} min`,\n        tone: 'professional',\n        targetAudience: 'general'\n      },\n      quotes: [],\n      keyPoints: [],\n      callToAction: '',\n      boilerplate: '',\n      contactInfo: ''\n    };\n  }\n  return {\n    title: rawContent.title || 'Content Draft',\n    type: rawContent.type || 'press_release',\n    headline: rawContent.headline || '',\n    subheadline: rawContent.subheadline || '',\n    body: rawContent.body || rawContent.content || '',\n    metadata: rawContent.metadata || {},\n    quotes: rawContent.quotes || [],\n    keyPoints: rawContent.keyPoints || [],\n    callToAction: rawContent.callToAction || '',\n    boilerplate: rawContent.boilerplate || '',\n    contactInfo: rawContent.contactInfo || ''\n  };\n};\n\n// ============================================\n// DEFAULT STRUCTURES (Fallbacks)\n// ============================================\n\nexport const getDefaultMediaList = () => ({\n  title: 'Strategic Media Plan',\n  description: 'Curated list of journalists and outlets',\n  totalContacts: 0,\n  journalists: [],\n  categories: {\n    tier1: [],\n    trade: [],\n    regional: [],\n    influencers: []\n  }\n});\nexport const getDefaultStrategicPlan = () => ({\n  title: 'Strategic Communications Plan',\n  objective: 'Drive awareness and adoption',\n  duration: '4 weeks',\n  milestones: getDefaultMilestones(),\n  keyMessages: getDefaultKeyMessages(),\n  targetAudiences: {},\n  successMetrics: getDefaultMetrics(),\n  risks: []\n});\nexport const getDefaultMilestones = () => [{\n  week: 1,\n  phase: 'Foundation',\n  task: 'Strategy & Planning',\n  details: 'Establish foundation and messaging',\n  deliverables: ['Messaging framework', 'Media list'],\n  owner: 'PR Team',\n  status: 'pending',\n  budget: '$10,000'\n}, {\n  week: 2,\n  phase: 'Preparation',\n  task: 'Content Creation',\n  details: 'Develop all materials',\n  deliverables: ['Press release', 'Social content'],\n  owner: 'Marketing Team',\n  status: 'pending',\n  budget: '$15,000'\n}];\nexport const getDefaultKeyMessages = () => ({\n  primary: 'Leading innovation in our industry',\n  supporting: ['Proven track record of success', 'Customer-focused approach', 'Industry-leading technology'],\n  audienceSpecific: {\n    executives: 'Strategic value and ROI',\n    technical: 'Advanced capabilities',\n    customers: 'Ease of use and benefits'\n  }\n});\nexport const getDefaultMetrics = () => ({\n  reach: '1M impressions',\n  coverage: '10 tier-1 stories',\n  engagement: '10K interactions',\n  conversions: '100 qualified leads'\n});\nexport const getDefaultContentDraft = () => ({\n  title: 'Press Release Draft',\n  type: 'press_release',\n  headline: 'Company Announces Major Innovation',\n  subheadline: 'New solution addresses key market needs',\n  body: '',\n  metadata: {\n    wordCount: 0,\n    readingTime: '0 min',\n    tone: 'professional',\n    targetAudience: 'media'\n  },\n  quotes: [],\n  keyPoints: [],\n  callToAction: 'Learn more at website.com',\n  boilerplate: 'About Company...',\n  contactInfo: 'Contact: PR Team'\n});\n\n// ============================================\n// STANDARDIZATION HELPER\n// ============================================\n\nexport const standardizeContent = (type, rawContent) => {\n  switch (type) {\n    case 'media-list':\n      return standardizeMediaPlan(rawContent);\n    case 'strategy-plan':\n      return standardizeStrategicPlan(rawContent);\n    case 'content-draft':\n      return standardizeContentDraft(rawContent);\n    case 'social-content':\n      return rawContent;\n    // TODO: implement\n    case 'key-messaging':\n      return rawContent;\n    // TODO: implement\n    case 'faq-document':\n      return rawContent;\n    // TODO: implement\n    default:\n      return rawContent;\n  }\n};","map":{"version":3,"names":["MediaPlanStructure","title","description","totalContacts","journalists","name","outlet","beat","email","tier","relevance","recentCoverage","pitchAngle","categories","tier1","trade","regional","influencers","MediaListStructure","StrategicPlanStructure","objective","duration","milestones","week","phase","task","details","deliverables","owner","status","budget","keyMessages","primary","supporting","audienceSpecific","targetAudiences","secondary","successMetrics","reach","coverage","engagement","conversions","risks","risk","likelihood","impact","mitigation","ContentDraftStructure","type","headline","subheadline","body","metadata","wordCount","readingTime","tone","targetAudience","quotes","keyPoints","callToAction","boilerplate","contactInfo","SocialContentStructure","platforms","twitter","text","hashtags","mediaType","threadPosition","linkedin","instagram","caption","imageDescription","schedule","engagementTips","KeyMessagingStructure","elevator","coreMessages","message","supportingPoints","proof","audience","differentiators","competitivePositioning","talkingPoints","executives","technical","customers","objectionHandling","objection","response","FAQStructure","category","questions","question","answer","sensitivity","lastUpdated","approvedBy","standardizeMediaPlan","rawContent","_rawContent$journalis","getDefaultMediaList","length","standardizeMediaList","standardizeStrategicPlan","_rawContent$timeline","_rawContent$timeline2","_rawContent$timeline3","getDefaultStrategicPlan","timeline","phases","forEach","milestone","push","getDefaultMilestones","getDefaultKeyMessages","getDefaultMetrics","standardizeContentDraft","getDefaultContentDraft","split","Math","ceil","content","standardizeContent"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/types/NivContentTypes.js"],"sourcesContent":["// Standardized data structures for all Niv-generated content\n// This ensures consistency across all workspace components\n\n// ============================================\n// MEDIA PLAN STRUCTURE  \n// ============================================\nexport const MediaPlanStructure = {\n  title: 'string - Title of the media plan',\n  description: 'string - Strategic approach summary',\n  totalContacts: 'number - Total number of contacts',\n  journalists: [\n    {\n      name: 'string - Journalist name',\n      outlet: 'string - Media outlet',\n      beat: 'string - Coverage area',\n      email: 'string - Email address',\n      tier: 'string - Tier level (1, 2, 3)',\n      relevance: 'string - Why they matter',\n      recentCoverage: 'string - Recent relevant articles',\n      pitchAngle: 'string - Suggested approach'\n    }\n  ],\n  categories: {\n    tier1: 'array - Top tier media',\n    trade: 'array - Industry publications',\n    regional: 'array - Local outlets',\n    influencers: 'array - Key voices'\n  }\n};\n\n// Alias for backward compatibility\nexport const MediaListStructure = MediaPlanStructure;\n\n// ============================================\n// STRATEGIC PLAN STRUCTURE\n// ============================================\nexport const StrategicPlanStructure = {\n  title: 'string - Plan title',\n  objective: 'string - Primary objective',\n  duration: 'string - Timeline (e.g., \"6 weeks\")',\n  \n  // Flat milestone structure for easy rendering\n  milestones: [\n    {\n      week: 'number - Week number',\n      phase: 'string - Phase name',\n      task: 'string - Task description',\n      details: 'string - Detailed description',\n      deliverables: 'array - List of deliverables',\n      owner: 'string - Responsible party',\n      status: 'string - pending|in-progress|completed',\n      budget: 'string - Budget allocation'\n    }\n  ],\n  \n  keyMessages: {\n    primary: 'string - Main message',\n    supporting: 'array - Supporting messages',\n    audienceSpecific: 'object - Messages per audience'\n  },\n  \n  targetAudiences: {\n    primary: 'object - Primary audience details',\n    secondary: 'object - Secondary audience details',\n    influencers: 'object - Key influencers'\n  },\n  \n  successMetrics: {\n    reach: 'string - Target reach',\n    coverage: 'string - Coverage goals',\n    engagement: 'string - Engagement targets',\n    conversions: 'string - Conversion goals'\n  },\n  \n  risks: [\n    {\n      risk: 'string - Risk description',\n      likelihood: 'string - low|medium|high',\n      impact: 'string - low|medium|high',\n      mitigation: 'string - Mitigation strategy'\n    }\n  ]\n};\n\n// ============================================\n// CONTENT DRAFT STRUCTURE (Press Release, etc)\n// ============================================\nexport const ContentDraftStructure = {\n  title: 'string - Content title',\n  type: 'string - press_release|blog_post|social_media|email',\n  \n  // Main content\n  headline: 'string - Main headline',\n  subheadline: 'string - Supporting headline',\n  body: 'string - Full content body',\n  \n  // Metadata\n  metadata: {\n    wordCount: 'number - Word count',\n    readingTime: 'string - Estimated reading time',\n    tone: 'string - Content tone',\n    targetAudience: 'string - Target audience'\n  },\n  \n  // Additional elements\n  quotes: 'array - Notable quotes',\n  keyPoints: 'array - Bullet points',\n  callToAction: 'string - CTA text',\n  boilerplate: 'string - Company boilerplate',\n  contactInfo: 'string - Contact information'\n};\n\n// ============================================\n// SOCIAL CONTENT STRUCTURE\n// ============================================\nexport const SocialContentStructure = {\n  title: 'string - Content package title',\n  platforms: {\n    twitter: [\n      {\n        text: 'string - Tweet text',\n        hashtags: 'array - Hashtags',\n        mediaType: 'string - image|video|link',\n        threadPosition: 'number - Position in thread'\n      }\n    ],\n    linkedin: {\n      headline: 'string - Post headline',\n      body: 'string - Full post text',\n      hashtags: 'array - Hashtags'\n    },\n    instagram: {\n      caption: 'string - Post caption',\n      hashtags: 'array - Hashtags',\n      imageDescription: 'string - Visual description'\n    }\n  },\n  schedule: 'array - Posting schedule',\n  engagementTips: 'array - Best practices'\n};\n\n// ============================================\n// KEY MESSAGING STRUCTURE\n// ============================================\nexport const KeyMessagingStructure = {\n  title: 'string - Framework title',\n  elevator: 'string - 30-second pitch',\n  \n  coreMessages: [\n    {\n      message: 'string - Key message',\n      supportingPoints: 'array - Supporting facts',\n      proof: 'string - Evidence/data',\n      audience: 'string - Target audience'\n    }\n  ],\n  \n  differentiators: 'array - Unique selling points',\n  competitivePositioning: 'object - vs competitors',\n  \n  talkingPoints: {\n    executives: 'array - C-level talking points',\n    technical: 'array - Technical details',\n    customers: 'array - Customer-facing points'\n  },\n  \n  objectionHandling: [\n    {\n      objection: 'string - Common objection',\n      response: 'string - Recommended response'\n    }\n  ]\n};\n\n// ============================================\n// FAQ DOCUMENT STRUCTURE\n// ============================================\nexport const FAQStructure = {\n  title: 'string - FAQ title',\n  categories: [\n    {\n      category: 'string - Category name',\n      questions: [\n        {\n          question: 'string - Question text',\n          answer: 'string - Answer text',\n          audience: 'string - Target audience',\n          sensitivity: 'string - public|internal|restricted'\n        }\n      ]\n    }\n  ],\n  lastUpdated: 'string - Date',\n  approvedBy: 'string - Approver'\n};\n\n// ============================================\n// TRANSFORMATION FUNCTIONS\n// ============================================\n\n// Transform Niv's generated content to standardized structure\nexport const standardizeMediaPlan = (rawContent) => {\n  if (!rawContent) return getDefaultMediaList();\n  \n  return {\n    title: rawContent.title || 'Strategic Media Plan',\n    description: rawContent.description || '',\n    totalContacts: rawContent.journalists?.length || 0,\n    journalists: rawContent.journalists || [],\n    categories: rawContent.categories || {\n      tier1: [],\n      trade: [],\n      regional: [],\n      influencers: []\n    }\n  };\n};\n\n// Alias for backward compatibility\nexport const standardizeMediaList = standardizeMediaPlan;\n\nexport const standardizeStrategicPlan = (rawContent) => {\n  if (!rawContent) return getDefaultStrategicPlan();\n  \n  // Flatten phases into milestones\n  let milestones = [];\n  \n  // Handle both nested phases structure and flat milestones\n  if (rawContent.timeline?.phases) {\n    rawContent.timeline.phases.forEach(phase => {\n      if (phase.milestones) {\n        phase.milestones.forEach(milestone => {\n          milestones.push({\n            ...milestone,\n            phase: phase.phase || phase.name,\n            status: milestone.status || 'pending'\n          });\n        });\n      }\n    });\n  } else if (rawContent.timeline?.milestones) {\n    milestones = rawContent.timeline.milestones;\n  } else if (rawContent.milestones) {\n    milestones = rawContent.milestones;\n  }\n  \n  return {\n    title: rawContent.title || 'Strategic Plan',\n    objective: rawContent.objective || '',\n    duration: rawContent.timeline?.duration || '4 weeks',\n    milestones: milestones.length > 0 ? milestones : getDefaultMilestones(),\n    keyMessages: rawContent.keyMessages || getDefaultKeyMessages(),\n    targetAudiences: rawContent.targetAudiences || {},\n    successMetrics: rawContent.successMetrics || getDefaultMetrics(),\n    risks: rawContent.risks || []\n  };\n};\n\nexport const standardizeContentDraft = (rawContent) => {\n  if (!rawContent) return getDefaultContentDraft();\n  \n  // Handle different content formats\n  if (typeof rawContent === 'string') {\n    return {\n      title: 'Content Draft',\n      type: 'press_release',\n      headline: '',\n      subheadline: '',\n      body: rawContent,\n      metadata: {\n        wordCount: rawContent.split(' ').length,\n        readingTime: `${Math.ceil(rawContent.split(' ').length / 200)} min`,\n        tone: 'professional',\n        targetAudience: 'general'\n      },\n      quotes: [],\n      keyPoints: [],\n      callToAction: '',\n      boilerplate: '',\n      contactInfo: ''\n    };\n  }\n  \n  return {\n    title: rawContent.title || 'Content Draft',\n    type: rawContent.type || 'press_release',\n    headline: rawContent.headline || '',\n    subheadline: rawContent.subheadline || '',\n    body: rawContent.body || rawContent.content || '',\n    metadata: rawContent.metadata || {},\n    quotes: rawContent.quotes || [],\n    keyPoints: rawContent.keyPoints || [],\n    callToAction: rawContent.callToAction || '',\n    boilerplate: rawContent.boilerplate || '',\n    contactInfo: rawContent.contactInfo || ''\n  };\n};\n\n// ============================================\n// DEFAULT STRUCTURES (Fallbacks)\n// ============================================\n\nexport const getDefaultMediaList = () => ({\n  title: 'Strategic Media Plan',\n  description: 'Curated list of journalists and outlets',\n  totalContacts: 0,\n  journalists: [],\n  categories: {\n    tier1: [],\n    trade: [],\n    regional: [],\n    influencers: []\n  }\n});\n\nexport const getDefaultStrategicPlan = () => ({\n  title: 'Strategic Communications Plan',\n  objective: 'Drive awareness and adoption',\n  duration: '4 weeks',\n  milestones: getDefaultMilestones(),\n  keyMessages: getDefaultKeyMessages(),\n  targetAudiences: {},\n  successMetrics: getDefaultMetrics(),\n  risks: []\n});\n\nexport const getDefaultMilestones = () => [\n  {\n    week: 1,\n    phase: 'Foundation',\n    task: 'Strategy & Planning',\n    details: 'Establish foundation and messaging',\n    deliverables: ['Messaging framework', 'Media list'],\n    owner: 'PR Team',\n    status: 'pending',\n    budget: '$10,000'\n  },\n  {\n    week: 2,\n    phase: 'Preparation',\n    task: 'Content Creation',\n    details: 'Develop all materials',\n    deliverables: ['Press release', 'Social content'],\n    owner: 'Marketing Team',\n    status: 'pending',\n    budget: '$15,000'\n  }\n];\n\nexport const getDefaultKeyMessages = () => ({\n  primary: 'Leading innovation in our industry',\n  supporting: [\n    'Proven track record of success',\n    'Customer-focused approach',\n    'Industry-leading technology'\n  ],\n  audienceSpecific: {\n    executives: 'Strategic value and ROI',\n    technical: 'Advanced capabilities',\n    customers: 'Ease of use and benefits'\n  }\n});\n\nexport const getDefaultMetrics = () => ({\n  reach: '1M impressions',\n  coverage: '10 tier-1 stories',\n  engagement: '10K interactions',\n  conversions: '100 qualified leads'\n});\n\nexport const getDefaultContentDraft = () => ({\n  title: 'Press Release Draft',\n  type: 'press_release',\n  headline: 'Company Announces Major Innovation',\n  subheadline: 'New solution addresses key market needs',\n  body: '',\n  metadata: {\n    wordCount: 0,\n    readingTime: '0 min',\n    tone: 'professional',\n    targetAudience: 'media'\n  },\n  quotes: [],\n  keyPoints: [],\n  callToAction: 'Learn more at website.com',\n  boilerplate: 'About Company...',\n  contactInfo: 'Contact: PR Team'\n});\n\n// ============================================\n// STANDARDIZATION HELPER\n// ============================================\n\nexport const standardizeContent = (type, rawContent) => {\n  switch(type) {\n    case 'media-list':\n      return standardizeMediaPlan(rawContent);\n    case 'strategy-plan':\n      return standardizeStrategicPlan(rawContent);\n    case 'content-draft':\n      return standardizeContentDraft(rawContent);\n    case 'social-content':\n      return rawContent; // TODO: implement\n    case 'key-messaging':\n      return rawContent; // TODO: implement\n    case 'faq-document':\n      return rawContent; // TODO: implement\n    default:\n      return rawContent;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}