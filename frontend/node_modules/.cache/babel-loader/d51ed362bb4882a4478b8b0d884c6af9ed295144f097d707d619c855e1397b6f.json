{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// SUPABASE-ONLY MODE - No traditional backend API\nimport{supabase}from'./supabase';const getAPIBaseURL=()=>{// Return empty string - all API calls go through Supabase\nreturn'';};const API_BASE_URL='';// No backend server - Supabase handles everything\n// Enhanced API configuration with retry logic and error handling\nconst API_CONFIG={baseURL:API_BASE_URL,timeout:30000,// 30 seconds\nretryAttempts:3,retryDelay:1000,// 1 second\nheaders:{'Content-Type':'application/json','Accept':'application/json'}};// Log the current configuration\nconsole.log('SignalDesk Configuration - SUPABASE ONLY:');console.log('- Backend Mode: Supabase Edge Functions');console.log('- Supabase URL:',process.env.REACT_APP_SUPABASE_URL);console.log('- Environment:',process.env.NODE_ENV);console.log('- Auth: Supabase Auth');console.log('- Database: Supabase PostgreSQL');console.log('- APIs: Supabase Edge Functions');console.log('✅ Supabase-only configuration loaded');// Debug log - only warn if API_BASE_URL is supposed to have a value\nif(API_BASE_URL&&!API_BASE_URL.startsWith('http')){console.error('⚠️ WARNING: API_BASE_URL is missing protocol:',API_BASE_URL);console.error('This will cause requests to fail. Check environment variables.');}else if(!API_BASE_URL){console.log('✅ Supabase-only mode: No API_BASE_URL needed');}// API request helper with retry logic\nexport async function apiRequest(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const fullUrl=url.startsWith('http')?url:\"\".concat(API_BASE_URL).concat(url);let lastError;for(let attempt=1;attempt<=API_CONFIG.retryAttempts;attempt++){try{const response=await fetch(fullUrl,_objectSpread(_objectSpread({},options),{},{headers:_objectSpread(_objectSpread({},API_CONFIG.headers),options.headers)}));// Log successful requests in development\nif(process.env.NODE_ENV==='development'){console.log(\"[API] \".concat(options.method||'GET',\" \").concat(url,\" - Status: \").concat(response.status));}return response;}catch(error){lastError=error;console.error(\"[API] Attempt \".concat(attempt,\"/\").concat(API_CONFIG.retryAttempts,\" failed for \").concat(url,\":\"),error.message);if(attempt<API_CONFIG.retryAttempts){await new Promise(resolve=>setTimeout(resolve,API_CONFIG.retryDelay*attempt));}}}throw lastError;}// Check API health\nexport async function checkAPIHealth(){try{const response=await apiRequest('/health');return response.ok;}catch(error){console.error('[API] Health check failed:',error);return false;}}export{API_CONFIG};export default API_BASE_URL;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}