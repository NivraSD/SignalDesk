{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// hooks/useMemoryVault.js\nimport{useState,useCallback}from\"react\";import{useParams}from\"react-router-dom\";import{useProject}from\"../contexts/ProjectContext\";import API_BASE_URL from'../config/api';/**\n * Custom hook for saving content to MemoryVault\n * Provides auto-save functionality for any feature component\n */export const useMemoryVault=()=>{const{projectId}=useParams();const{activeProject}=useProject();// Changed from selectedProject to activeProject\nconst[saveStatus,setSaveStatus]=useState(null);// 'saving', 'saved', 'error'\nconst[lastSavedItem,setLastSavedItem]=useState(null);const[isSaving,setIsSaving]=useState(false);/**\n   * Determine which MemoryVault folder based on content type\n   * Updated to match the 5 default folders created per project\n   */const determineFolderType=(contentType,folderType)=>{// If folderType is explicitly provided, use it\nif(folderType){return folderType;}// Map content type to folder type - MATCHING MEMORYVAULT STRUCTURE\nconst folderMap={// Content folder (PR Materials)\n\"press-release\":\"content\",announcement:\"content\",news:\"content\",\"blog-post\":\"content\",\"social-media\":\"content\",\"email-template\":\"content\",content:\"content\",// Campaign Intelligence folder\n\"campaign-brief\":\"campaign-intelligence\",\"campaign-plan\":\"campaign-intelligence\",\"competitor-analysis\":\"campaign-intelligence\",\"campaign-strategy\":\"campaign-intelligence\",// Media Lists folder\n\"media-list\":\"media-lists\",\"media-contact\":\"media-lists\",\"journalist-list\":\"media-lists\",// Crisis Management folder\n\"crisis-plan\":\"crisis-management\",\"crisis-communication\":\"crisis-management\",\"crisis-report\":\"crisis-management\",\"crisis-response\":\"crisis-management\",// Research folder\nanalytics:\"research\",report:\"research\",\"sentiment-analysis\":\"research\",\"performance-report\":\"research\",\"market-analysis\":\"research\",research:\"research\",// Default\ndefault:\"content\"};return folderMap[contentType]||folderMap.default;};/**\n   * Save content to MemoryVault\n   * @param {Object} params - Save parameters\n   * @param {string} params.content - The content to save\n   * @param {string} params.title - Title of the content\n   * @param {string} params.type - Type of content (e.g., 'press-release', 'blog-post')\n   * @param {string} params.folder_type - Explicit folder type (optional)\n   * @param {string} params.preview - Custom preview text (optional)\n   * @param {Array} params.tags - Tags for the content\n   * @param {Object} params.metadata - Additional metadata\n   * @param {string} params.source - Source feature (e.g., 'content-generator', 'ai-assistant')\n   * @returns {Promise<Object>} The saved item or null if error\n   */const saveToMemoryVault=useCallback(async _ref=>{let{content,title,type=\"general\",folder_type,preview,tags=[],metadata={},source=\"unknown\"}=_ref;console.log(\"=== useMemoryVault Hook Debug ===\");console.log(\"1. saveToMemoryVault called\");console.log(\"2. projectId from params:\",projectId);console.log(\"3. activeProject:\",activeProject);console.log(\"4. Content type:\",typeof content);console.log(\"5. Content length:\",content===null||content===void 0?void 0:content.length);console.log(\"6. Title:\",title);console.log(\"7. Type:\",type);console.log(\"8. Folder type:\",folder_type);// Use the projectId from params or from activeProject\nconst currentProjectId=projectId||(activeProject===null||activeProject===void 0?void 0:activeProject.id);console.log(\"9. Current project ID:\",currentProjectId);if(!currentProjectId||!content){console.error(\"Missing required data for MemoryVault save\",{projectId:currentProjectId,hasContent:!!content,activeProject});setSaveStatus(\"error\");setIsSaving(false);return{success:false,error:\"Missing project or content\"};}setSaveStatus(\"saving\");setIsSaving(true);try{// Auto-generate tags if none provided\nconst autoTags=[type,source,new Date().getFullYear().toString()];// Add project-specific tags if available\nif(activeProject){if(activeProject.industry)autoTags.push(activeProject.industry);if(activeProject.campaign)autoTags.push(activeProject.campaign);}const finalTags=[...new Set([...tags,...autoTags])].filter(Boolean);// Determine folder type\nconst folderType=determineFolderType(type,folder_type);// Create preview\nlet finalPreview=preview;// Use the provided preview parameter if available\nif(!finalPreview){// Only generate preview if none was provided\nif(typeof content===\"string\"){finalPreview=content.length>200?content.substring(0,200)+\"...\":content;}else{finalPreview=JSON.stringify(content).substring(0,200)+\"...\";}}const requestBody={folder_type:folderType,title:title||\"\".concat(type.replace(/-/g,\" \"),\" - \").concat(new Date().toLocaleDateString()),content:typeof content===\"string\"?content:JSON.stringify(content,null,2),preview:finalPreview,type:type,tags:finalTags,author:metadata.author||\"SignalDesk AI\",status:metadata.status||\"draft\",source:source,metadata:_objectSpread({projectId:currentProjectId,projectName:activeProject===null||activeProject===void 0?void 0:activeProject.name,projectIndustry:activeProject===null||activeProject===void 0?void 0:activeProject.industry,projectCampaign:activeProject===null||activeProject===void 0?void 0:activeProject.campaign,generatedAt:new Date().toISOString()},metadata)};console.log(\"10. Request body prepared:\",requestBody);console.log(\"11. Making API call to:\",\"\".concat(API_BASE_URL,\"/projects/\").concat(currentProjectId,\"/memoryvault\"));const response=await fetch(\"\".concat(API_BASE_URL,\"/projects/\").concat(currentProjectId,\"/memoryvault\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \".concat(localStorage.getItem(\"token\"))},body:JSON.stringify(requestBody)});console.log(\"12. Response status:\",response.status);console.log(\"13. Response ok?\",response.ok);const data=await response.json();console.log(\"14. Response data:\",data);if(response.ok&&data.success){setSaveStatus(\"saved\");setLastSavedItem(data.item);setIsSaving(false);// Auto-clear success status after 3 seconds\nsetTimeout(()=>{setSaveStatus(null);},3000);return{success:true,item:data.item};}else{throw new Error(data.message||\"Failed to save to MemoryVault\");}}catch(error){console.error(\"Error saving to MemoryVault:\",error);setSaveStatus(\"error\");setIsSaving(false);// Auto-clear error status after 5 seconds\nsetTimeout(()=>{setSaveStatus(null);},5000);return{success:false,error:error.message};}},[projectId,activeProject]);/**\n   * Quick save function with minimal parameters\n   */const quickSave=useCallback(async function(content,title){let type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"general\";return saveToMemoryVault({content,title,type});},[saveToMemoryVault]);/**\n   * Clear save status manually\n   */const clearStatus=useCallback(()=>{setSaveStatus(null);},[]);return{saveToMemoryVault,quickSave,saveStatus,lastSavedItem,clearStatus,isProjectReady:!!(projectId||activeProject!==null&&activeProject!==void 0&&activeProject.id),isSaving};};// Export status types for consistency\nexport const SAVE_STATUS={SAVING:\"saving\",SAVED:\"saved\",ERROR:\"error\"};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}