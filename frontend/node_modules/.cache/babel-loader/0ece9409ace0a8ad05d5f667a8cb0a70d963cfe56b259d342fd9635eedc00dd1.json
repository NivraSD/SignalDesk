{"ast":null,"code":"/**\n * Unified Intelligence Service\n * Connects: Company Profile → Stakeholders → Sources → Monitoring → Opportunity Discovery\n */\n\nimport stakeholderIntelligenceService from './stakeholderIntelligenceService';\nimport prDetectionService from './prDetectionService';\nimport narrativeVacuumService from './narrativeVacuumService';\nclass UnifiedIntelligenceService {\n  constructor() {\n    // Single source of truth for the entire intelligence flow\n    this.companyProfile = null;\n    this.stakeholders = [];\n    this.sources = [];\n    this.monitoringData = [];\n    this.opportunities = [];\n    this.goals = [];\n    this.isInitialized = false;\n\n    // Log state changes for debugging\n    console.log('UnifiedIntelligenceService initialized');\n  }\n\n  /**\n   * STEP 1: Initialize company profile and goals\n   */\n  async initializeCompany(data) {\n    console.log('UnifiedService - Initializing company with data:', data);\n    this.companyProfile = {\n      id: Date.now(),\n      company: data.company,\n      url: data.url,\n      industry: data.industry,\n      userType: data.userType,\n      // 'brand', 'agency', 'agency-self'\n      objectives: data.objectives,\n      expertiseAreas: this.extractExpertise(data),\n      competitors: data.competitors || [],\n      createdAt: new Date().toISOString()\n    };\n\n    // Extract specific goals from objectives\n    this.goals = this.parseGoals(data.objectives);\n    this.isInitialized = true;\n    console.log('UnifiedService - Company profile created:', this.companyProfile);\n    console.log('UnifiedService - Goals identified:', this.goals);\n\n    // Save to backend\n    try {\n      await stakeholderIntelligenceService.createOrganization(this.companyProfile);\n    } catch (error) {\n      console.error('Error saving company profile:', error);\n    }\n    return this.companyProfile;\n  }\n\n  /**\n   * STEP 2: Identify stakeholders based on company and goals\n   */\n  async identifyStakeholders() {\n    if (!this.companyProfile) {\n      console.warn('UnifiedService - Company profile not initialized when identifying stakeholders');\n      return this.stakeholders; // Return existing stakeholders if any\n    }\n    console.log('UnifiedService - Identifying stakeholders for userType:', this.companyProfile.userType);\n    const stakeholders = [];\n    const timestamp = Date.now();\n\n    // PR-specific stakeholders based on user type\n    if (this.companyProfile.userType === 'brand') {\n      stakeholders.push({\n        id: `media-outlets-${timestamp}-${stakeholders.length}`,\n        name: 'Target Media Outlets',\n        type: 'media',\n        reason: 'Earn media coverage for brand visibility',\n        topics: this.generateMediaTopics(),\n        priority: 'high',\n        prContext: 'earned_media',\n        prMetrics: {\n          opportunityScore: 85,\n          riskLevel: 10,\n          engagementPotential: 90,\n          timelineCriticality: 'ongoing'\n        }\n      }, {\n        id: `journalists-${timestamp}-${stakeholders.length}`,\n        name: 'Industry Journalists',\n        type: 'influencer',\n        reason: 'Build relationships for story placement',\n        topics: ['industry trends', 'company news', 'expert commentary'],\n        priority: 'high',\n        prContext: 'media_relations',\n        prMetrics: {\n          opportunityScore: 80,\n          riskLevel: 15,\n          engagementPotential: 85,\n          timelineCriticality: 'ongoing'\n        }\n      }, {\n        id: `competitors-${timestamp}-${stakeholders.length}`,\n        name: 'Competitor Activity',\n        type: 'competitive',\n        reason: 'Track competitor PR wins and strategies',\n        topics: ['product launches', 'executive changes', 'funding', 'crises'],\n        priority: 'medium',\n        prContext: 'competitive_analysis',\n        prMetrics: {\n          opportunityScore: 70,\n          riskLevel: 30,\n          engagementPotential: 60,\n          timelineCriticality: 'ongoing'\n        }\n      });\n    } else if (this.companyProfile.userType === 'agency') {\n      stakeholders.push({\n        id: `client-mentions-${timestamp}-${stakeholders.length}`,\n        name: 'Client Media Coverage',\n        type: 'client',\n        reason: 'Track and amplify client coverage',\n        topics: ['client name mentions', 'industry news', 'competitor moves'],\n        priority: 'critical',\n        prContext: 'client_results',\n        prMetrics: {\n          opportunityScore: 90,\n          riskLevel: 25,\n          engagementPotential: 95,\n          timelineCriticality: 'immediate'\n        }\n      }, {\n        id: `media-opportunities-${timestamp}-${stakeholders.length}`,\n        name: 'Media Opportunities',\n        type: 'opportunity',\n        reason: 'Find pitching opportunities for clients',\n        topics: ['journalist requests', 'trending stories', 'news hooks'],\n        priority: 'high',\n        prContext: 'media_pitching',\n        prMetrics: {\n          opportunityScore: 85,\n          riskLevel: 5,\n          engagementPotential: 90,\n          timelineCriticality: 'immediate'\n        }\n      });\n    } else if (this.companyProfile.userType === 'agency-self') {\n      stakeholders.push({\n        id: `prospects-${timestamp}-${stakeholders.length}`,\n        name: 'Business Development Targets',\n        type: 'prospect',\n        reason: 'Identify companies needing PR help',\n        topics: ['funding rounds', 'leadership changes', 'crises', 'expansions'],\n        priority: 'critical',\n        prContext: 'business_development',\n        prMetrics: {\n          opportunityScore: 95,\n          riskLevel: 10,\n          engagementPotential: 100,\n          timelineCriticality: 'immediate'\n        }\n      }, {\n        id: `competitor-agencies-${timestamp}-${stakeholders.length}`,\n        name: 'Competing Agencies',\n        type: 'competitive',\n        reason: 'Track competitor wins and losses',\n        topics: ['new accounts', 'case studies', 'awards', 'client losses'],\n        priority: 'high',\n        prContext: 'competitive_intel',\n        prMetrics: {\n          opportunityScore: 75,\n          riskLevel: 20,\n          engagementPotential: 70,\n          timelineCriticality: 'ongoing'\n        }\n      });\n    }\n\n    // Add goal-specific stakeholders\n    this.goals.forEach(goal => {\n      const goalStakeholders = this.getStakeholdersForGoal(goal);\n      stakeholders.push(...goalStakeholders);\n    });\n\n    // Add custom stakeholders from user input\n    if (this.companyProfile.customStakeholders) {\n      stakeholders.push(...this.companyProfile.customStakeholders);\n    }\n    this.stakeholders = stakeholders;\n    console.log('UnifiedService - Identified', stakeholders.length, 'stakeholders');\n    console.log('UnifiedService - Stakeholder IDs:', stakeholders.map(s => s.id));\n\n    // Generate monitoring topics from stakeholders\n    this.monitoringTopics = this.generateMonitoringTopics(stakeholders);\n    return stakeholders;\n  }\n\n  /**\n   * STEP 3: Configure sources for each stakeholder\n   */\n  async configureSources() {\n    if (!this.stakeholders.length) {\n      console.warn('UnifiedService - No stakeholders identified when configuring sources');\n      return this.sources;\n    }\n    console.log('UnifiedService - Configuring sources for', this.stakeholders.length, 'stakeholders');\n    const sources = [];\n    for (const stakeholder of this.stakeholders) {\n      const stakeholderSources = await this.getSourcesForStakeholder(stakeholder);\n      sources.push({\n        stakeholderId: stakeholder.id,\n        stakeholderName: stakeholder.name,\n        sources: stakeholderSources\n      });\n    }\n    this.sources = sources;\n    console.log('UnifiedService - Configured', sources.length, 'source groups');\n\n    // Validate and activate sources\n    await this.validateSources();\n    return sources;\n  }\n\n  /**\n   * STEP 4: Start monitoring and collect intelligence\n   */\n  async startMonitoring() {\n    if (!this.sources.length) {\n      throw new Error('No sources configured');\n    }\n    const monitoringResults = [];\n\n    // Monitor each source\n    for (const sourceGroup of this.sources) {\n      for (const source of sourceGroup.sources) {\n        if (source.active) {\n          try {\n            const data = await this.monitorSource(source, sourceGroup.stakeholderId);\n            monitoringResults.push(...data);\n          } catch (error) {\n            console.error(`Error monitoring source ${source.name}:`, error);\n          }\n        }\n      }\n    }\n    this.monitoringData = monitoringResults;\n\n    // Analyze findings for PR signals\n    await this.analyzeFindings(monitoringResults);\n    return monitoringResults;\n  }\n\n  /**\n   * STEP 5: Discover opportunities based on goals and monitoring\n   */\n  async discoverOpportunities() {\n    const opportunities = [];\n\n    // 1. Find narrative vacuums based on expertise\n    const narrativeVacuums = await narrativeVacuumService.discoverOpportunities(this.companyProfile, {\n      limit: 10\n    });\n    opportunities.push(...narrativeVacuums.opportunities.map(opp => ({\n      ...opp,\n      source: 'narrative_vacuum',\n      matchedGoals: this.matchOpportunityToGoals(opp)\n    })));\n\n    // 2. Analyze monitoring data for PR opportunities\n    for (const finding of this.monitoringData) {\n      const prAnalysis = prDetectionService.analyzePRSignals(finding.content || '', {\n        isOwnBrand: finding.stakeholder === this.companyProfile.company,\n        isCompetitor: this.companyProfile.competitors.includes(finding.stakeholder),\n        isClient: finding.stakeholderType === 'client'\n      });\n\n      // Extract opportunities that match goals\n      if (prAnalysis.opportunities.length > 0) {\n        prAnalysis.opportunities.forEach(opp => {\n          const matchedGoals = this.matchOpportunityToGoals(opp);\n          if (matchedGoals.length > 0) {\n            opportunities.push({\n              ...opp,\n              source: 'monitoring',\n              stakeholder: finding.stakeholder,\n              matchedGoals,\n              content: finding.content,\n              discoveredAt: new Date().toISOString()\n            });\n          }\n        });\n      }\n    }\n\n    // 3. Find competitive advantage windows\n    const competitorWeaknesses = await this.findCompetitorWeaknesses();\n    opportunities.push(...competitorWeaknesses);\n\n    // 4. Identify trending topics we can hijack\n    const trendingOpportunities = await this.findTrendingOpportunities();\n    opportunities.push(...trendingOpportunities);\n\n    // Sort by relevance to goals\n    opportunities.sort((a, b) => {\n      var _a$matchedGoals, _b$matchedGoals;\n      const aScore = (a.score || 0) * (((_a$matchedGoals = a.matchedGoals) === null || _a$matchedGoals === void 0 ? void 0 : _a$matchedGoals.length) || 1);\n      const bScore = (b.score || 0) * (((_b$matchedGoals = b.matchedGoals) === null || _b$matchedGoals === void 0 ? void 0 : _b$matchedGoals.length) || 1);\n      return bScore - aScore;\n    });\n    this.opportunities = opportunities;\n    return opportunities;\n  }\n\n  /**\n   * Helper: Parse goals from objectives text\n   */\n  parseGoals(objectives) {\n    const goals = [];\n    const objectivesLower = objectives.toLowerCase();\n\n    // Common PR goals\n    const goalPatterns = {\n      'generate_leads': ['new business', 'generate leads', 'win clients', 'grow revenue'],\n      'build_awareness': ['brand awareness', 'visibility', 'recognition', 'known for'],\n      'thought_leadership': ['thought leader', 'expert', 'authority', 'go-to'],\n      'crisis_prevention': ['protect reputation', 'risk management', 'crisis', 'prevent'],\n      'media_coverage': ['media coverage', 'press', 'news', 'publicity'],\n      'launch_product': ['launch', 'introduce', 'announce', 'reveal'],\n      'attract_talent': ['recruit', 'hire', 'talent', 'employees'],\n      'investor_relations': ['funding', 'investors', 'ipo', 'valuation']\n    };\n    Object.entries(goalPatterns).forEach(([goal, patterns]) => {\n      if (patterns.some(pattern => objectivesLower.includes(pattern))) {\n        goals.push({\n          id: goal,\n          name: goal.replace('_', ' ').toUpperCase(),\n          active: true\n        });\n      }\n    });\n    return goals.length > 0 ? goals : [{\n      id: 'general_pr',\n      name: 'GENERAL PR',\n      active: true\n    }];\n  }\n\n  /**\n   * Helper: Extract expertise from company data\n   */\n  extractExpertise(data) {\n    const expertise = {};\n\n    // Extract from objectives and description\n    const text = `${data.objectives} ${data.description || ''}`.toLowerCase();\n    const expertiseKeywords = {\n      'AI': ['artificial intelligence', 'machine learning', 'ai', 'ml', 'neural'],\n      'cloud': ['cloud', 'saas', 'paas', 'iaas', 'aws', 'azure'],\n      'security': ['security', 'cyber', 'privacy', 'protection', 'secure'],\n      'data': ['data', 'analytics', 'insights', 'intelligence', 'metrics'],\n      'mobile': ['mobile', 'ios', 'android', 'app'],\n      'blockchain': ['blockchain', 'crypto', 'web3', 'defi'],\n      'sustainability': ['sustainable', 'green', 'climate', 'esg', 'carbon']\n    };\n    Object.entries(expertiseKeywords).forEach(([area, keywords]) => {\n      const matches = keywords.filter(keyword => text.includes(keyword));\n      if (matches.length > 0) {\n        expertise[area] = Math.min(1.0, matches.length * 0.3);\n      }\n    });\n    return expertise;\n  }\n\n  /**\n   * Helper: Generate media topics based on expertise\n   */\n  generateMediaTopics() {\n    const topics = [];\n    if (this.companyProfile.expertiseAreas) {\n      Object.keys(this.companyProfile.expertiseAreas).forEach(area => {\n        topics.push(`${area} trends`, `${area} innovation`, `future of ${area}`);\n      });\n    }\n    topics.push('industry analysis', 'market insights', 'executive perspective');\n    return topics;\n  }\n\n  /**\n   * Helper: Get stakeholders for specific goal\n   */\n  getStakeholdersForGoal(goal) {\n    const stakeholderMap = {\n      'generate_leads': [{\n        id: `${goal.id}-prospects`,\n        name: 'Lead Generation Targets',\n        type: 'prospect',\n        reason: 'Companies showing buying signals',\n        topics: ['budget allocated', 'vendor search', 'RFP issued'],\n        priority: 'critical',\n        prContext: 'business_development',\n        prMetrics: {\n          opportunityScore: 90,\n          riskLevel: 5,\n          engagementPotential: 95,\n          timelineCriticality: 'immediate'\n        }\n      }],\n      'build_awareness': [{\n        id: `${goal.id}-influencers`,\n        name: 'Industry Influencers',\n        type: 'influencer',\n        reason: 'Amplify brand message',\n        topics: ['industry commentary', 'trend analysis', 'predictions'],\n        priority: 'high',\n        prContext: 'influencer_relations',\n        prMetrics: {\n          opportunityScore: 75,\n          riskLevel: 10,\n          engagementPotential: 80,\n          timelineCriticality: 'ongoing'\n        }\n      }],\n      'investor_relations': [{\n        id: `${goal.id}-investors`,\n        name: 'Target Investors',\n        type: 'investor',\n        reason: 'Track investor interests and portfolio moves',\n        topics: ['investment thesis', 'portfolio companies', 'fund announcements'],\n        priority: 'high',\n        prContext: 'investor_relations',\n        prMetrics: {\n          opportunityScore: 85,\n          riskLevel: 15,\n          engagementPotential: 75,\n          timelineCriticality: 'ongoing'\n        }\n      }]\n    };\n    return stakeholderMap[goal.id] || [];\n  }\n\n  /**\n   * Helper: Generate monitoring topics from stakeholders\n   */\n  generateMonitoringTopics(stakeholders) {\n    const topics = new Set();\n    stakeholders.forEach(stakeholder => {\n      if (stakeholder.topics) {\n        stakeholder.topics.forEach(topic => topics.add(topic));\n      }\n    });\n\n    // Add company-specific topics\n    topics.add(this.companyProfile.company);\n    this.companyProfile.competitors.forEach(comp => topics.add(comp));\n    return Array.from(topics);\n  }\n\n  /**\n   * Helper: Get sources for stakeholder\n   */\n  async getSourcesForStakeholder(stakeholder) {\n    const sources = [];\n\n    // Base sources for all stakeholders\n    sources.push({\n      id: `${stakeholder.id}-google-news`,\n      name: 'Google News',\n      url: `https://news.google.com/search?q=${encodeURIComponent(stakeholder.name)}`,\n      type: 'news',\n      active: true\n    });\n\n    // Type-specific sources\n    if (stakeholder.type === 'media') {\n      sources.push({\n        id: `${stakeholder.id}-pr-newswire`,\n        name: 'PR Newswire',\n        url: 'https://www.prnewswire.com/rss/news-releases-list.rss',\n        type: 'rss',\n        active: true\n      }, {\n        id: `${stakeholder.id}-haro`,\n        name: 'HARO Requests',\n        url: 'https://www.helpareporter.com',\n        type: 'email',\n        active: true\n      });\n    } else if (stakeholder.type === 'competitive') {\n      sources.push({\n        id: `${stakeholder.id}-competitor-news`,\n        name: 'Competitor News Feed',\n        url: `https://www.google.com/alerts/feeds/${stakeholder.id}`,\n        type: 'rss',\n        active: true\n      });\n    } else if (stakeholder.type === 'prospect') {\n      sources.push({\n        id: `${stakeholder.id}-crunchbase`,\n        name: 'Crunchbase Signals',\n        url: 'https://news.crunchbase.com/feed/',\n        type: 'rss',\n        active: true\n      });\n    }\n\n    // Add social media monitoring\n    sources.push({\n      id: `${stakeholder.id}-twitter`,\n      name: 'Twitter Monitoring',\n      url: `https://twitter.com/search?q=${encodeURIComponent(stakeholder.name)}`,\n      type: 'social',\n      active: true\n    });\n    return sources;\n  }\n\n  /**\n   * Helper: Validate sources\n   */\n  async validateSources() {\n    for (const sourceGroup of this.sources) {\n      for (const source of sourceGroup.sources) {\n        try {\n          // In production: Actually validate the URL/feed\n          source.validated = true;\n          source.lastValidated = new Date().toISOString();\n        } catch (error) {\n          source.validated = false;\n          source.error = error.message;\n        }\n      }\n    }\n  }\n\n  /**\n   * Helper: Monitor a single source\n   */\n  async monitorSource(source, stakeholderId) {\n    // In production: Actually fetch from the source\n    // For now, simulate monitoring data\n    const mockFindings = [{\n      id: `finding-${Date.now()}-${Math.random()}`,\n      stakeholder: stakeholderId,\n      source: source.name,\n      content: `Sample finding from ${source.name} about ${stakeholderId}`,\n      timestamp: new Date().toISOString(),\n      relevance: Math.random()\n    }];\n    return mockFindings;\n  }\n\n  /**\n   * Helper: Analyze findings for insights\n   */\n  async analyzeFindings(findings) {\n    for (const finding of findings) {\n      // Add PR analysis\n      finding.prAnalysis = prDetectionService.analyzePRSignals(finding.content);\n\n      // Add sentiment\n      finding.sentiment = prDetectionService.analyzeSentiment(finding.content);\n\n      // Check goal relevance\n      finding.goalRelevance = this.checkGoalRelevance(finding);\n    }\n  }\n\n  /**\n   * Helper: Match opportunity to goals\n   */\n  matchOpportunityToGoals(opportunity) {\n    const matchedGoals = [];\n    this.goals.forEach(goal => {\n      let matches = false;\n\n      // Match based on opportunity type and goal\n      if (goal.id === 'generate_leads' && opportunity.category === 'business_development') {\n        matches = true;\n      } else if (goal.id === 'build_awareness' && opportunity.category === 'earned_media') {\n        matches = true;\n      } else if (goal.id === 'thought_leadership' && opportunity.category === 'thought_leadership') {\n        matches = true;\n      } else if (goal.id === 'media_coverage' && opportunity.type === 'opportunity') {\n        matches = true;\n      }\n\n      // Check topic relevance\n      const oppText = (opportunity.topic || opportunity.content || '').toLowerCase();\n      if (goal.id === 'generate_leads' && oppText.includes('funding')) {\n        matches = true;\n      }\n      if (matches) {\n        matchedGoals.push(goal);\n      }\n    });\n    return matchedGoals;\n  }\n\n  /**\n   * Helper: Check if finding is relevant to goals\n   */\n  checkGoalRelevance(finding) {\n    let relevanceScore = 0;\n    const content = (finding.content || '').toLowerCase();\n    this.goals.forEach(goal => {\n      if (goal.id === 'generate_leads' && (content.includes('funding') || content.includes('expansion'))) {\n        relevanceScore += 0.3;\n      }\n      if (goal.id === 'media_coverage' && (content.includes('journalist') || content.includes('reporter'))) {\n        relevanceScore += 0.3;\n      }\n    });\n    return Math.min(1.0, relevanceScore);\n  }\n\n  /**\n   * Helper: Find competitor weaknesses\n   */\n  async findCompetitorWeaknesses() {\n    const weaknesses = [];\n    for (const competitor of this.companyProfile.competitors) {\n      // Check for negative signals\n      const negativeFindings = this.monitoringData.filter(f => {\n        var _f$sentiment;\n        return f.stakeholder === competitor && ((_f$sentiment = f.sentiment) === null || _f$sentiment === void 0 ? void 0 : _f$sentiment.sentiment) === 'negative';\n      });\n      if (negativeFindings.length > 0) {\n        weaknesses.push({\n          type: 'competitive_advantage',\n          topic: `${competitor} facing challenges`,\n          score: 75,\n          matchedGoals: this.goals,\n          explanation: `${competitor} is experiencing negative coverage - opportunity to position as alternative`,\n          source: 'competitive_analysis',\n          discoveredAt: new Date().toISOString()\n        });\n      }\n    }\n    return weaknesses;\n  }\n\n  /**\n   * Helper: Find trending opportunities\n   */\n  async findTrendingOpportunities() {\n    // In production: Use Google Trends API\n    const trending = [{\n      topic: 'AI regulation',\n      score: 85\n    }, {\n      topic: 'remote work future',\n      score: 70\n    }, {\n      topic: 'sustainability initiatives',\n      score: 75\n    }];\n    return trending.map(trend => ({\n      type: 'trending',\n      topic: trend.topic,\n      score: trend.score,\n      matchedGoals: this.matchOpportunityToGoals({\n        topic: trend.topic\n      }),\n      explanation: `Trending topic with high media interest`,\n      source: 'trend_analysis',\n      discoveredAt: new Date().toISOString()\n    }));\n  }\n\n  /**\n   * Get current state of the entire intelligence pipeline\n   */\n  getState() {\n    const state = {\n      companyProfile: this.companyProfile,\n      goals: this.goals,\n      stakeholders: this.stakeholders,\n      sources: this.sources,\n      monitoringData: this.monitoringData,\n      opportunities: this.opportunities,\n      monitoringTopics: this.monitoringTopics,\n      isInitialized: this.isInitialized\n    };\n    console.log('UnifiedService - getState called, returning:', {\n      hasCompanyProfile: !!state.companyProfile,\n      stakeholderCount: state.stakeholders.length,\n      sourceCount: state.sources.length,\n      isInitialized: state.isInitialized\n    });\n    return state;\n  }\n\n  /**\n   * Run the complete intelligence pipeline\n   */\n  async runCompletePipeline(companyData) {\n    console.log('Starting unified intelligence pipeline...');\n\n    // Step 1: Initialize company\n    await this.initializeCompany(companyData);\n    console.log('✓ Company profile created');\n\n    // Step 2: Identify stakeholders\n    await this.identifyStakeholders();\n    console.log(`✓ ${this.stakeholders.length} stakeholders identified`);\n\n    // Step 3: Configure sources\n    await this.configureSources();\n    console.log(`✓ ${this.sources.length} source groups configured`);\n\n    // Step 4: Start monitoring\n    await this.startMonitoring();\n    console.log(`✓ ${this.monitoringData.length} findings collected`);\n\n    // Step 5: Discover opportunities\n    const opportunities = await this.discoverOpportunities();\n    console.log(`✓ ${opportunities.length} opportunities discovered`);\n    return {\n      success: true,\n      summary: {\n        stakeholders: this.stakeholders.length,\n        sources: this.sources.reduce((acc, sg) => acc + sg.sources.length, 0),\n        findings: this.monitoringData.length,\n        opportunities: opportunities.length\n      },\n      opportunities: opportunities.slice(0, 10),\n      // Top 10\n      state: this.getState()\n    };\n  }\n}\nexport default new UnifiedIntelligenceService();","map":{"version":3,"names":["stakeholderIntelligenceService","prDetectionService","narrativeVacuumService","UnifiedIntelligenceService","constructor","companyProfile","stakeholders","sources","monitoringData","opportunities","goals","isInitialized","console","log","initializeCompany","data","id","Date","now","company","url","industry","userType","objectives","expertiseAreas","extractExpertise","competitors","createdAt","toISOString","parseGoals","createOrganization","error","identifyStakeholders","warn","timestamp","push","length","name","type","reason","topics","generateMediaTopics","priority","prContext","prMetrics","opportunityScore","riskLevel","engagementPotential","timelineCriticality","forEach","goal","goalStakeholders","getStakeholdersForGoal","customStakeholders","map","s","monitoringTopics","generateMonitoringTopics","configureSources","stakeholder","stakeholderSources","getSourcesForStakeholder","stakeholderId","stakeholderName","validateSources","startMonitoring","Error","monitoringResults","sourceGroup","source","active","monitorSource","analyzeFindings","discoverOpportunities","narrativeVacuums","limit","opp","matchedGoals","matchOpportunityToGoals","finding","prAnalysis","analyzePRSignals","content","isOwnBrand","isCompetitor","includes","isClient","stakeholderType","discoveredAt","competitorWeaknesses","findCompetitorWeaknesses","trendingOpportunities","findTrendingOpportunities","sort","a","b","_a$matchedGoals","_b$matchedGoals","aScore","score","bScore","objectivesLower","toLowerCase","goalPatterns","Object","entries","patterns","some","pattern","replace","toUpperCase","expertise","text","description","expertiseKeywords","area","keywords","matches","filter","keyword","Math","min","keys","stakeholderMap","Set","topic","add","comp","Array","from","encodeURIComponent","validated","lastValidated","message","mockFindings","random","relevance","findings","sentiment","analyzeSentiment","goalRelevance","checkGoalRelevance","opportunity","category","oppText","relevanceScore","weaknesses","competitor","negativeFindings","f","_f$sentiment","explanation","trending","trend","getState","state","hasCompanyProfile","stakeholderCount","sourceCount","runCompletePipeline","companyData","success","summary","reduce","acc","sg","slice"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/services/unifiedIntelligenceService.js"],"sourcesContent":["/**\n * Unified Intelligence Service\n * Connects: Company Profile → Stakeholders → Sources → Monitoring → Opportunity Discovery\n */\n\nimport stakeholderIntelligenceService from './stakeholderIntelligenceService';\nimport prDetectionService from './prDetectionService';\nimport narrativeVacuumService from './narrativeVacuumService';\n\nclass UnifiedIntelligenceService {\n  constructor() {\n    // Single source of truth for the entire intelligence flow\n    this.companyProfile = null;\n    this.stakeholders = [];\n    this.sources = [];\n    this.monitoringData = [];\n    this.opportunities = [];\n    this.goals = [];\n    this.isInitialized = false;\n    \n    // Log state changes for debugging\n    console.log('UnifiedIntelligenceService initialized');\n  }\n\n  /**\n   * STEP 1: Initialize company profile and goals\n   */\n  async initializeCompany(data) {\n    console.log('UnifiedService - Initializing company with data:', data);\n    \n    this.companyProfile = {\n      id: Date.now(),\n      company: data.company,\n      url: data.url,\n      industry: data.industry,\n      userType: data.userType, // 'brand', 'agency', 'agency-self'\n      objectives: data.objectives,\n      expertiseAreas: this.extractExpertise(data),\n      competitors: data.competitors || [],\n      createdAt: new Date().toISOString()\n    };\n\n    // Extract specific goals from objectives\n    this.goals = this.parseGoals(data.objectives);\n    this.isInitialized = true;\n    \n    console.log('UnifiedService - Company profile created:', this.companyProfile);\n    console.log('UnifiedService - Goals identified:', this.goals);\n\n    // Save to backend\n    try {\n      await stakeholderIntelligenceService.createOrganization(this.companyProfile);\n    } catch (error) {\n      console.error('Error saving company profile:', error);\n    }\n\n    return this.companyProfile;\n  }\n\n  /**\n   * STEP 2: Identify stakeholders based on company and goals\n   */\n  async identifyStakeholders() {\n    if (!this.companyProfile) {\n      console.warn('UnifiedService - Company profile not initialized when identifying stakeholders');\n      return this.stakeholders; // Return existing stakeholders if any\n    }\n\n    console.log('UnifiedService - Identifying stakeholders for userType:', this.companyProfile.userType);\n    const stakeholders = [];\n    const timestamp = Date.now();\n\n    // PR-specific stakeholders based on user type\n    if (this.companyProfile.userType === 'brand') {\n      stakeholders.push(\n        {\n          id: `media-outlets-${timestamp}-${stakeholders.length}`,\n          name: 'Target Media Outlets',\n          type: 'media',\n          reason: 'Earn media coverage for brand visibility',\n          topics: this.generateMediaTopics(),\n          priority: 'high',\n          prContext: 'earned_media',\n          prMetrics: {\n            opportunityScore: 85,\n            riskLevel: 10,\n            engagementPotential: 90,\n            timelineCriticality: 'ongoing'\n          }\n        },\n        {\n          id: `journalists-${timestamp}-${stakeholders.length}`,\n          name: 'Industry Journalists',\n          type: 'influencer',\n          reason: 'Build relationships for story placement',\n          topics: ['industry trends', 'company news', 'expert commentary'],\n          priority: 'high',\n          prContext: 'media_relations',\n          prMetrics: {\n            opportunityScore: 80,\n            riskLevel: 15,\n            engagementPotential: 85,\n            timelineCriticality: 'ongoing'\n          }\n        },\n        {\n          id: `competitors-${timestamp}-${stakeholders.length}`,\n          name: 'Competitor Activity',\n          type: 'competitive',\n          reason: 'Track competitor PR wins and strategies',\n          topics: ['product launches', 'executive changes', 'funding', 'crises'],\n          priority: 'medium',\n          prContext: 'competitive_analysis',\n          prMetrics: {\n            opportunityScore: 70,\n            riskLevel: 30,\n            engagementPotential: 60,\n            timelineCriticality: 'ongoing'\n          }\n        }\n      );\n    } else if (this.companyProfile.userType === 'agency') {\n      stakeholders.push(\n        {\n          id: `client-mentions-${timestamp}-${stakeholders.length}`,\n          name: 'Client Media Coverage',\n          type: 'client',\n          reason: 'Track and amplify client coverage',\n          topics: ['client name mentions', 'industry news', 'competitor moves'],\n          priority: 'critical',\n          prContext: 'client_results',\n          prMetrics: {\n            opportunityScore: 90,\n            riskLevel: 25,\n            engagementPotential: 95,\n            timelineCriticality: 'immediate'\n          }\n        },\n        {\n          id: `media-opportunities-${timestamp}-${stakeholders.length}`,\n          name: 'Media Opportunities',\n          type: 'opportunity',\n          reason: 'Find pitching opportunities for clients',\n          topics: ['journalist requests', 'trending stories', 'news hooks'],\n          priority: 'high',\n          prContext: 'media_pitching',\n          prMetrics: {\n            opportunityScore: 85,\n            riskLevel: 5,\n            engagementPotential: 90,\n            timelineCriticality: 'immediate'\n          }\n        }\n      );\n    } else if (this.companyProfile.userType === 'agency-self') {\n      stakeholders.push(\n        {\n          id: `prospects-${timestamp}-${stakeholders.length}`,\n          name: 'Business Development Targets',\n          type: 'prospect',\n          reason: 'Identify companies needing PR help',\n          topics: ['funding rounds', 'leadership changes', 'crises', 'expansions'],\n          priority: 'critical',\n          prContext: 'business_development',\n          prMetrics: {\n            opportunityScore: 95,\n            riskLevel: 10,\n            engagementPotential: 100,\n            timelineCriticality: 'immediate'\n          }\n        },\n        {\n          id: `competitor-agencies-${timestamp}-${stakeholders.length}`,\n          name: 'Competing Agencies',\n          type: 'competitive',\n          reason: 'Track competitor wins and losses',\n          topics: ['new accounts', 'case studies', 'awards', 'client losses'],\n          priority: 'high',\n          prContext: 'competitive_intel',\n          prMetrics: {\n            opportunityScore: 75,\n            riskLevel: 20,\n            engagementPotential: 70,\n            timelineCriticality: 'ongoing'\n          }\n        }\n      );\n    }\n\n    // Add goal-specific stakeholders\n    this.goals.forEach(goal => {\n      const goalStakeholders = this.getStakeholdersForGoal(goal);\n      stakeholders.push(...goalStakeholders);\n    });\n\n    // Add custom stakeholders from user input\n    if (this.companyProfile.customStakeholders) {\n      stakeholders.push(...this.companyProfile.customStakeholders);\n    }\n\n    this.stakeholders = stakeholders;\n    \n    console.log('UnifiedService - Identified', stakeholders.length, 'stakeholders');\n    console.log('UnifiedService - Stakeholder IDs:', stakeholders.map(s => s.id));\n\n    // Generate monitoring topics from stakeholders\n    this.monitoringTopics = this.generateMonitoringTopics(stakeholders);\n\n    return stakeholders;\n  }\n\n  /**\n   * STEP 3: Configure sources for each stakeholder\n   */\n  async configureSources() {\n    if (!this.stakeholders.length) {\n      console.warn('UnifiedService - No stakeholders identified when configuring sources');\n      return this.sources;\n    }\n\n    console.log('UnifiedService - Configuring sources for', this.stakeholders.length, 'stakeholders');\n    const sources = [];\n\n    for (const stakeholder of this.stakeholders) {\n      const stakeholderSources = await this.getSourcesForStakeholder(stakeholder);\n      sources.push({\n        stakeholderId: stakeholder.id,\n        stakeholderName: stakeholder.name,\n        sources: stakeholderSources\n      });\n    }\n\n    this.sources = sources;\n    \n    console.log('UnifiedService - Configured', sources.length, 'source groups');\n\n    // Validate and activate sources\n    await this.validateSources();\n\n    return sources;\n  }\n\n  /**\n   * STEP 4: Start monitoring and collect intelligence\n   */\n  async startMonitoring() {\n    if (!this.sources.length) {\n      throw new Error('No sources configured');\n    }\n\n    const monitoringResults = [];\n\n    // Monitor each source\n    for (const sourceGroup of this.sources) {\n      for (const source of sourceGroup.sources) {\n        if (source.active) {\n          try {\n            const data = await this.monitorSource(source, sourceGroup.stakeholderId);\n            monitoringResults.push(...data);\n          } catch (error) {\n            console.error(`Error monitoring source ${source.name}:`, error);\n          }\n        }\n      }\n    }\n\n    this.monitoringData = monitoringResults;\n\n    // Analyze findings for PR signals\n    await this.analyzeFindings(monitoringResults);\n\n    return monitoringResults;\n  }\n\n  /**\n   * STEP 5: Discover opportunities based on goals and monitoring\n   */\n  async discoverOpportunities() {\n    const opportunities = [];\n\n    // 1. Find narrative vacuums based on expertise\n    const narrativeVacuums = await narrativeVacuumService.discoverOpportunities(\n      this.companyProfile,\n      { limit: 10 }\n    );\n    opportunities.push(...narrativeVacuums.opportunities.map(opp => ({\n      ...opp,\n      source: 'narrative_vacuum',\n      matchedGoals: this.matchOpportunityToGoals(opp)\n    })));\n\n    // 2. Analyze monitoring data for PR opportunities\n    for (const finding of this.monitoringData) {\n      const prAnalysis = prDetectionService.analyzePRSignals(\n        finding.content || '',\n        {\n          isOwnBrand: finding.stakeholder === this.companyProfile.company,\n          isCompetitor: this.companyProfile.competitors.includes(finding.stakeholder),\n          isClient: finding.stakeholderType === 'client'\n        }\n      );\n\n      // Extract opportunities that match goals\n      if (prAnalysis.opportunities.length > 0) {\n        prAnalysis.opportunities.forEach(opp => {\n          const matchedGoals = this.matchOpportunityToGoals(opp);\n          if (matchedGoals.length > 0) {\n            opportunities.push({\n              ...opp,\n              source: 'monitoring',\n              stakeholder: finding.stakeholder,\n              matchedGoals,\n              content: finding.content,\n              discoveredAt: new Date().toISOString()\n            });\n          }\n        });\n      }\n    }\n\n    // 3. Find competitive advantage windows\n    const competitorWeaknesses = await this.findCompetitorWeaknesses();\n    opportunities.push(...competitorWeaknesses);\n\n    // 4. Identify trending topics we can hijack\n    const trendingOpportunities = await this.findTrendingOpportunities();\n    opportunities.push(...trendingOpportunities);\n\n    // Sort by relevance to goals\n    opportunities.sort((a, b) => {\n      const aScore = (a.score || 0) * (a.matchedGoals?.length || 1);\n      const bScore = (b.score || 0) * (b.matchedGoals?.length || 1);\n      return bScore - aScore;\n    });\n\n    this.opportunities = opportunities;\n    return opportunities;\n  }\n\n  /**\n   * Helper: Parse goals from objectives text\n   */\n  parseGoals(objectives) {\n    const goals = [];\n    const objectivesLower = objectives.toLowerCase();\n\n    // Common PR goals\n    const goalPatterns = {\n      'generate_leads': ['new business', 'generate leads', 'win clients', 'grow revenue'],\n      'build_awareness': ['brand awareness', 'visibility', 'recognition', 'known for'],\n      'thought_leadership': ['thought leader', 'expert', 'authority', 'go-to'],\n      'crisis_prevention': ['protect reputation', 'risk management', 'crisis', 'prevent'],\n      'media_coverage': ['media coverage', 'press', 'news', 'publicity'],\n      'launch_product': ['launch', 'introduce', 'announce', 'reveal'],\n      'attract_talent': ['recruit', 'hire', 'talent', 'employees'],\n      'investor_relations': ['funding', 'investors', 'ipo', 'valuation']\n    };\n\n    Object.entries(goalPatterns).forEach(([goal, patterns]) => {\n      if (patterns.some(pattern => objectivesLower.includes(pattern))) {\n        goals.push({\n          id: goal,\n          name: goal.replace('_', ' ').toUpperCase(),\n          active: true\n        });\n      }\n    });\n\n    return goals.length > 0 ? goals : [{ id: 'general_pr', name: 'GENERAL PR', active: true }];\n  }\n\n  /**\n   * Helper: Extract expertise from company data\n   */\n  extractExpertise(data) {\n    const expertise = {};\n    \n    // Extract from objectives and description\n    const text = `${data.objectives} ${data.description || ''}`.toLowerCase();\n    \n    const expertiseKeywords = {\n      'AI': ['artificial intelligence', 'machine learning', 'ai', 'ml', 'neural'],\n      'cloud': ['cloud', 'saas', 'paas', 'iaas', 'aws', 'azure'],\n      'security': ['security', 'cyber', 'privacy', 'protection', 'secure'],\n      'data': ['data', 'analytics', 'insights', 'intelligence', 'metrics'],\n      'mobile': ['mobile', 'ios', 'android', 'app'],\n      'blockchain': ['blockchain', 'crypto', 'web3', 'defi'],\n      'sustainability': ['sustainable', 'green', 'climate', 'esg', 'carbon']\n    };\n\n    Object.entries(expertiseKeywords).forEach(([area, keywords]) => {\n      const matches = keywords.filter(keyword => text.includes(keyword));\n      if (matches.length > 0) {\n        expertise[area] = Math.min(1.0, matches.length * 0.3);\n      }\n    });\n\n    return expertise;\n  }\n\n  /**\n   * Helper: Generate media topics based on expertise\n   */\n  generateMediaTopics() {\n    const topics = [];\n    \n    if (this.companyProfile.expertiseAreas) {\n      Object.keys(this.companyProfile.expertiseAreas).forEach(area => {\n        topics.push(`${area} trends`, `${area} innovation`, `future of ${area}`);\n      });\n    }\n\n    topics.push('industry analysis', 'market insights', 'executive perspective');\n    \n    return topics;\n  }\n\n  /**\n   * Helper: Get stakeholders for specific goal\n   */\n  getStakeholdersForGoal(goal) {\n    const stakeholderMap = {\n      'generate_leads': [\n        {\n          id: `${goal.id}-prospects`,\n          name: 'Lead Generation Targets',\n          type: 'prospect',\n          reason: 'Companies showing buying signals',\n          topics: ['budget allocated', 'vendor search', 'RFP issued'],\n          priority: 'critical',\n          prContext: 'business_development',\n          prMetrics: {\n            opportunityScore: 90,\n            riskLevel: 5,\n            engagementPotential: 95,\n            timelineCriticality: 'immediate'\n          }\n        }\n      ],\n      'build_awareness': [\n        {\n          id: `${goal.id}-influencers`,\n          name: 'Industry Influencers',\n          type: 'influencer',\n          reason: 'Amplify brand message',\n          topics: ['industry commentary', 'trend analysis', 'predictions'],\n          priority: 'high',\n          prContext: 'influencer_relations',\n          prMetrics: {\n            opportunityScore: 75,\n            riskLevel: 10,\n            engagementPotential: 80,\n            timelineCriticality: 'ongoing'\n          }\n        }\n      ],\n      'investor_relations': [\n        {\n          id: `${goal.id}-investors`,\n          name: 'Target Investors',\n          type: 'investor',\n          reason: 'Track investor interests and portfolio moves',\n          topics: ['investment thesis', 'portfolio companies', 'fund announcements'],\n          priority: 'high',\n          prContext: 'investor_relations',\n          prMetrics: {\n            opportunityScore: 85,\n            riskLevel: 15,\n            engagementPotential: 75,\n            timelineCriticality: 'ongoing'\n          }\n        }\n      ]\n    };\n\n    return stakeholderMap[goal.id] || [];\n  }\n\n  /**\n   * Helper: Generate monitoring topics from stakeholders\n   */\n  generateMonitoringTopics(stakeholders) {\n    const topics = new Set();\n\n    stakeholders.forEach(stakeholder => {\n      if (stakeholder.topics) {\n        stakeholder.topics.forEach(topic => topics.add(topic));\n      }\n    });\n\n    // Add company-specific topics\n    topics.add(this.companyProfile.company);\n    this.companyProfile.competitors.forEach(comp => topics.add(comp));\n\n    return Array.from(topics);\n  }\n\n  /**\n   * Helper: Get sources for stakeholder\n   */\n  async getSourcesForStakeholder(stakeholder) {\n    const sources = [];\n\n    // Base sources for all stakeholders\n    sources.push({\n      id: `${stakeholder.id}-google-news`,\n      name: 'Google News',\n      url: `https://news.google.com/search?q=${encodeURIComponent(stakeholder.name)}`,\n      type: 'news',\n      active: true\n    });\n\n    // Type-specific sources\n    if (stakeholder.type === 'media') {\n      sources.push(\n        {\n          id: `${stakeholder.id}-pr-newswire`,\n          name: 'PR Newswire',\n          url: 'https://www.prnewswire.com/rss/news-releases-list.rss',\n          type: 'rss',\n          active: true\n        },\n        {\n          id: `${stakeholder.id}-haro`,\n          name: 'HARO Requests',\n          url: 'https://www.helpareporter.com',\n          type: 'email',\n          active: true\n        }\n      );\n    } else if (stakeholder.type === 'competitive') {\n      sources.push({\n        id: `${stakeholder.id}-competitor-news`,\n        name: 'Competitor News Feed',\n        url: `https://www.google.com/alerts/feeds/${stakeholder.id}`,\n        type: 'rss',\n        active: true\n      });\n    } else if (stakeholder.type === 'prospect') {\n      sources.push({\n        id: `${stakeholder.id}-crunchbase`,\n        name: 'Crunchbase Signals',\n        url: 'https://news.crunchbase.com/feed/',\n        type: 'rss',\n        active: true\n      });\n    }\n\n    // Add social media monitoring\n    sources.push({\n      id: `${stakeholder.id}-twitter`,\n      name: 'Twitter Monitoring',\n      url: `https://twitter.com/search?q=${encodeURIComponent(stakeholder.name)}`,\n      type: 'social',\n      active: true\n    });\n\n    return sources;\n  }\n\n  /**\n   * Helper: Validate sources\n   */\n  async validateSources() {\n    for (const sourceGroup of this.sources) {\n      for (const source of sourceGroup.sources) {\n        try {\n          // In production: Actually validate the URL/feed\n          source.validated = true;\n          source.lastValidated = new Date().toISOString();\n        } catch (error) {\n          source.validated = false;\n          source.error = error.message;\n        }\n      }\n    }\n  }\n\n  /**\n   * Helper: Monitor a single source\n   */\n  async monitorSource(source, stakeholderId) {\n    // In production: Actually fetch from the source\n    // For now, simulate monitoring data\n    const mockFindings = [\n      {\n        id: `finding-${Date.now()}-${Math.random()}`,\n        stakeholder: stakeholderId,\n        source: source.name,\n        content: `Sample finding from ${source.name} about ${stakeholderId}`,\n        timestamp: new Date().toISOString(),\n        relevance: Math.random()\n      }\n    ];\n\n    return mockFindings;\n  }\n\n  /**\n   * Helper: Analyze findings for insights\n   */\n  async analyzeFindings(findings) {\n    for (const finding of findings) {\n      // Add PR analysis\n      finding.prAnalysis = prDetectionService.analyzePRSignals(finding.content);\n      \n      // Add sentiment\n      finding.sentiment = prDetectionService.analyzeSentiment(finding.content);\n      \n      // Check goal relevance\n      finding.goalRelevance = this.checkGoalRelevance(finding);\n    }\n  }\n\n  /**\n   * Helper: Match opportunity to goals\n   */\n  matchOpportunityToGoals(opportunity) {\n    const matchedGoals = [];\n\n    this.goals.forEach(goal => {\n      let matches = false;\n\n      // Match based on opportunity type and goal\n      if (goal.id === 'generate_leads' && opportunity.category === 'business_development') {\n        matches = true;\n      } else if (goal.id === 'build_awareness' && opportunity.category === 'earned_media') {\n        matches = true;\n      } else if (goal.id === 'thought_leadership' && opportunity.category === 'thought_leadership') {\n        matches = true;\n      } else if (goal.id === 'media_coverage' && opportunity.type === 'opportunity') {\n        matches = true;\n      }\n\n      // Check topic relevance\n      const oppText = (opportunity.topic || opportunity.content || '').toLowerCase();\n      if (goal.id === 'generate_leads' && oppText.includes('funding')) {\n        matches = true;\n      }\n\n      if (matches) {\n        matchedGoals.push(goal);\n      }\n    });\n\n    return matchedGoals;\n  }\n\n  /**\n   * Helper: Check if finding is relevant to goals\n   */\n  checkGoalRelevance(finding) {\n    let relevanceScore = 0;\n    const content = (finding.content || '').toLowerCase();\n\n    this.goals.forEach(goal => {\n      if (goal.id === 'generate_leads' && \n          (content.includes('funding') || content.includes('expansion'))) {\n        relevanceScore += 0.3;\n      }\n      if (goal.id === 'media_coverage' && \n          (content.includes('journalist') || content.includes('reporter'))) {\n        relevanceScore += 0.3;\n      }\n    });\n\n    return Math.min(1.0, relevanceScore);\n  }\n\n  /**\n   * Helper: Find competitor weaknesses\n   */\n  async findCompetitorWeaknesses() {\n    const weaknesses = [];\n\n    for (const competitor of this.companyProfile.competitors) {\n      // Check for negative signals\n      const negativeFindings = this.monitoringData.filter(f => \n        f.stakeholder === competitor && \n        f.sentiment?.sentiment === 'negative'\n      );\n\n      if (negativeFindings.length > 0) {\n        weaknesses.push({\n          type: 'competitive_advantage',\n          topic: `${competitor} facing challenges`,\n          score: 75,\n          matchedGoals: this.goals,\n          explanation: `${competitor} is experiencing negative coverage - opportunity to position as alternative`,\n          source: 'competitive_analysis',\n          discoveredAt: new Date().toISOString()\n        });\n      }\n    }\n\n    return weaknesses;\n  }\n\n  /**\n   * Helper: Find trending opportunities\n   */\n  async findTrendingOpportunities() {\n    // In production: Use Google Trends API\n    const trending = [\n      { topic: 'AI regulation', score: 85 },\n      { topic: 'remote work future', score: 70 },\n      { topic: 'sustainability initiatives', score: 75 }\n    ];\n\n    return trending.map(trend => ({\n      type: 'trending',\n      topic: trend.topic,\n      score: trend.score,\n      matchedGoals: this.matchOpportunityToGoals({ topic: trend.topic }),\n      explanation: `Trending topic with high media interest`,\n      source: 'trend_analysis',\n      discoveredAt: new Date().toISOString()\n    }));\n  }\n\n  /**\n   * Get current state of the entire intelligence pipeline\n   */\n  getState() {\n    const state = {\n      companyProfile: this.companyProfile,\n      goals: this.goals,\n      stakeholders: this.stakeholders,\n      sources: this.sources,\n      monitoringData: this.monitoringData,\n      opportunities: this.opportunities,\n      monitoringTopics: this.monitoringTopics,\n      isInitialized: this.isInitialized\n    };\n    \n    console.log('UnifiedService - getState called, returning:', {\n      hasCompanyProfile: !!state.companyProfile,\n      stakeholderCount: state.stakeholders.length,\n      sourceCount: state.sources.length,\n      isInitialized: state.isInitialized\n    });\n    \n    return state;\n  }\n\n  /**\n   * Run the complete intelligence pipeline\n   */\n  async runCompletePipeline(companyData) {\n    console.log('Starting unified intelligence pipeline...');\n    \n    // Step 1: Initialize company\n    await this.initializeCompany(companyData);\n    console.log('✓ Company profile created');\n\n    // Step 2: Identify stakeholders\n    await this.identifyStakeholders();\n    console.log(`✓ ${this.stakeholders.length} stakeholders identified`);\n\n    // Step 3: Configure sources\n    await this.configureSources();\n    console.log(`✓ ${this.sources.length} source groups configured`);\n\n    // Step 4: Start monitoring\n    await this.startMonitoring();\n    console.log(`✓ ${this.monitoringData.length} findings collected`);\n\n    // Step 5: Discover opportunities\n    const opportunities = await this.discoverOpportunities();\n    console.log(`✓ ${opportunities.length} opportunities discovered`);\n\n    return {\n      success: true,\n      summary: {\n        stakeholders: this.stakeholders.length,\n        sources: this.sources.reduce((acc, sg) => acc + sg.sources.length, 0),\n        findings: this.monitoringData.length,\n        opportunities: opportunities.length\n      },\n      opportunities: opportunities.slice(0, 10), // Top 10\n      state: this.getState()\n    };\n  }\n}\n\nexport default new UnifiedIntelligenceService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}