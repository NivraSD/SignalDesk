{"ast":null,"code":"/**\n * Niv Direct Service - Bypasses Edge Functions for reliability\n * Uses direct API calls with client-side processing\n */\n\nimport { supabase } from '../config/supabase';\nclass NivDirectService {\n  constructor() {\n    // Use environment variable or fallback to localStorage for API key\n    this.claudeApiKey = process.env.REACT_APP_CLAUDE_API_KEY || localStorage.getItem('claude_api_key');\n    this.openaiApiKey = process.env.REACT_APP_OPENAI_API_KEY || localStorage.getItem('openai_api_key');\n    this.sessionId = this.generateSessionId();\n  }\n  generateSessionId() {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Call Claude API directly from frontend\n   * Note: In production, use a proxy server to hide API keys\n   */\n  async callClaude(messages, systemPrompt) {\n    if (!this.claudeApiKey) {\n      throw new Error('Claude API key not configured. Please add it in settings.');\n    }\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': this.claudeApiKey,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify({\n        model: 'claude-3-sonnet-20240229',\n        max_tokens: 4000,\n        temperature: 0.7,\n        system: systemPrompt,\n        messages: messages.map(msg => ({\n          role: msg.role === 'user' ? 'user' : 'assistant',\n          content: msg.content\n        }))\n      })\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`Claude API error: ${response.status} - ${error}`);\n    }\n    const data = await response.json();\n    return data.content[0].text;\n  }\n\n  /**\n   * Call OpenAI API as fallback\n   */\n  async callOpenAI(messages, systemPrompt) {\n    if (!this.openaiApiKey) {\n      throw new Error('OpenAI API key not configured');\n    }\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.openaiApiKey}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-4',\n        messages: [{\n          role: 'system',\n          content: systemPrompt\n        }, ...messages],\n        temperature: 0.7,\n        max_tokens: 4000\n      })\n    });\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`OpenAI API error: ${response.status} - ${error}`);\n    }\n    const data = await response.json();\n    return data.choices[0].message.content;\n  }\n\n  /**\n   * Process message with Niv intelligence\n   */\n  async processMessage(message, conversationHistory) {\n    const systemPrompt = `You are Niv, SignalDesk's elite AI PR strategist. Your mission is to transform how organizations approach public relations through strategic insights and tactical excellence.\n    \n    When users request specific PR materials (media lists, press releases, strategic plans, social content, key messaging, FAQs), you should:\n    1. First gather context through 2-3 consultative questions if needed\n    2. Then generate comprehensive, professional-quality content\n    3. Structure your responses clearly with headers and bullet points\n    \n    Be conversational yet professional. You're not just an advisor - you're a strategic partner helping organizations achieve PR excellence.`;\n    const fullHistory = [...conversationHistory, {\n      role: 'user',\n      content: message\n    }];\n    try {\n      // Try Claude first\n      const response = await this.callClaude(fullHistory, systemPrompt);\n\n      // Check if this response should be an artifact\n      const artifact = this.detectArtifact(message, response);\n\n      // Save to database\n      await this.saveConversation(message, response, artifact);\n      return {\n        chatMessage: artifact ? this.getArtifactSummary(artifact) : response,\n        artifact: artifact\n      };\n    } catch (claudeError) {\n      console.warn('Claude API failed, trying OpenAI:', claudeError);\n      try {\n        // Fallback to OpenAI\n        const response = await this.callOpenAI(fullHistory, systemPrompt);\n        const artifact = this.detectArtifact(message, response);\n        await this.saveConversation(message, response, artifact);\n        return {\n          chatMessage: artifact ? this.getArtifactSummary(artifact) : response,\n          artifact: artifact\n        };\n      } catch (openaiError) {\n        console.error('Both APIs failed:', openaiError);\n        throw new Error('Unable to process request. Please check API keys in settings.');\n      }\n    }\n  }\n\n  /**\n   * Detect if response should be an artifact\n   */\n  detectArtifact(userMessage, aiResponse) {\n    const lowerMessage = userMessage.toLowerCase();\n    const contentTypes = {\n      'media-list': ['media list', 'journalist list', 'reporter list'],\n      'press-release': ['press release', 'announcement'],\n      'strategic-plan': ['strategic plan', 'pr strategy', 'campaign'],\n      'social-content': ['social media', 'social posts', 'twitter'],\n      'key-messaging': ['key messages', 'messaging', 'talking points'],\n      'faq-document': ['faq', 'frequently asked questions']\n    };\n    for (const [type, triggers] of Object.entries(contentTypes)) {\n      for (const trigger of triggers) {\n        if (lowerMessage.includes(trigger) && aiResponse.length > 500) {\n          return {\n            id: `artifact_${Date.now()}`,\n            type: type,\n            title: this.generateTitle(type),\n            content: this.parseContent(aiResponse),\n            created: new Date().toISOString()\n          };\n        }\n      }\n    }\n    return null;\n  }\n  generateTitle(type) {\n    const titles = {\n      'media-list': 'Media List - Strategic Outreach',\n      'press-release': 'Press Release',\n      'strategic-plan': 'PR Strategic Plan',\n      'social-content': 'Social Media Content',\n      'key-messaging': 'Key Messaging Framework',\n      'faq-document': 'FAQ Document'\n    };\n    return titles[type] || 'PR Content';\n  }\n  parseContent(text) {\n    // Convert text response to structured content\n    return {\n      raw: text,\n      sections: text.split('\\n\\n').filter(s => s.trim()),\n      formatted: text\n    };\n  }\n  getArtifactSummary(artifact) {\n    const summaries = {\n      'media-list': \"I've created a comprehensive media list for your outreach. You can view and edit it in the right panel.\",\n      'press-release': \"I've drafted a press release for your announcement. It's available in the right panel for review.\",\n      'strategic-plan': \"I've developed a strategic PR plan for your campaign. You can access it in the right panel.\",\n      'social-content': \"I've created social media content for your campaign. The posts are available in the right panel.\",\n      'key-messaging': \"I've developed your key messaging framework. It's ready for review in the right panel.\",\n      'faq-document': \"I've prepared an FAQ document. You can access it in the right panel.\"\n    };\n    return summaries[artifact.type] || \"I've created content for you. It's available in the right panel.\";\n  }\n\n  /**\n   * Save conversation to Supabase\n   */\n  async saveConversation(userMessage, aiResponse, artifact) {\n    try {\n      // Save user message\n      await supabase.from('niv_conversations').insert({\n        session_id: this.sessionId,\n        role: 'user',\n        content: userMessage,\n        artifact_id: null\n      });\n\n      // Save AI response\n      const {\n        data: aiMsg\n      } = await supabase.from('niv_conversations').insert({\n        session_id: this.sessionId,\n        role: 'assistant',\n        content: aiResponse,\n        artifact_id: artifact === null || artifact === void 0 ? void 0 : artifact.id\n      }).select().single();\n\n      // Save artifact if created\n      if (artifact) {\n        await supabase.from('niv_artifacts').insert({\n          id: artifact.id,\n          session_id: this.sessionId,\n          type: artifact.type,\n          title: artifact.title,\n          content: artifact.content,\n          status: 'draft'\n        });\n      }\n      return aiMsg;\n    } catch (error) {\n      console.error('Failed to save to database:', error);\n      // Don't throw - continue working even if DB save fails\n    }\n  }\n\n  /**\n   * Load conversation history\n   */\n  async loadConversationHistory(sessionId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('niv_conversations').select('*').eq('session_id', sessionId || this.sessionId).order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n      return data.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n    } catch (error) {\n      console.error('Failed to load history:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Load artifacts\n   */\n  async loadArtifacts(sessionId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('niv_artifacts').select('*').eq('session_id', sessionId || this.sessionId).order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Failed to load artifacts:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Update artifact\n   */\n  async updateArtifact(artifactId, updates) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('niv_artifacts').update({\n        content: updates.content,\n        title: updates.title,\n        updated_at: new Date().toISOString()\n      }).eq('id', artifactId).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Failed to update artifact:', error);\n      throw error;\n    }\n  }\n}\nexport default new NivDirectService();","map":{"version":3,"names":["supabase","NivDirectService","constructor","claudeApiKey","process","env","REACT_APP_CLAUDE_API_KEY","localStorage","getItem","openaiApiKey","REACT_APP_OPENAI_API_KEY","sessionId","generateSessionId","Date","now","Math","random","toString","substr","callClaude","messages","systemPrompt","Error","response","fetch","method","headers","body","JSON","stringify","model","max_tokens","temperature","system","map","msg","role","content","ok","error","text","status","data","json","callOpenAI","choices","message","processMessage","conversationHistory","fullHistory","artifact","detectArtifact","saveConversation","chatMessage","getArtifactSummary","claudeError","console","warn","openaiError","userMessage","aiResponse","lowerMessage","toLowerCase","contentTypes","type","triggers","Object","entries","trigger","includes","length","id","title","generateTitle","parseContent","created","toISOString","titles","raw","sections","split","filter","s","trim","formatted","summaries","from","insert","session_id","artifact_id","aiMsg","select","single","loadConversationHistory","eq","order","ascending","loadArtifacts","updateArtifact","artifactId","updates","update","updated_at"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/services/nivDirectService.js"],"sourcesContent":["/**\n * Niv Direct Service - Bypasses Edge Functions for reliability\n * Uses direct API calls with client-side processing\n */\n\nimport { supabase } from '../config/supabase';\n\nclass NivDirectService {\n  constructor() {\n    // Use environment variable or fallback to localStorage for API key\n    this.claudeApiKey = process.env.REACT_APP_CLAUDE_API_KEY || localStorage.getItem('claude_api_key');\n    this.openaiApiKey = process.env.REACT_APP_OPENAI_API_KEY || localStorage.getItem('openai_api_key');\n    this.sessionId = this.generateSessionId();\n  }\n\n  generateSessionId() {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Call Claude API directly from frontend\n   * Note: In production, use a proxy server to hide API keys\n   */\n  async callClaude(messages, systemPrompt) {\n    if (!this.claudeApiKey) {\n      throw new Error('Claude API key not configured. Please add it in settings.');\n    }\n\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': this.claudeApiKey,\n        'anthropic-version': '2023-06-01',\n      },\n      body: JSON.stringify({\n        model: 'claude-3-sonnet-20240229',\n        max_tokens: 4000,\n        temperature: 0.7,\n        system: systemPrompt,\n        messages: messages.map(msg => ({\n          role: msg.role === 'user' ? 'user' : 'assistant',\n          content: msg.content\n        }))\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`Claude API error: ${response.status} - ${error}`);\n    }\n\n    const data = await response.json();\n    return data.content[0].text;\n  }\n\n  /**\n   * Call OpenAI API as fallback\n   */\n  async callOpenAI(messages, systemPrompt) {\n    if (!this.openaiApiKey) {\n      throw new Error('OpenAI API key not configured');\n    }\n\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.openaiApiKey}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-4',\n        messages: [\n          { role: 'system', content: systemPrompt },\n          ...messages\n        ],\n        temperature: 0.7,\n        max_tokens: 4000\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`OpenAI API error: ${response.status} - ${error}`);\n    }\n\n    const data = await response.json();\n    return data.choices[0].message.content;\n  }\n\n  /**\n   * Process message with Niv intelligence\n   */\n  async processMessage(message, conversationHistory) {\n    const systemPrompt = `You are Niv, SignalDesk's elite AI PR strategist. Your mission is to transform how organizations approach public relations through strategic insights and tactical excellence.\n    \n    When users request specific PR materials (media lists, press releases, strategic plans, social content, key messaging, FAQs), you should:\n    1. First gather context through 2-3 consultative questions if needed\n    2. Then generate comprehensive, professional-quality content\n    3. Structure your responses clearly with headers and bullet points\n    \n    Be conversational yet professional. You're not just an advisor - you're a strategic partner helping organizations achieve PR excellence.`;\n\n    const fullHistory = [...conversationHistory, { role: 'user', content: message }];\n    \n    try {\n      // Try Claude first\n      const response = await this.callClaude(fullHistory, systemPrompt);\n      \n      // Check if this response should be an artifact\n      const artifact = this.detectArtifact(message, response);\n      \n      // Save to database\n      await this.saveConversation(message, response, artifact);\n      \n      return {\n        chatMessage: artifact ? this.getArtifactSummary(artifact) : response,\n        artifact: artifact\n      };\n    } catch (claudeError) {\n      console.warn('Claude API failed, trying OpenAI:', claudeError);\n      \n      try {\n        // Fallback to OpenAI\n        const response = await this.callOpenAI(fullHistory, systemPrompt);\n        const artifact = this.detectArtifact(message, response);\n        \n        await this.saveConversation(message, response, artifact);\n        \n        return {\n          chatMessage: artifact ? this.getArtifactSummary(artifact) : response,\n          artifact: artifact\n        };\n      } catch (openaiError) {\n        console.error('Both APIs failed:', openaiError);\n        throw new Error('Unable to process request. Please check API keys in settings.');\n      }\n    }\n  }\n\n  /**\n   * Detect if response should be an artifact\n   */\n  detectArtifact(userMessage, aiResponse) {\n    const lowerMessage = userMessage.toLowerCase();\n    const contentTypes = {\n      'media-list': ['media list', 'journalist list', 'reporter list'],\n      'press-release': ['press release', 'announcement'],\n      'strategic-plan': ['strategic plan', 'pr strategy', 'campaign'],\n      'social-content': ['social media', 'social posts', 'twitter'],\n      'key-messaging': ['key messages', 'messaging', 'talking points'],\n      'faq-document': ['faq', 'frequently asked questions']\n    };\n\n    for (const [type, triggers] of Object.entries(contentTypes)) {\n      for (const trigger of triggers) {\n        if (lowerMessage.includes(trigger) && aiResponse.length > 500) {\n          return {\n            id: `artifact_${Date.now()}`,\n            type: type,\n            title: this.generateTitle(type),\n            content: this.parseContent(aiResponse),\n            created: new Date().toISOString()\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  generateTitle(type) {\n    const titles = {\n      'media-list': 'Media List - Strategic Outreach',\n      'press-release': 'Press Release',\n      'strategic-plan': 'PR Strategic Plan',\n      'social-content': 'Social Media Content',\n      'key-messaging': 'Key Messaging Framework',\n      'faq-document': 'FAQ Document'\n    };\n    return titles[type] || 'PR Content';\n  }\n\n  parseContent(text) {\n    // Convert text response to structured content\n    return {\n      raw: text,\n      sections: text.split('\\n\\n').filter(s => s.trim()),\n      formatted: text\n    };\n  }\n\n  getArtifactSummary(artifact) {\n    const summaries = {\n      'media-list': \"I've created a comprehensive media list for your outreach. You can view and edit it in the right panel.\",\n      'press-release': \"I've drafted a press release for your announcement. It's available in the right panel for review.\",\n      'strategic-plan': \"I've developed a strategic PR plan for your campaign. You can access it in the right panel.\",\n      'social-content': \"I've created social media content for your campaign. The posts are available in the right panel.\",\n      'key-messaging': \"I've developed your key messaging framework. It's ready for review in the right panel.\",\n      'faq-document': \"I've prepared an FAQ document. You can access it in the right panel.\"\n    };\n    return summaries[artifact.type] || \"I've created content for you. It's available in the right panel.\";\n  }\n\n  /**\n   * Save conversation to Supabase\n   */\n  async saveConversation(userMessage, aiResponse, artifact) {\n    try {\n      // Save user message\n      await supabase.from('niv_conversations').insert({\n        session_id: this.sessionId,\n        role: 'user',\n        content: userMessage,\n        artifact_id: null\n      });\n\n      // Save AI response\n      const { data: aiMsg } = await supabase.from('niv_conversations').insert({\n        session_id: this.sessionId,\n        role: 'assistant',\n        content: aiResponse,\n        artifact_id: artifact?.id\n      }).select().single();\n\n      // Save artifact if created\n      if (artifact) {\n        await supabase.from('niv_artifacts').insert({\n          id: artifact.id,\n          session_id: this.sessionId,\n          type: artifact.type,\n          title: artifact.title,\n          content: artifact.content,\n          status: 'draft'\n        });\n      }\n\n      return aiMsg;\n    } catch (error) {\n      console.error('Failed to save to database:', error);\n      // Don't throw - continue working even if DB save fails\n    }\n  }\n\n  /**\n   * Load conversation history\n   */\n  async loadConversationHistory(sessionId) {\n    try {\n      const { data, error } = await supabase\n        .from('niv_conversations')\n        .select('*')\n        .eq('session_id', sessionId || this.sessionId)\n        .order('created_at', { ascending: true });\n\n      if (error) throw error;\n      \n      return data.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n    } catch (error) {\n      console.error('Failed to load history:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Load artifacts\n   */\n  async loadArtifacts(sessionId) {\n    try {\n      const { data, error } = await supabase\n        .from('niv_artifacts')\n        .select('*')\n        .eq('session_id', sessionId || this.sessionId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Failed to load artifacts:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Update artifact\n   */\n  async updateArtifact(artifactId, updates) {\n    try {\n      const { data, error } = await supabase\n        .from('niv_artifacts')\n        .update({\n          content: updates.content,\n          title: updates.title,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', artifactId)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Failed to update artifact:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new NivDirectService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}