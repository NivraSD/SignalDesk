{"ast":null,"code":"import axios from 'axios';\nclass PRDetectionService {\n  constructor() {\n    this.opportunityPatterns = {\n      funding: ['raised', 'funding', 'series a', 'series b', 'investment', 'venture capital', 'seed round', 'valuation', 'capital raise', 'investors back'],\n      leadership: ['new ceo', 'new cmo', 'new cco', 'chief marketing', 'chief communications', 'leadership change', 'executive appointment', 'hired', 'joins as'],\n      expansion: ['expanding to', 'new market', 'international expansion', 'opening office', 'launches in', 'enters market', 'global expansion'],\n      product: ['product launch', 'new product', 'announcing', 'unveils', 'introduces', 'releasing', 'beta launch', 'early access'],\n      crisis: ['scandal', 'controversy', 'backlash', 'criticism', 'under fire', 'faces scrutiny', 'investigation', 'lawsuit', 'data breach'],\n      awards: ['award', 'recognition', 'honored', 'named to', 'wins', 'finalist', 'best of', 'top 100', 'industry leader'],\n      partnership: ['partnership', 'collaboration', 'strategic alliance', 'teams up', 'joint venture', 'partners with', 'agreement with'],\n      ipo: ['ipo', 'going public', 'public offering', 's-1 filing', 'listing', 'stock market debut', 'public markets']\n    };\n    this.riskPatterns = {\n      negative_sentiment: ['boycott', 'protest', 'outrage', 'angry customers', 'dissatisfied', 'complaint', 'terrible', 'worst', 'disappointed', 'furious'],\n      regulatory: ['regulatory', 'compliance', 'violation', 'fine', 'penalty', 'sanctions', 'investigation', 'probe', 'audit', 'subpoena'],\n      competitor_attack: ['competitor claims', 'rival announces', 'loses to', 'market share loss', 'customers switching', 'defecting to', 'better alternative'],\n      internal_issues: ['layoffs', 'restructuring', 'downsizing', 'cuts jobs', 'workforce reduction', 'employee dissatisfaction', 'turnover', 'exodus', 'resignations'],\n      financial: ['losses', 'revenue decline', 'profit warning', 'missed targets', 'bankruptcy', 'debt', 'cash flow', 'liquidity crisis'],\n      reputation: ['reputation damage', 'brand crisis', 'pr disaster', 'public relations nightmare', 'image problem', 'trust issues', 'credibility questioned'],\n      security: ['hack', 'breach', 'vulnerability', 'exposed data', 'security flaw', 'ransomware', 'cyber attack', 'compromised', 'leaked'],\n      social_media: ['viral complaint', 'twitter storm', 'trending negative', 'hashtag protest', 'social media backlash', 'influencer criticism', 'cancel']\n    };\n    this.sentimentKeywords = {\n      positive: ['excellent', 'outstanding', 'impressive', 'innovative', 'breakthrough', 'success', 'achievement', 'milestone', 'record', 'leading'],\n      negative: ['failure', 'disaster', 'crisis', 'problem', 'issue', 'concern', 'worry', 'trouble', 'setback', 'challenge'],\n      neutral: ['announced', 'stated', 'reported', 'disclosed', 'revealed', 'confirmed', 'acknowledged', 'noted', 'mentioned']\n    };\n  }\n\n  /**\n   * Analyze content for PR opportunities\n   */\n  detectOpportunities(content, context = {}) {\n    const opportunities = [];\n    const contentLower = content.toLowerCase();\n\n    // Check each opportunity category\n    Object.entries(this.opportunityPatterns).forEach(([category, patterns]) => {\n      const matches = patterns.filter(pattern => contentLower.includes(pattern));\n      if (matches.length > 0) {\n        const score = this.calculateOpportunityScore(matches, category, context);\n        opportunities.push({\n          type: 'opportunity',\n          category,\n          confidence: score / 100,\n          matches,\n          actionRequired: this.getOpportunityAction(category),\n          timeframe: this.getOpportunityTimeframe(category),\n          priority: score > 80 ? 'high' : score > 60 ? 'medium' : 'low',\n          score\n        });\n      }\n    });\n    return opportunities.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * Analyze content for PR risks\n   */\n  detectRisks(content, context = {}) {\n    const risks = [];\n    const contentLower = content.toLowerCase();\n\n    // Check each risk category\n    Object.entries(this.riskPatterns).forEach(([category, patterns]) => {\n      const matches = patterns.filter(pattern => contentLower.includes(pattern));\n      if (matches.length > 0) {\n        const severity = this.calculateRiskSeverity(matches, category, context);\n        risks.push({\n          type: 'risk',\n          category,\n          severity: severity / 100,\n          matches,\n          mitigation: this.getRiskMitigation(category),\n          responseTime: this.getRiskResponseTime(category),\n          priority: severity > 80 ? 'critical' : severity > 60 ? 'high' : 'medium',\n          severityScore: severity\n        });\n      }\n    });\n    return risks.sort((a, b) => b.severityScore - a.severityScore);\n  }\n\n  /**\n   * Analyze sentiment of content\n   */\n  analyzeSentiment(content) {\n    const contentLower = content.toLowerCase();\n    let positiveCount = 0;\n    let negativeCount = 0;\n    let neutralCount = 0;\n    this.sentimentKeywords.positive.forEach(word => {\n      if (contentLower.includes(word)) positiveCount++;\n    });\n    this.sentimentKeywords.negative.forEach(word => {\n      if (contentLower.includes(word)) negativeCount++;\n    });\n    this.sentimentKeywords.neutral.forEach(word => {\n      if (contentLower.includes(word)) neutralCount++;\n    });\n    const total = positiveCount + negativeCount + neutralCount || 1;\n    return {\n      sentiment: positiveCount > negativeCount ? 'positive' : negativeCount > positiveCount ? 'negative' : 'neutral',\n      scores: {\n        positive: positiveCount / total,\n        negative: negativeCount / total,\n        neutral: neutralCount / total\n      },\n      confidence: Math.max(positiveCount, negativeCount, neutralCount) / total\n    };\n  }\n\n  /**\n   * Calculate opportunity score based on matches and context\n   */\n  calculateOpportunityScore(matches, category, context) {\n    let score = matches.length * 20; // Base score from match count\n\n    // Boost score based on category importance\n    const categoryBoosts = {\n      funding: 30,\n      crisis: 40,\n      // Crisis for competitors is opportunity\n      product: 25,\n      leadership: 20,\n      ipo: 35,\n      expansion: 25,\n      awards: 15,\n      partnership: 20\n    };\n    score += categoryBoosts[category] || 0;\n\n    // Context-based adjustments\n    if (context.isCompetitor) {\n      score = category === 'crisis' ? score + 20 : score - 10;\n    }\n    if (context.isClient) {\n      score += 15;\n    }\n    if (context.isTrending) {\n      score += 10;\n    }\n    return Math.min(100, Math.max(0, score));\n  }\n\n  /**\n   * Calculate risk severity based on matches and context\n   */\n  calculateRiskSeverity(matches, category, context) {\n    let severity = matches.length * 25; // Base severity from match count\n\n    // Severity multipliers by category\n    const categoryMultipliers = {\n      security: 2.0,\n      regulatory: 1.8,\n      reputation: 1.7,\n      financial: 1.6,\n      negative_sentiment: 1.5,\n      social_media: 1.4,\n      internal_issues: 1.3,\n      competitor_attack: 1.2\n    };\n    severity *= categoryMultipliers[category] || 1.0;\n\n    // Context-based adjustments\n    if (context.isOwnBrand) {\n      severity *= 1.5;\n    }\n    if (context.isViral) {\n      severity *= 1.3;\n    }\n    if (context.mediaReach === 'high') {\n      severity *= 1.2;\n    }\n    return Math.min(100, Math.max(0, severity));\n  }\n\n  /**\n   * Get recommended action for opportunity\n   */\n  getOpportunityAction(category) {\n    const actions = {\n      funding: 'Reach out with congratulations and offer PR services for announcement',\n      leadership: 'Send welcome package and schedule introduction meeting',\n      expansion: 'Propose market entry PR strategy and media relations',\n      product: 'Offer launch PR campaign and media outreach services',\n      crisis: 'Monitor competitor situation for client talking points',\n      awards: 'Amplify achievement through press release and media pitching',\n      partnership: 'Develop joint PR strategy and co-marketing opportunities',\n      ipo: 'Propose comprehensive IPO communications strategy'\n    };\n    return actions[category] || 'Evaluate for PR opportunity';\n  }\n\n  /**\n   * Get recommended mitigation for risk\n   */\n  getRiskMitigation(category) {\n    const mitigations = {\n      negative_sentiment: 'Draft holding statement and monitor sentiment escalation',\n      regulatory: 'Prepare crisis communications plan and legal coordination',\n      competitor_attack: 'Develop competitive response strategy and key messages',\n      internal_issues: 'Create internal communications plan and media strategy',\n      financial: 'Prepare investor relations strategy and stakeholder messaging',\n      reputation: 'Activate crisis response team and media monitoring',\n      security: 'Coordinate with security team on disclosure timeline and messaging',\n      social_media: 'Deploy social listening and rapid response team'\n    };\n    return mitigations[category] || 'Assess situation and prepare response';\n  }\n\n  /**\n   * Get response timeframe for opportunity\n   */\n  getOpportunityTimeframe(category) {\n    const timeframes = {\n      funding: '24-48 hours',\n      leadership: '1 week',\n      expansion: '2-4 weeks',\n      product: '1-2 weeks',\n      crisis: 'Immediate',\n      awards: '48-72 hours',\n      partnership: '1 week',\n      ipo: '2-4 weeks'\n    };\n    return timeframes[category] || '1 week';\n  }\n\n  /**\n   * Get required response time for risk\n   */\n  getRiskResponseTime(category) {\n    const responseTimes = {\n      security: '1 hour',\n      regulatory: '2-4 hours',\n      reputation: '2 hours',\n      social_media: '30 minutes',\n      negative_sentiment: '4 hours',\n      financial: '4-6 hours',\n      internal_issues: '24 hours',\n      competitor_attack: '6-12 hours'\n    };\n    return responseTimes[category] || '24 hours';\n  }\n\n  /**\n   * Perform comprehensive PR analysis on content\n   */\n  analyzePRSignals(content, context = {}) {\n    const opportunities = this.detectOpportunities(content, context);\n    const risks = this.detectRisks(content, context);\n    const sentiment = this.analyzeSentiment(content);\n\n    // Calculate overall PR score\n    const opportunityScore = opportunities.reduce((sum, opp) => sum + opp.score, 0) / (opportunities.length || 1);\n    const riskScore = risks.reduce((sum, risk) => sum + risk.severityScore, 0) / (risks.length || 1);\n    const prScore = {\n      overall: opportunityScore * 0.6 + (100 - riskScore) * 0.4,\n      opportunity: opportunityScore,\n      risk: riskScore,\n      balance: opportunityScore - riskScore\n    };\n\n    // Determine recommended action\n    let recommendedAction = 'Monitor';\n    if (prScore.balance > 50) {\n      recommendedAction = 'Pursue Opportunity';\n    } else if (prScore.balance < -30) {\n      recommendedAction = 'Mitigate Risk';\n    } else if (opportunities.length > 0 && risks.length > 0) {\n      recommendedAction = 'Balanced Approach';\n    }\n    return {\n      opportunities,\n      risks,\n      sentiment,\n      prScore,\n      recommendedAction,\n      summary: {\n        totalOpportunities: opportunities.length,\n        totalRisks: risks.length,\n        highPriorityOpportunities: opportunities.filter(o => o.priority === 'high').length,\n        criticalRisks: risks.filter(r => r.priority === 'critical').length,\n        dominantSentiment: sentiment.sentiment,\n        actionableItems: opportunities.length + risks.length\n      }\n    };\n  }\n\n  /**\n   * Monitor multiple content sources for PR signals\n   */\n  async monitorSources(sources, callback) {\n    const results = [];\n    for (const source of sources) {\n      try {\n        // In production, this would fetch real content from the source\n        // For now, we'll simulate with the source description\n        const analysis = this.analyzePRSignals(source.content || source.description || '', {\n          sourceType: source.type,\n          sourceName: source.name,\n          isOwnBrand: source.isOwnBrand || false,\n          isCompetitor: source.isCompetitor || false,\n          isClient: source.isClient || false\n        });\n        results.push({\n          source: source.name,\n          timestamp: new Date().toISOString(),\n          ...analysis\n        });\n        if (callback) {\n          callback(analysis, source);\n        }\n      } catch (error) {\n        console.error(`Error analyzing source ${source.name}:`, error);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Generate PR alert based on detection\n   */\n  generateAlert(detection, source) {\n    const alert = {\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date().toISOString(),\n      source: source.name,\n      type: detection.type,\n      category: detection.category,\n      priority: detection.priority,\n      title: this.generateAlertTitle(detection),\n      description: this.generateAlertDescription(detection),\n      actions: detection.type === 'opportunity' ? [detection.actionRequired] : [detection.mitigation],\n      timeframe: detection.type === 'opportunity' ? detection.timeframe : detection.responseTime,\n      metadata: {\n        matches: detection.matches,\n        score: detection.score || detection.severityScore,\n        confidence: detection.confidence || detection.severity\n      }\n    };\n    return alert;\n  }\n\n  /**\n   * Generate alert title\n   */\n  generateAlertTitle(detection) {\n    var _titles$detection$typ;\n    const titles = {\n      opportunity: {\n        funding: '💰 New Funding Opportunity Detected',\n        leadership: '👔 Leadership Change - Engagement Opportunity',\n        expansion: '🌍 Market Expansion Opportunity',\n        product: '🚀 Product Launch PR Opportunity',\n        crisis: '⚡ Competitor Crisis - Positioning Opportunity',\n        awards: '🏆 Award Win - Amplification Opportunity',\n        partnership: '🤝 Partnership Announcement Opportunity',\n        ipo: '📈 IPO Communications Opportunity'\n      },\n      risk: {\n        negative_sentiment: '😠 Negative Sentiment Rising',\n        regulatory: '⚖️ Regulatory Risk Detected',\n        competitor_attack: '🎯 Competitive Threat Identified',\n        internal_issues: '🏢 Internal Issue Requiring Management',\n        financial: '💸 Financial Risk Alert',\n        reputation: '🛡️ Reputation Risk Detected',\n        security: '🔒 Security Issue - Crisis Response Needed',\n        social_media: '📱 Social Media Crisis Developing'\n      }\n    };\n    return ((_titles$detection$typ = titles[detection.type]) === null || _titles$detection$typ === void 0 ? void 0 : _titles$detection$typ[detection.category]) || `${detection.type === 'opportunity' ? '📍' : '⚠️'} PR ${detection.type} Detected`;\n  }\n\n  /**\n   * Generate alert description\n   */\n  generateAlertDescription(detection) {\n    if (detection.type === 'opportunity') {\n      return `A ${detection.priority} priority PR opportunity has been identified in the ${detection.category} category. ` + `Confidence level: ${Math.round(detection.confidence * 100)}%. ` + `Recommended response timeframe: ${detection.timeframe}.`;\n    } else {\n      return `A ${detection.priority} priority PR risk has been detected in the ${detection.category} category. ` + `Severity level: ${Math.round(detection.severity * 100)}%. ` + `Required response time: ${detection.responseTime}.`;\n    }\n  }\n}\nexport default new PRDetectionService();","map":{"version":3,"names":["axios","PRDetectionService","constructor","opportunityPatterns","funding","leadership","expansion","product","crisis","awards","partnership","ipo","riskPatterns","negative_sentiment","regulatory","competitor_attack","internal_issues","financial","reputation","security","social_media","sentimentKeywords","positive","negative","neutral","detectOpportunities","content","context","opportunities","contentLower","toLowerCase","Object","entries","forEach","category","patterns","matches","filter","pattern","includes","length","score","calculateOpportunityScore","push","type","confidence","actionRequired","getOpportunityAction","timeframe","getOpportunityTimeframe","priority","sort","a","b","detectRisks","risks","severity","calculateRiskSeverity","mitigation","getRiskMitigation","responseTime","getRiskResponseTime","severityScore","analyzeSentiment","positiveCount","negativeCount","neutralCount","word","total","sentiment","scores","Math","max","categoryBoosts","isCompetitor","isClient","isTrending","min","categoryMultipliers","isOwnBrand","isViral","mediaReach","actions","mitigations","timeframes","responseTimes","analyzePRSignals","opportunityScore","reduce","sum","opp","riskScore","risk","prScore","overall","opportunity","balance","recommendedAction","summary","totalOpportunities","totalRisks","highPriorityOpportunities","o","criticalRisks","r","dominantSentiment","actionableItems","monitorSources","sources","callback","results","source","analysis","description","sourceType","sourceName","name","timestamp","Date","toISOString","error","console","generateAlert","detection","alert","id","now","random","toString","substr","title","generateAlertTitle","generateAlertDescription","metadata","_titles$detection$typ","titles","round"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/services/prDetectionService.js"],"sourcesContent":["import axios from 'axios';\n\nclass PRDetectionService {\n  constructor() {\n    this.opportunityPatterns = {\n      funding: [\n        'raised', 'funding', 'series a', 'series b', 'investment', 'venture capital',\n        'seed round', 'valuation', 'capital raise', 'investors back'\n      ],\n      leadership: [\n        'new ceo', 'new cmo', 'new cco', 'chief marketing', 'chief communications',\n        'leadership change', 'executive appointment', 'hired', 'joins as'\n      ],\n      expansion: [\n        'expanding to', 'new market', 'international expansion', 'opening office',\n        'launches in', 'enters market', 'global expansion'\n      ],\n      product: [\n        'product launch', 'new product', 'announcing', 'unveils', 'introduces',\n        'releasing', 'beta launch', 'early access'\n      ],\n      crisis: [\n        'scandal', 'controversy', 'backlash', 'criticism', 'under fire',\n        'faces scrutiny', 'investigation', 'lawsuit', 'data breach'\n      ],\n      awards: [\n        'award', 'recognition', 'honored', 'named to', 'wins', 'finalist',\n        'best of', 'top 100', 'industry leader'\n      ],\n      partnership: [\n        'partnership', 'collaboration', 'strategic alliance', 'teams up',\n        'joint venture', 'partners with', 'agreement with'\n      ],\n      ipo: [\n        'ipo', 'going public', 'public offering', 's-1 filing', 'listing',\n        'stock market debut', 'public markets'\n      ]\n    };\n\n    this.riskPatterns = {\n      negative_sentiment: [\n        'boycott', 'protest', 'outrage', 'angry customers', 'dissatisfied',\n        'complaint', 'terrible', 'worst', 'disappointed', 'furious'\n      ],\n      regulatory: [\n        'regulatory', 'compliance', 'violation', 'fine', 'penalty', 'sanctions',\n        'investigation', 'probe', 'audit', 'subpoena'\n      ],\n      competitor_attack: [\n        'competitor claims', 'rival announces', 'loses to', 'market share loss',\n        'customers switching', 'defecting to', 'better alternative'\n      ],\n      internal_issues: [\n        'layoffs', 'restructuring', 'downsizing', 'cuts jobs', 'workforce reduction',\n        'employee dissatisfaction', 'turnover', 'exodus', 'resignations'\n      ],\n      financial: [\n        'losses', 'revenue decline', 'profit warning', 'missed targets',\n        'bankruptcy', 'debt', 'cash flow', 'liquidity crisis'\n      ],\n      reputation: [\n        'reputation damage', 'brand crisis', 'pr disaster', 'public relations nightmare',\n        'image problem', 'trust issues', 'credibility questioned'\n      ],\n      security: [\n        'hack', 'breach', 'vulnerability', 'exposed data', 'security flaw',\n        'ransomware', 'cyber attack', 'compromised', 'leaked'\n      ],\n      social_media: [\n        'viral complaint', 'twitter storm', 'trending negative', 'hashtag protest',\n        'social media backlash', 'influencer criticism', 'cancel'\n      ]\n    };\n\n    this.sentimentKeywords = {\n      positive: [\n        'excellent', 'outstanding', 'impressive', 'innovative', 'breakthrough',\n        'success', 'achievement', 'milestone', 'record', 'leading'\n      ],\n      negative: [\n        'failure', 'disaster', 'crisis', 'problem', 'issue', 'concern',\n        'worry', 'trouble', 'setback', 'challenge'\n      ],\n      neutral: [\n        'announced', 'stated', 'reported', 'disclosed', 'revealed',\n        'confirmed', 'acknowledged', 'noted', 'mentioned'\n      ]\n    };\n  }\n\n  /**\n   * Analyze content for PR opportunities\n   */\n  detectOpportunities(content, context = {}) {\n    const opportunities = [];\n    const contentLower = content.toLowerCase();\n\n    // Check each opportunity category\n    Object.entries(this.opportunityPatterns).forEach(([category, patterns]) => {\n      const matches = patterns.filter(pattern => contentLower.includes(pattern));\n      \n      if (matches.length > 0) {\n        const score = this.calculateOpportunityScore(matches, category, context);\n        \n        opportunities.push({\n          type: 'opportunity',\n          category,\n          confidence: score / 100,\n          matches,\n          actionRequired: this.getOpportunityAction(category),\n          timeframe: this.getOpportunityTimeframe(category),\n          priority: score > 80 ? 'high' : score > 60 ? 'medium' : 'low',\n          score\n        });\n      }\n    });\n\n    return opportunities.sort((a, b) => b.score - a.score);\n  }\n\n  /**\n   * Analyze content for PR risks\n   */\n  detectRisks(content, context = {}) {\n    const risks = [];\n    const contentLower = content.toLowerCase();\n\n    // Check each risk category\n    Object.entries(this.riskPatterns).forEach(([category, patterns]) => {\n      const matches = patterns.filter(pattern => contentLower.includes(pattern));\n      \n      if (matches.length > 0) {\n        const severity = this.calculateRiskSeverity(matches, category, context);\n        \n        risks.push({\n          type: 'risk',\n          category,\n          severity: severity / 100,\n          matches,\n          mitigation: this.getRiskMitigation(category),\n          responseTime: this.getRiskResponseTime(category),\n          priority: severity > 80 ? 'critical' : severity > 60 ? 'high' : 'medium',\n          severityScore: severity\n        });\n      }\n    });\n\n    return risks.sort((a, b) => b.severityScore - a.severityScore);\n  }\n\n  /**\n   * Analyze sentiment of content\n   */\n  analyzeSentiment(content) {\n    const contentLower = content.toLowerCase();\n    let positiveCount = 0;\n    let negativeCount = 0;\n    let neutralCount = 0;\n\n    this.sentimentKeywords.positive.forEach(word => {\n      if (contentLower.includes(word)) positiveCount++;\n    });\n\n    this.sentimentKeywords.negative.forEach(word => {\n      if (contentLower.includes(word)) negativeCount++;\n    });\n\n    this.sentimentKeywords.neutral.forEach(word => {\n      if (contentLower.includes(word)) neutralCount++;\n    });\n\n    const total = positiveCount + negativeCount + neutralCount || 1;\n    \n    return {\n      sentiment: positiveCount > negativeCount ? 'positive' : \n                 negativeCount > positiveCount ? 'negative' : 'neutral',\n      scores: {\n        positive: positiveCount / total,\n        negative: negativeCount / total,\n        neutral: neutralCount / total\n      },\n      confidence: Math.max(positiveCount, negativeCount, neutralCount) / total\n    };\n  }\n\n  /**\n   * Calculate opportunity score based on matches and context\n   */\n  calculateOpportunityScore(matches, category, context) {\n    let score = matches.length * 20; // Base score from match count\n\n    // Boost score based on category importance\n    const categoryBoosts = {\n      funding: 30,\n      crisis: 40, // Crisis for competitors is opportunity\n      product: 25,\n      leadership: 20,\n      ipo: 35,\n      expansion: 25,\n      awards: 15,\n      partnership: 20\n    };\n\n    score += categoryBoosts[category] || 0;\n\n    // Context-based adjustments\n    if (context.isCompetitor) {\n      score = category === 'crisis' ? score + 20 : score - 10;\n    }\n\n    if (context.isClient) {\n      score += 15;\n    }\n\n    if (context.isTrending) {\n      score += 10;\n    }\n\n    return Math.min(100, Math.max(0, score));\n  }\n\n  /**\n   * Calculate risk severity based on matches and context\n   */\n  calculateRiskSeverity(matches, category, context) {\n    let severity = matches.length * 25; // Base severity from match count\n\n    // Severity multipliers by category\n    const categoryMultipliers = {\n      security: 2.0,\n      regulatory: 1.8,\n      reputation: 1.7,\n      financial: 1.6,\n      negative_sentiment: 1.5,\n      social_media: 1.4,\n      internal_issues: 1.3,\n      competitor_attack: 1.2\n    };\n\n    severity *= categoryMultipliers[category] || 1.0;\n\n    // Context-based adjustments\n    if (context.isOwnBrand) {\n      severity *= 1.5;\n    }\n\n    if (context.isViral) {\n      severity *= 1.3;\n    }\n\n    if (context.mediaReach === 'high') {\n      severity *= 1.2;\n    }\n\n    return Math.min(100, Math.max(0, severity));\n  }\n\n  /**\n   * Get recommended action for opportunity\n   */\n  getOpportunityAction(category) {\n    const actions = {\n      funding: 'Reach out with congratulations and offer PR services for announcement',\n      leadership: 'Send welcome package and schedule introduction meeting',\n      expansion: 'Propose market entry PR strategy and media relations',\n      product: 'Offer launch PR campaign and media outreach services',\n      crisis: 'Monitor competitor situation for client talking points',\n      awards: 'Amplify achievement through press release and media pitching',\n      partnership: 'Develop joint PR strategy and co-marketing opportunities',\n      ipo: 'Propose comprehensive IPO communications strategy'\n    };\n\n    return actions[category] || 'Evaluate for PR opportunity';\n  }\n\n  /**\n   * Get recommended mitigation for risk\n   */\n  getRiskMitigation(category) {\n    const mitigations = {\n      negative_sentiment: 'Draft holding statement and monitor sentiment escalation',\n      regulatory: 'Prepare crisis communications plan and legal coordination',\n      competitor_attack: 'Develop competitive response strategy and key messages',\n      internal_issues: 'Create internal communications plan and media strategy',\n      financial: 'Prepare investor relations strategy and stakeholder messaging',\n      reputation: 'Activate crisis response team and media monitoring',\n      security: 'Coordinate with security team on disclosure timeline and messaging',\n      social_media: 'Deploy social listening and rapid response team'\n    };\n\n    return mitigations[category] || 'Assess situation and prepare response';\n  }\n\n  /**\n   * Get response timeframe for opportunity\n   */\n  getOpportunityTimeframe(category) {\n    const timeframes = {\n      funding: '24-48 hours',\n      leadership: '1 week',\n      expansion: '2-4 weeks',\n      product: '1-2 weeks',\n      crisis: 'Immediate',\n      awards: '48-72 hours',\n      partnership: '1 week',\n      ipo: '2-4 weeks'\n    };\n\n    return timeframes[category] || '1 week';\n  }\n\n  /**\n   * Get required response time for risk\n   */\n  getRiskResponseTime(category) {\n    const responseTimes = {\n      security: '1 hour',\n      regulatory: '2-4 hours',\n      reputation: '2 hours',\n      social_media: '30 minutes',\n      negative_sentiment: '4 hours',\n      financial: '4-6 hours',\n      internal_issues: '24 hours',\n      competitor_attack: '6-12 hours'\n    };\n\n    return responseTimes[category] || '24 hours';\n  }\n\n  /**\n   * Perform comprehensive PR analysis on content\n   */\n  analyzePRSignals(content, context = {}) {\n    const opportunities = this.detectOpportunities(content, context);\n    const risks = this.detectRisks(content, context);\n    const sentiment = this.analyzeSentiment(content);\n\n    // Calculate overall PR score\n    const opportunityScore = opportunities.reduce((sum, opp) => sum + opp.score, 0) / (opportunities.length || 1);\n    const riskScore = risks.reduce((sum, risk) => sum + risk.severityScore, 0) / (risks.length || 1);\n    \n    const prScore = {\n      overall: ((opportunityScore * 0.6) + ((100 - riskScore) * 0.4)),\n      opportunity: opportunityScore,\n      risk: riskScore,\n      balance: opportunityScore - riskScore\n    };\n\n    // Determine recommended action\n    let recommendedAction = 'Monitor';\n    if (prScore.balance > 50) {\n      recommendedAction = 'Pursue Opportunity';\n    } else if (prScore.balance < -30) {\n      recommendedAction = 'Mitigate Risk';\n    } else if (opportunities.length > 0 && risks.length > 0) {\n      recommendedAction = 'Balanced Approach';\n    }\n\n    return {\n      opportunities,\n      risks,\n      sentiment,\n      prScore,\n      recommendedAction,\n      summary: {\n        totalOpportunities: opportunities.length,\n        totalRisks: risks.length,\n        highPriorityOpportunities: opportunities.filter(o => o.priority === 'high').length,\n        criticalRisks: risks.filter(r => r.priority === 'critical').length,\n        dominantSentiment: sentiment.sentiment,\n        actionableItems: opportunities.length + risks.length\n      }\n    };\n  }\n\n  /**\n   * Monitor multiple content sources for PR signals\n   */\n  async monitorSources(sources, callback) {\n    const results = [];\n    \n    for (const source of sources) {\n      try {\n        // In production, this would fetch real content from the source\n        // For now, we'll simulate with the source description\n        const analysis = this.analyzePRSignals(source.content || source.description || '', {\n          sourceType: source.type,\n          sourceName: source.name,\n          isOwnBrand: source.isOwnBrand || false,\n          isCompetitor: source.isCompetitor || false,\n          isClient: source.isClient || false\n        });\n\n        results.push({\n          source: source.name,\n          timestamp: new Date().toISOString(),\n          ...analysis\n        });\n\n        if (callback) {\n          callback(analysis, source);\n        }\n      } catch (error) {\n        console.error(`Error analyzing source ${source.name}:`, error);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Generate PR alert based on detection\n   */\n  generateAlert(detection, source) {\n    const alert = {\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date().toISOString(),\n      source: source.name,\n      type: detection.type,\n      category: detection.category,\n      priority: detection.priority,\n      title: this.generateAlertTitle(detection),\n      description: this.generateAlertDescription(detection),\n      actions: detection.type === 'opportunity' ? \n        [detection.actionRequired] : \n        [detection.mitigation],\n      timeframe: detection.type === 'opportunity' ? \n        detection.timeframe : \n        detection.responseTime,\n      metadata: {\n        matches: detection.matches,\n        score: detection.score || detection.severityScore,\n        confidence: detection.confidence || detection.severity\n      }\n    };\n\n    return alert;\n  }\n\n  /**\n   * Generate alert title\n   */\n  generateAlertTitle(detection) {\n    const titles = {\n      opportunity: {\n        funding: '💰 New Funding Opportunity Detected',\n        leadership: '👔 Leadership Change - Engagement Opportunity',\n        expansion: '🌍 Market Expansion Opportunity',\n        product: '🚀 Product Launch PR Opportunity',\n        crisis: '⚡ Competitor Crisis - Positioning Opportunity',\n        awards: '🏆 Award Win - Amplification Opportunity',\n        partnership: '🤝 Partnership Announcement Opportunity',\n        ipo: '📈 IPO Communications Opportunity'\n      },\n      risk: {\n        negative_sentiment: '😠 Negative Sentiment Rising',\n        regulatory: '⚖️ Regulatory Risk Detected',\n        competitor_attack: '🎯 Competitive Threat Identified',\n        internal_issues: '🏢 Internal Issue Requiring Management',\n        financial: '💸 Financial Risk Alert',\n        reputation: '🛡️ Reputation Risk Detected',\n        security: '🔒 Security Issue - Crisis Response Needed',\n        social_media: '📱 Social Media Crisis Developing'\n      }\n    };\n\n    return titles[detection.type]?.[detection.category] || \n           `${detection.type === 'opportunity' ? '📍' : '⚠️'} PR ${detection.type} Detected`;\n  }\n\n  /**\n   * Generate alert description\n   */\n  generateAlertDescription(detection) {\n    if (detection.type === 'opportunity') {\n      return `A ${detection.priority} priority PR opportunity has been identified in the ${detection.category} category. ` +\n             `Confidence level: ${Math.round(detection.confidence * 100)}%. ` +\n             `Recommended response timeframe: ${detection.timeframe}.`;\n    } else {\n      return `A ${detection.priority} priority PR risk has been detected in the ${detection.category} category. ` +\n             `Severity level: ${Math.round(detection.severity * 100)}%. ` +\n             `Required response time: ${detection.responseTime}.`;\n    }\n  }\n}\n\nexport default new PRDetectionService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}