{"ast":null,"code":"/**\n * API Service for SignalDesk Frontend\n * Handles all communication with the backend intelligence monitoring system\n */\n\nimport FORCE_API_URL from '../config/apiUrl';\n\n// Use the EMERGENCY hardcoded URL\nconsole.log('âœ… API Service initialized with FORCE URL:', FORCE_API_URL);\nclass ApiService {\n  constructor() {\n    this.updateToken();\n    // Store the hardcoded API URL\n    this.apiUrl = FORCE_API_URL;\n    console.log('API Service using URL:', this.apiUrl);\n  }\n  updateToken() {\n    this.token = localStorage.getItem('token');\n    return this.token;\n  }\n\n  /**\n   * Make authenticated API request\n   */\n  async request(endpoint, options = {}) {\n    // Build the full URL\n    const url = `${this.apiUrl}${endpoint}`;\n    console.log('API Request URL:', url);\n\n    // Always get the latest token\n    this.updateToken();\n    const config = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(this.token && {\n          'Authorization': `Bearer ${this.token}`\n        }),\n        ...options.headers\n      }\n    };\n    if (options.body && typeof options.body === 'object') {\n      config.body = JSON.stringify(options.body);\n    }\n    console.log('API Request:', config.method || 'GET', url);\n    console.log('Request body:', config.body);\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        console.error(`API error at ${url}:`, response.status);\n        throw new Error(`API error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      console.error('Failed URL:', url);\n      throw error;\n    }\n  }\n\n  /**\n   * Convenience methods for common HTTP methods\n   */\n  async get(endpoint, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'GET'\n    });\n  }\n  async post(endpoint, body, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'POST',\n      body\n    });\n  }\n  async put(endpoint, body, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'PUT',\n      body\n    });\n  }\n  async delete(endpoint, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'DELETE'\n    });\n  }\n\n  // ============================================\n  // Intelligence Pipeline\n  // ============================================\n\n  /**\n   * Process intelligence request through the full pipeline\n   */\n  async analyzeIntelligence(query, organizationId, targetType = 'mixed') {\n    return this.request('/intelligence/analyze', {\n      method: 'POST',\n      body: {\n        query,\n        organizationId,\n        targetType\n      }\n    });\n  }\n\n  /**\n   * Clarify an ambiguous query\n   */\n  async clarifyQuery(query, answers = null, projectId = null) {\n    return this.request('/intelligence/clarify', {\n      method: 'POST',\n      body: {\n        query,\n        answers,\n        projectId\n      }\n    });\n  }\n\n  /**\n   * Get research project by ID\n   */\n  async getProject(projectId) {\n    return this.request(`/intelligence/projects/${projectId}`);\n  }\n\n  /**\n   * Get all projects for an organization\n   */\n  async getOrganizationProjects(organizationId) {\n    return this.request(`/intelligence/organizations/${organizationId}/projects`);\n  }\n\n  // ============================================\n  // Intelligence Targets\n  // ============================================\n\n  /**\n   * Create a new intelligence target\n   */\n  async createTarget(target) {\n    return this.request('/intelligence/targets', {\n      method: 'POST',\n      body: target\n    });\n  }\n\n  /**\n   * Get intelligence targets for an organization\n   */\n  async getOrganizationTargets(organizationId, filters = {}) {\n    const params = new URLSearchParams(filters).toString();\n    return this.request(`/intelligence/organizations/${organizationId}/targets?${params}`);\n  }\n\n  /**\n   * Update an intelligence target\n   */\n  async updateTarget(targetId, updates) {\n    return this.request(`/intelligence/targets/${targetId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  }\n\n  /**\n   * Delete an intelligence target\n   */\n  async deleteTarget(targetId) {\n    return this.request(`/intelligence/targets/${targetId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // ============================================\n  // Findings\n  // ============================================\n\n  /**\n   * Get intelligence findings\n   */\n  async getFindings(filters = {}) {\n    const params = new URLSearchParams(filters).toString();\n    return this.request(`/intelligence/findings?${params}`);\n  }\n\n  /**\n   * Get single finding\n   */\n  async getFinding(findingId) {\n    return this.request(`/intelligence/findings/${findingId}`);\n  }\n\n  /**\n   * Create a new finding\n   */\n  async createFinding(finding) {\n    return this.request('/intelligence/findings', {\n      method: 'POST',\n      body: finding\n    });\n  }\n\n  // ============================================\n  // Opportunities\n  // ============================================\n\n  /**\n   * Get opportunities for an organization\n   */\n  async getOpportunities(organizationId, filters = {}) {\n    const params = new URLSearchParams(filters).toString();\n    return this.request(`/opportunities/organization/${organizationId}?${params}`);\n  }\n\n  /**\n   * Get single opportunity\n   */\n  async getOpportunity(opportunityId) {\n    return this.request(`/opportunities/${opportunityId}`);\n  }\n\n  /**\n   * Update opportunity status\n   */\n  async updateOpportunityStatus(opportunityId, status) {\n    return this.request(`/opportunities/${opportunityId}/status`, {\n      method: 'PATCH',\n      body: {\n        status\n      }\n    });\n  }\n\n  /**\n   * Auto-identify opportunities\n   */\n  async identifyOpportunities(organizationId) {\n    return this.request('/opportunities/identify', {\n      method: 'POST',\n      body: {\n        organizationId\n      }\n    });\n  }\n\n  // ============================================\n  // Monitoring\n  // ============================================\n\n  /**\n   * Start monitoring for an organization\n   */\n  async startMonitoring(organizationId, targetIds = null) {\n    return this.request('/intelligence/monitor/start', {\n      method: 'POST',\n      body: {\n        organizationId,\n        targetIds\n      }\n    });\n  }\n\n  /**\n   * Stop monitoring\n   */\n  async stopMonitoring(organizationId, targetIds = null) {\n    return this.request('/intelligence/monitor/stop', {\n      method: 'POST',\n      body: {\n        organizationId,\n        targetIds\n      }\n    });\n  }\n\n  /**\n   * Get monitoring status\n   */\n  async getMonitoringStatus(organizationId) {\n    return this.request(`/intelligence/monitor/status/${organizationId}`);\n  }\n\n  /**\n   * Get monitoring metrics\n   */\n  async getMonitoringMetrics(organizationId, days = 7) {\n    return this.request(`/monitoring/metrics/${organizationId}?days=${days}`);\n  }\n\n  /**\n   * Manually trigger monitoring\n   */\n  async triggerMonitoring(organizationId) {\n    return this.request('/intelligence/monitor/trigger', {\n      method: 'POST',\n      body: {\n        organizationId\n      }\n    });\n  }\n\n  /**\n   * Analyze a specific competitor\n   */\n  async analyzeCompetitor(data) {\n    return this.request('/intelligence/analysis/competitor', {\n      method: 'POST',\n      body: data\n    });\n  }\n\n  /**\n   * Analyze a specific topic\n   */\n  async analyzeTopic(data) {\n    return this.request('/intelligence/analysis/topic', {\n      method: 'POST',\n      body: data\n    });\n  }\n\n  /**\n   * Get overview analysis for all targets\n   */\n  async getOverviewAnalysis(organizationId) {\n    return this.request(`/intelligence/analysis/overview/${organizationId}`);\n  }\n\n  /**\n   * Get sources for a specific target\n   */\n  async getTargetSources(targetId) {\n    return this.request(`/intelligence/targets/${targetId}/sources`);\n  }\n\n  /**\n   * Add a source to a target\n   */\n  async addTargetSource(targetId, sourceData) {\n    return this.request(`/intelligence/targets/${targetId}/sources`, {\n      method: 'POST',\n      body: sourceData\n    });\n  }\n\n  /**\n   * Update a source\n   */\n  async updateTargetSource(sourceId, updates) {\n    return this.request(`/intelligence/sources/${sourceId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  }\n\n  /**\n   * Delete a source\n   */\n  async deleteTargetSource(sourceId) {\n    return this.request(`/intelligence/sources/${sourceId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  /**\n   * Discover sources for a target using AI\n   */\n  async discoverSourcesForTarget(targetId) {\n    return this.request(`/intelligence/targets/${targetId}/discover-sources`, {\n      method: 'POST'\n    });\n  }\n\n  /**\n   * Test a source URL\n   */\n  async testSource(sourceData) {\n    return this.request('/intelligence/sources/test', {\n      method: 'POST',\n      body: sourceData\n    });\n  }\n\n  /**\n   * Bulk add sources to a target\n   */\n  async bulkAddTargetSources(targetId, sources) {\n    return this.request(`/intelligence/targets/${targetId}/sources/bulk`, {\n      method: 'POST',\n      body: {\n        sources\n      }\n    });\n  }\n\n  // ============================================\n  // Organizations\n  // ============================================\n\n  /**\n   * Get all organizations\n   */\n  async getOrganizations() {\n    return this.request('/organizations');\n  }\n\n  /**\n   * Get single organization\n   */\n  async getOrganization(organizationId) {\n    return this.request(`/organizations/${organizationId}`);\n  }\n\n  /**\n   * Create organization\n   */\n  async createOrganization(organization) {\n    return this.request('/organizations', {\n      method: 'POST',\n      body: organization\n    });\n  }\n\n  /**\n   * Update organization\n   */\n  async updateOrganization(organizationId, updates) {\n    return this.request(`/organizations/${organizationId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  }\n\n  /**\n   * Delete organization\n   */\n  async deleteOrganization(organizationId) {\n    return this.request(`/organizations/${organizationId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // ============================================\n  // Real-time Updates (WebSocket)\n  // ============================================\n\n  /**\n   * Connect to real-time updates (Mock for now - WebSocket pending)\n   */\n  connectToRealtime(organizationId, callbacks) {\n    // Mock WebSocket connection until real implementation\n    console.log('Mock real-time connection for organization:', organizationId);\n\n    // Simulate connection\n    setTimeout(() => {\n      callbacks.onConnect && callbacks.onConnect();\n    }, 100);\n\n    // Return mock connection object with close method\n    return {\n      close: () => {\n        console.log('Closing mock real-time connection');\n      }\n    };\n  }\n\n  // Intelligence Analysis endpoints for Opportunity Execution\n  async analyzeCompetitor(params) {\n    return this.request('/intelligence/analysis/competitor', {\n      method: 'POST',\n      body: params\n    });\n  }\n  async analyzeTopic(params) {\n    return this.request('/intelligence/analysis/topic', {\n      method: 'POST',\n      body: params\n    });\n  }\n  async getUnifiedIntelligence(organizationId) {\n    return this.request(`/intelligence/analysis/unified/${organizationId}`);\n  }\n  async getTopicMomentum(organizationId) {\n    return this.request(`/intelligence/analysis/topic-momentum/${organizationId}`);\n  }\n  async analyzeOpportunityPosition(data) {\n    return this.request('/opportunity/analyze-position', {\n      method: 'POST',\n      body: data\n    });\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["FORCE_API_URL","console","log","ApiService","constructor","updateToken","apiUrl","token","localStorage","getItem","request","endpoint","options","url","config","headers","body","JSON","stringify","method","response","fetch","ok","error","status","Error","json","get","post","put","delete","analyzeIntelligence","query","organizationId","targetType","clarifyQuery","answers","projectId","getProject","getOrganizationProjects","createTarget","target","getOrganizationTargets","filters","params","URLSearchParams","toString","updateTarget","targetId","updates","deleteTarget","getFindings","getFinding","findingId","createFinding","finding","getOpportunities","getOpportunity","opportunityId","updateOpportunityStatus","identifyOpportunities","startMonitoring","targetIds","stopMonitoring","getMonitoringStatus","getMonitoringMetrics","days","triggerMonitoring","analyzeCompetitor","data","analyzeTopic","getOverviewAnalysis","getTargetSources","addTargetSource","sourceData","updateTargetSource","sourceId","deleteTargetSource","discoverSourcesForTarget","testSource","bulkAddTargetSources","sources","getOrganizations","getOrganization","createOrganization","organization","updateOrganization","deleteOrganization","connectToRealtime","callbacks","setTimeout","onConnect","close","getUnifiedIntelligence","getTopicMomentum","analyzeOpportunityPosition"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/services/apiService.js"],"sourcesContent":["/**\n * API Service for SignalDesk Frontend\n * Handles all communication with the backend intelligence monitoring system\n */\n\nimport FORCE_API_URL from '../config/apiUrl';\n\n// Use the EMERGENCY hardcoded URL\nconsole.log('âœ… API Service initialized with FORCE URL:', FORCE_API_URL);\n\nclass ApiService {\n  constructor() {\n    this.updateToken();\n    // Store the hardcoded API URL\n    this.apiUrl = FORCE_API_URL;\n    console.log('API Service using URL:', this.apiUrl);\n  }\n\n  updateToken() {\n    this.token = localStorage.getItem('token');\n    return this.token;\n  }\n\n  /**\n   * Make authenticated API request\n   */\n  async request(endpoint, options = {}) {\n    // Build the full URL\n    const url = `${this.apiUrl}${endpoint}`;\n    console.log('API Request URL:', url);\n    \n    // Always get the latest token\n    this.updateToken();\n    \n    const config = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(this.token && { 'Authorization': `Bearer ${this.token}` }),\n        ...options.headers\n      }\n    };\n\n    if (options.body && typeof options.body === 'object') {\n      config.body = JSON.stringify(options.body);\n    }\n\n    console.log('API Request:', config.method || 'GET', url);\n    console.log('Request body:', config.body);\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        console.error(`API error at ${url}:`, response.status);\n        throw new Error(`API error: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      console.error('Failed URL:', url);\n      throw error;\n    }\n  }\n\n  /**\n   * Convenience methods for common HTTP methods\n   */\n  async get(endpoint, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'GET'\n    });\n  }\n\n  async post(endpoint, body, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'POST',\n      body\n    });\n  }\n\n  async put(endpoint, body, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'PUT',\n      body\n    });\n  }\n\n  async delete(endpoint, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'DELETE'\n    });\n  }\n\n  // ============================================\n  // Intelligence Pipeline\n  // ============================================\n\n  /**\n   * Process intelligence request through the full pipeline\n   */\n  async analyzeIntelligence(query, organizationId, targetType = 'mixed') {\n    return this.request('/intelligence/analyze', {\n      method: 'POST',\n      body: { query, organizationId, targetType }\n    });\n  }\n\n  /**\n   * Clarify an ambiguous query\n   */\n  async clarifyQuery(query, answers = null, projectId = null) {\n    return this.request('/intelligence/clarify', {\n      method: 'POST',\n      body: { query, answers, projectId }\n    });\n  }\n\n  /**\n   * Get research project by ID\n   */\n  async getProject(projectId) {\n    return this.request(`/intelligence/projects/${projectId}`);\n  }\n\n  /**\n   * Get all projects for an organization\n   */\n  async getOrganizationProjects(organizationId) {\n    return this.request(`/intelligence/organizations/${organizationId}/projects`);\n  }\n\n  // ============================================\n  // Intelligence Targets\n  // ============================================\n\n  /**\n   * Create a new intelligence target\n   */\n  async createTarget(target) {\n    return this.request('/intelligence/targets', {\n      method: 'POST',\n      body: target\n    });\n  }\n\n  /**\n   * Get intelligence targets for an organization\n   */\n  async getOrganizationTargets(organizationId, filters = {}) {\n    const params = new URLSearchParams(filters).toString();\n    return this.request(`/intelligence/organizations/${organizationId}/targets?${params}`);\n  }\n\n  /**\n   * Update an intelligence target\n   */\n  async updateTarget(targetId, updates) {\n    return this.request(`/intelligence/targets/${targetId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  }\n\n  /**\n   * Delete an intelligence target\n   */\n  async deleteTarget(targetId) {\n    return this.request(`/intelligence/targets/${targetId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // ============================================\n  // Findings\n  // ============================================\n\n  /**\n   * Get intelligence findings\n   */\n  async getFindings(filters = {}) {\n    const params = new URLSearchParams(filters).toString();\n    return this.request(`/intelligence/findings?${params}`);\n  }\n\n  /**\n   * Get single finding\n   */\n  async getFinding(findingId) {\n    return this.request(`/intelligence/findings/${findingId}`);\n  }\n\n  /**\n   * Create a new finding\n   */\n  async createFinding(finding) {\n    return this.request('/intelligence/findings', {\n      method: 'POST',\n      body: finding\n    });\n  }\n\n  // ============================================\n  // Opportunities\n  // ============================================\n\n  /**\n   * Get opportunities for an organization\n   */\n  async getOpportunities(organizationId, filters = {}) {\n    const params = new URLSearchParams(filters).toString();\n    return this.request(`/opportunities/organization/${organizationId}?${params}`);\n  }\n\n  /**\n   * Get single opportunity\n   */\n  async getOpportunity(opportunityId) {\n    return this.request(`/opportunities/${opportunityId}`);\n  }\n\n  /**\n   * Update opportunity status\n   */\n  async updateOpportunityStatus(opportunityId, status) {\n    return this.request(`/opportunities/${opportunityId}/status`, {\n      method: 'PATCH',\n      body: { status }\n    });\n  }\n\n  /**\n   * Auto-identify opportunities\n   */\n  async identifyOpportunities(organizationId) {\n    return this.request('/opportunities/identify', {\n      method: 'POST',\n      body: { organizationId }\n    });\n  }\n\n  // ============================================\n  // Monitoring\n  // ============================================\n\n  /**\n   * Start monitoring for an organization\n   */\n  async startMonitoring(organizationId, targetIds = null) {\n    return this.request('/intelligence/monitor/start', {\n      method: 'POST',\n      body: { organizationId, targetIds }\n    });\n  }\n\n  /**\n   * Stop monitoring\n   */\n  async stopMonitoring(organizationId, targetIds = null) {\n    return this.request('/intelligence/monitor/stop', {\n      method: 'POST',\n      body: { organizationId, targetIds }\n    });\n  }\n\n  /**\n   * Get monitoring status\n   */\n  async getMonitoringStatus(organizationId) {\n    return this.request(`/intelligence/monitor/status/${organizationId}`);\n  }\n\n  /**\n   * Get monitoring metrics\n   */\n  async getMonitoringMetrics(organizationId, days = 7) {\n    return this.request(`/monitoring/metrics/${organizationId}?days=${days}`);\n  }\n\n  /**\n   * Manually trigger monitoring\n   */\n  async triggerMonitoring(organizationId) {\n    return this.request('/intelligence/monitor/trigger', {\n      method: 'POST',\n      body: { organizationId }\n    });\n  }\n\n  /**\n   * Analyze a specific competitor\n   */\n  async analyzeCompetitor(data) {\n    return this.request('/intelligence/analysis/competitor', {\n      method: 'POST',\n      body: data\n    });\n  }\n\n  /**\n   * Analyze a specific topic\n   */\n  async analyzeTopic(data) {\n    return this.request('/intelligence/analysis/topic', {\n      method: 'POST',\n      body: data\n    });\n  }\n\n  /**\n   * Get overview analysis for all targets\n   */\n  async getOverviewAnalysis(organizationId) {\n    return this.request(`/intelligence/analysis/overview/${organizationId}`);\n  }\n\n  /**\n   * Get sources for a specific target\n   */\n  async getTargetSources(targetId) {\n    return this.request(`/intelligence/targets/${targetId}/sources`);\n  }\n\n  /**\n   * Add a source to a target\n   */\n  async addTargetSource(targetId, sourceData) {\n    return this.request(`/intelligence/targets/${targetId}/sources`, {\n      method: 'POST',\n      body: sourceData\n    });\n  }\n\n  /**\n   * Update a source\n   */\n  async updateTargetSource(sourceId, updates) {\n    return this.request(`/intelligence/sources/${sourceId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  }\n\n  /**\n   * Delete a source\n   */\n  async deleteTargetSource(sourceId) {\n    return this.request(`/intelligence/sources/${sourceId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  /**\n   * Discover sources for a target using AI\n   */\n  async discoverSourcesForTarget(targetId) {\n    return this.request(`/intelligence/targets/${targetId}/discover-sources`, {\n      method: 'POST'\n    });\n  }\n\n  /**\n   * Test a source URL\n   */\n  async testSource(sourceData) {\n    return this.request('/intelligence/sources/test', {\n      method: 'POST',\n      body: sourceData\n    });\n  }\n\n  /**\n   * Bulk add sources to a target\n   */\n  async bulkAddTargetSources(targetId, sources) {\n    return this.request(`/intelligence/targets/${targetId}/sources/bulk`, {\n      method: 'POST',\n      body: { sources }\n    });\n  }\n\n  // ============================================\n  // Organizations\n  // ============================================\n\n  /**\n   * Get all organizations\n   */\n  async getOrganizations() {\n    return this.request('/organizations');\n  }\n\n  /**\n   * Get single organization\n   */\n  async getOrganization(organizationId) {\n    return this.request(`/organizations/${organizationId}`);\n  }\n\n  /**\n   * Create organization\n   */\n  async createOrganization(organization) {\n    return this.request('/organizations', {\n      method: 'POST',\n      body: organization\n    });\n  }\n\n  /**\n   * Update organization\n   */\n  async updateOrganization(organizationId, updates) {\n    return this.request(`/organizations/${organizationId}`, {\n      method: 'PUT',\n      body: updates\n    });\n  }\n\n  /**\n   * Delete organization\n   */\n  async deleteOrganization(organizationId) {\n    return this.request(`/organizations/${organizationId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // ============================================\n  // Real-time Updates (WebSocket)\n  // ============================================\n\n  /**\n   * Connect to real-time updates (Mock for now - WebSocket pending)\n   */\n  connectToRealtime(organizationId, callbacks) {\n    // Mock WebSocket connection until real implementation\n    console.log('Mock real-time connection for organization:', organizationId);\n    \n    // Simulate connection\n    setTimeout(() => {\n      callbacks.onConnect && callbacks.onConnect();\n    }, 100);\n    \n    // Return mock connection object with close method\n    return {\n      close: () => {\n        console.log('Closing mock real-time connection');\n      }\n    };\n  }\n\n  // Intelligence Analysis endpoints for Opportunity Execution\n  async analyzeCompetitor(params) {\n    return this.request('/intelligence/analysis/competitor', {\n      method: 'POST',\n      body: params\n    });\n  }\n\n  async analyzeTopic(params) {\n    return this.request('/intelligence/analysis/topic', {\n      method: 'POST',\n      body: params\n    });\n  }\n  \n  async getUnifiedIntelligence(organizationId) {\n    return this.request(`/intelligence/analysis/unified/${organizationId}`);\n  }\n\n  async getTopicMomentum(organizationId) {\n    return this.request(`/intelligence/analysis/topic-momentum/${organizationId}`);\n  }\n\n  async analyzeOpportunityPosition(data) {\n    return this.request('/opportunity/analyze-position', {\n      method: 'POST',\n      body: data\n    });\n  }\n}\n\nexport default new ApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}