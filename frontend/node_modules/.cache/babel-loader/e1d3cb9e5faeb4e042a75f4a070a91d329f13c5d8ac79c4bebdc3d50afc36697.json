{"ast":null,"code":"// Central State Manager for Niv System\n// This is the SINGLE SOURCE OF TRUTH for all Niv-generated content\n\nclass NivStateManager {\n  constructor() {\n    // Core state\n    this.chatMessages = [];\n    this.workItems = new Map(); // id -> workItem\n    this.activeWorkspaceId = null;\n\n    // Subscribers for different components\n    this.subscribers = {\n      chat: new Set(),\n      workItems: new Set(),\n      workspace: new Set()\n    };\n\n    // Debug mode\n    this.debug = true;\n  }\n\n  // ============= CHAT MANAGEMENT =============\n  addChatMessage(message) {\n    this.chatMessages.push({\n      id: Date.now(),\n      timestamp: new Date(),\n      ...message\n    });\n    this.log('Chat message added:', message);\n    this.notify('chat', {\n      type: 'message_added',\n      message\n    });\n  }\n  getChatMessages() {\n    return [...this.chatMessages];\n  }\n\n  // ============= WORK ITEM MANAGEMENT =============\n  addWorkItem(workItem) {\n    // Ensure each work item has a unique ID\n    const id = workItem.id || `work_${Date.now()}_${Math.random()}`;\n    const fullWorkItem = {\n      id,\n      timestamp: new Date(),\n      status: 'ready',\n      ...workItem,\n      // Ensure generatedContent is at the right level\n      generatedContent: workItem.generatedContent || workItem.content\n    };\n    this.workItems.set(id, fullWorkItem);\n    this.log('Work item added:', fullWorkItem);\n    this.notify('workItems', {\n      type: 'item_added',\n      item: fullWorkItem\n    });\n    return id;\n  }\n  getWorkItems() {\n    return Array.from(this.workItems.values());\n  }\n  getWorkItem(id) {\n    return this.workItems.get(id);\n  }\n\n  // ============= WORKSPACE MANAGEMENT =============\n  openWorkspace(workItemId) {\n    const workItem = this.workItems.get(workItemId);\n    if (!workItem) {\n      console.error('Work item not found:', workItemId);\n      return false;\n    }\n    this.activeWorkspaceId = workItemId;\n    this.log('Opening workspace for:', workItem);\n    this.notify('workspace', {\n      type: 'workspace_opened',\n      workItem\n    });\n    return true;\n  }\n  closeWorkspace() {\n    this.activeWorkspaceId = null;\n    this.notify('workspace', {\n      type: 'workspace_closed'\n    });\n  }\n  getActiveWorkspace() {\n    if (!this.activeWorkspaceId) return null;\n    return this.workItems.get(this.activeWorkspaceId);\n  }\n\n  // ============= NIV RESPONSE HANDLER =============\n  // This is the KEY method that handles Niv's responses\n  handleNivResponse(response) {\n    this.log('Handling Niv response:', response);\n\n    // 1. Always add the chat message (Niv's conversational response)\n    if (response.response) {\n      this.addChatMessage({\n        type: 'assistant',\n        content: response.response\n      });\n    }\n\n    // 2. Check for work items in various formats (handle different response structures)\n    let workItemsToProcess = [];\n\n    // Check for workItems array\n    if (response.workItems && Array.isArray(response.workItems)) {\n      workItemsToProcess = response.workItems;\n    }\n    // Check for artifacts array (older format)\n    else if (response.artifacts && Array.isArray(response.artifacts)) {\n      workItemsToProcess = response.artifacts;\n    }\n    // Check for workCards array (another format)\n    else if (response.workCards && Array.isArray(response.workCards)) {\n      workItemsToProcess = response.workCards;\n    }\n    // Check if the response itself contains material generation\n    else if (response.type && response.generatedContent) {\n      // Single work item embedded in response\n      workItemsToProcess = [{\n        type: response.type,\n        title: response.title,\n        description: response.description,\n        generatedContent: response.generatedContent\n      }];\n    }\n\n    // Process work items if we found any\n    if (workItemsToProcess.length > 0) {\n      const workItemIds = [];\n      workItemsToProcess.forEach(item => {\n        var _item$data, _item$data2;\n        // Extract content from various possible structures\n        let content = item.generatedContent || item.content || item.data;\n\n        // If content is nested in data.generatedContent\n        if (item.data && item.data.generatedContent) {\n          content = item.data.generatedContent;\n        }\n\n        // Create a properly structured work item\n        const workItem = {\n          type: item.type || 'content-draft',\n          title: item.title || ((_item$data = item.data) === null || _item$data === void 0 ? void 0 : _item$data.title) || this.getTitleForType(item.type),\n          description: item.description || ((_item$data2 = item.data) === null || _item$data2 === void 0 ? void 0 : _item$data2.description) || '',\n          generatedContent: content,\n          metadata: {\n            source: 'niv',\n            generatedAt: new Date(),\n            ...item.metadata\n          }\n        };\n        const id = this.addWorkItem(workItem);\n        workItemIds.push(id);\n      });\n\n      // Notify that Niv created work items\n      this.notify('chat', {\n        type: 'work_items_created',\n        ids: workItemIds,\n        count: workItemIds.length\n      });\n      return {\n        messageAdded: true,\n        workItemsCreated: workItemIds.length\n      };\n    }\n    return {\n      messageAdded: true,\n      workItemsCreated: 0\n    };\n  }\n\n  // ============= SUBSCRIPTION MANAGEMENT =============\n  subscribe(channel, callback) {\n    if (!this.subscribers[channel]) {\n      console.error('Invalid channel:', channel);\n      return null;\n    }\n    this.subscribers[channel].add(callback);\n\n    // Return unsubscribe function\n    return () => {\n      this.subscribers[channel].delete(callback);\n    };\n  }\n  notify(channel, event) {\n    if (!this.subscribers[channel]) return;\n    this.subscribers[channel].forEach(callback => {\n      try {\n        callback(event);\n      } catch (error) {\n        console.error('Subscriber error:', error);\n      }\n    });\n  }\n\n  // ============= UTILITY METHODS =============\n  getTitleForType(type) {\n    const titles = {\n      'media-list': 'Media List',\n      'content-draft': 'Press Release',\n      'strategy-plan': 'Strategic Plan',\n      'key-messaging': 'Key Messaging',\n      'social-content': 'Social Media Content',\n      'faq-document': 'FAQ Document'\n    };\n    return titles[type] || 'Generated Content';\n  }\n  log(...args) {\n    if (this.debug) {\n      console.log('[NivStateManager]', ...args);\n    }\n  }\n\n  // ============= STATE RESET (for testing) =============\n  reset() {\n    this.chatMessages = [];\n    this.workItems.clear();\n    this.activeWorkspaceId = null;\n    this.notify('chat', {\n      type: 'reset'\n    });\n    this.notify('workItems', {\n      type: 'reset'\n    });\n    this.notify('workspace', {\n      type: 'reset'\n    });\n  }\n\n  // ============= STATE EXPORT (for debugging) =============\n  exportState() {\n    return {\n      chatMessages: this.chatMessages,\n      workItems: Array.from(this.workItems.entries()),\n      activeWorkspaceId: this.activeWorkspaceId,\n      timestamp: new Date()\n    };\n  }\n}\n\n// Create singleton instance\nconst nivStateManager = new NivStateManager();\nexport default nivStateManager;","map":{"version":3,"names":["NivStateManager","constructor","chatMessages","workItems","Map","activeWorkspaceId","subscribers","chat","Set","workspace","debug","addChatMessage","message","push","id","Date","now","timestamp","log","notify","type","getChatMessages","addWorkItem","workItem","Math","random","fullWorkItem","status","generatedContent","content","set","item","getWorkItems","Array","from","values","getWorkItem","get","openWorkspace","workItemId","console","error","closeWorkspace","getActiveWorkspace","handleNivResponse","response","workItemsToProcess","isArray","artifacts","workCards","title","description","length","workItemIds","forEach","_item$data","_item$data2","data","getTitleForType","metadata","source","generatedAt","ids","count","messageAdded","workItemsCreated","subscribe","channel","callback","add","delete","event","titles","args","reset","clear","exportState","entries","nivStateManager"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/components/NivFirst/NivStateManager.js"],"sourcesContent":["// Central State Manager for Niv System\n// This is the SINGLE SOURCE OF TRUTH for all Niv-generated content\n\nclass NivStateManager {\n  constructor() {\n    // Core state\n    this.chatMessages = [];\n    this.workItems = new Map(); // id -> workItem\n    this.activeWorkspaceId = null;\n    \n    // Subscribers for different components\n    this.subscribers = {\n      chat: new Set(),\n      workItems: new Set(),\n      workspace: new Set()\n    };\n    \n    // Debug mode\n    this.debug = true;\n  }\n\n  // ============= CHAT MANAGEMENT =============\n  addChatMessage(message) {\n    this.chatMessages.push({\n      id: Date.now(),\n      timestamp: new Date(),\n      ...message\n    });\n    \n    this.log('Chat message added:', message);\n    this.notify('chat', { type: 'message_added', message });\n  }\n\n  getChatMessages() {\n    return [...this.chatMessages];\n  }\n\n  // ============= WORK ITEM MANAGEMENT =============\n  addWorkItem(workItem) {\n    // Ensure each work item has a unique ID\n    const id = workItem.id || `work_${Date.now()}_${Math.random()}`;\n    \n    const fullWorkItem = {\n      id,\n      timestamp: new Date(),\n      status: 'ready',\n      ...workItem,\n      // Ensure generatedContent is at the right level\n      generatedContent: workItem.generatedContent || workItem.content\n    };\n    \n    this.workItems.set(id, fullWorkItem);\n    \n    this.log('Work item added:', fullWorkItem);\n    this.notify('workItems', { type: 'item_added', item: fullWorkItem });\n    \n    return id;\n  }\n\n  getWorkItems() {\n    return Array.from(this.workItems.values());\n  }\n\n  getWorkItem(id) {\n    return this.workItems.get(id);\n  }\n\n  // ============= WORKSPACE MANAGEMENT =============\n  openWorkspace(workItemId) {\n    const workItem = this.workItems.get(workItemId);\n    \n    if (!workItem) {\n      console.error('Work item not found:', workItemId);\n      return false;\n    }\n    \n    this.activeWorkspaceId = workItemId;\n    \n    this.log('Opening workspace for:', workItem);\n    this.notify('workspace', { \n      type: 'workspace_opened', \n      workItem \n    });\n    \n    return true;\n  }\n\n  closeWorkspace() {\n    this.activeWorkspaceId = null;\n    this.notify('workspace', { type: 'workspace_closed' });\n  }\n\n  getActiveWorkspace() {\n    if (!this.activeWorkspaceId) return null;\n    return this.workItems.get(this.activeWorkspaceId);\n  }\n\n  // ============= NIV RESPONSE HANDLER =============\n  // This is the KEY method that handles Niv's responses\n  handleNivResponse(response) {\n    this.log('Handling Niv response:', response);\n    \n    // 1. Always add the chat message (Niv's conversational response)\n    if (response.response) {\n      this.addChatMessage({\n        type: 'assistant',\n        content: response.response\n      });\n    }\n    \n    // 2. Check for work items in various formats (handle different response structures)\n    let workItemsToProcess = [];\n    \n    // Check for workItems array\n    if (response.workItems && Array.isArray(response.workItems)) {\n      workItemsToProcess = response.workItems;\n    }\n    // Check for artifacts array (older format)\n    else if (response.artifacts && Array.isArray(response.artifacts)) {\n      workItemsToProcess = response.artifacts;\n    }\n    // Check for workCards array (another format)\n    else if (response.workCards && Array.isArray(response.workCards)) {\n      workItemsToProcess = response.workCards;\n    }\n    // Check if the response itself contains material generation\n    else if (response.type && response.generatedContent) {\n      // Single work item embedded in response\n      workItemsToProcess = [{\n        type: response.type,\n        title: response.title,\n        description: response.description,\n        generatedContent: response.generatedContent\n      }];\n    }\n    \n    // Process work items if we found any\n    if (workItemsToProcess.length > 0) {\n      const workItemIds = [];\n      \n      workItemsToProcess.forEach(item => {\n        // Extract content from various possible structures\n        let content = item.generatedContent || item.content || item.data;\n        \n        // If content is nested in data.generatedContent\n        if (item.data && item.data.generatedContent) {\n          content = item.data.generatedContent;\n        }\n        \n        // Create a properly structured work item\n        const workItem = {\n          type: item.type || 'content-draft',\n          title: item.title || item.data?.title || this.getTitleForType(item.type),\n          description: item.description || item.data?.description || '',\n          generatedContent: content,\n          metadata: {\n            source: 'niv',\n            generatedAt: new Date(),\n            ...item.metadata\n          }\n        };\n        \n        const id = this.addWorkItem(workItem);\n        workItemIds.push(id);\n      });\n      \n      // Notify that Niv created work items\n      this.notify('chat', { \n        type: 'work_items_created', \n        ids: workItemIds,\n        count: workItemIds.length \n      });\n      \n      return {\n        messageAdded: true,\n        workItemsCreated: workItemIds.length\n      };\n    }\n    \n    return {\n      messageAdded: true,\n      workItemsCreated: 0\n    };\n  }\n\n  // ============= SUBSCRIPTION MANAGEMENT =============\n  subscribe(channel, callback) {\n    if (!this.subscribers[channel]) {\n      console.error('Invalid channel:', channel);\n      return null;\n    }\n    \n    this.subscribers[channel].add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      this.subscribers[channel].delete(callback);\n    };\n  }\n\n  notify(channel, event) {\n    if (!this.subscribers[channel]) return;\n    \n    this.subscribers[channel].forEach(callback => {\n      try {\n        callback(event);\n      } catch (error) {\n        console.error('Subscriber error:', error);\n      }\n    });\n  }\n\n  // ============= UTILITY METHODS =============\n  getTitleForType(type) {\n    const titles = {\n      'media-list': 'Media List',\n      'content-draft': 'Press Release',\n      'strategy-plan': 'Strategic Plan',\n      'key-messaging': 'Key Messaging',\n      'social-content': 'Social Media Content',\n      'faq-document': 'FAQ Document'\n    };\n    return titles[type] || 'Generated Content';\n  }\n\n  log(...args) {\n    if (this.debug) {\n      console.log('[NivStateManager]', ...args);\n    }\n  }\n\n  // ============= STATE RESET (for testing) =============\n  reset() {\n    this.chatMessages = [];\n    this.workItems.clear();\n    this.activeWorkspaceId = null;\n    this.notify('chat', { type: 'reset' });\n    this.notify('workItems', { type: 'reset' });\n    this.notify('workspace', { type: 'reset' });\n  }\n\n  // ============= STATE EXPORT (for debugging) =============\n  exportState() {\n    return {\n      chatMessages: this.chatMessages,\n      workItems: Array.from(this.workItems.entries()),\n      activeWorkspaceId: this.activeWorkspaceId,\n      timestamp: new Date()\n    };\n  }\n}\n\n// Create singleton instance\nconst nivStateManager = new NivStateManager();\n\nexport default nivStateManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}