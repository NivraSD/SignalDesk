{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useMemoryVault.js\nimport { useState, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useProject } from \"../contexts/ProjectContext\";\nimport API_BASE_URL from '../config/api';\n\n/**\n * Custom hook for saving content to MemoryVault\n * Provides auto-save functionality for any feature component\n */\nexport const useMemoryVault = () => {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const {\n    activeProject\n  } = useProject(); // Changed from selectedProject to activeProject\n  const [saveStatus, setSaveStatus] = useState(null); // 'saving', 'saved', 'error'\n  const [lastSavedItem, setLastSavedItem] = useState(null);\n  const [isSaving, setIsSaving] = useState(false);\n\n  /**\n   * Determine which MemoryVault folder based on content type\n   * Updated to match the 5 default folders created per project\n   */\n  const determineFolderType = (contentType, folderType) => {\n    // If folderType is explicitly provided, use it\n    if (folderType) {\n      return folderType;\n    }\n\n    // Map content type to folder type - MATCHING MEMORYVAULT STRUCTURE\n    const folderMap = {\n      // Content folder (PR Materials)\n      \"press-release\": \"content\",\n      announcement: \"content\",\n      news: \"content\",\n      \"blog-post\": \"content\",\n      \"social-media\": \"content\",\n      \"email-template\": \"content\",\n      content: \"content\",\n      // Campaign Intelligence folder\n      \"campaign-brief\": \"campaign-intelligence\",\n      \"campaign-plan\": \"campaign-intelligence\",\n      \"competitor-analysis\": \"campaign-intelligence\",\n      \"campaign-strategy\": \"campaign-intelligence\",\n      // Media Lists folder\n      \"media-list\": \"media-lists\",\n      \"media-contact\": \"media-lists\",\n      \"journalist-list\": \"media-lists\",\n      // Crisis Management folder\n      \"crisis-plan\": \"crisis-management\",\n      \"crisis-communication\": \"crisis-management\",\n      \"crisis-report\": \"crisis-management\",\n      \"crisis-response\": \"crisis-management\",\n      // Research folder\n      analytics: \"research\",\n      report: \"research\",\n      \"sentiment-analysis\": \"research\",\n      \"performance-report\": \"research\",\n      \"market-analysis\": \"research\",\n      research: \"research\",\n      // Default\n      default: \"content\"\n    };\n    return folderMap[contentType] || folderMap.default;\n  };\n\n  /**\n   * Save content to MemoryVault\n   * @param {Object} params - Save parameters\n   * @param {string} params.content - The content to save\n   * @param {string} params.title - Title of the content\n   * @param {string} params.type - Type of content (e.g., 'press-release', 'blog-post')\n   * @param {string} params.folder_type - Explicit folder type (optional)\n   * @param {string} params.preview - Custom preview text (optional)\n   * @param {Array} params.tags - Tags for the content\n   * @param {Object} params.metadata - Additional metadata\n   * @param {string} params.source - Source feature (e.g., 'content-generator', 'ai-assistant')\n   * @returns {Promise<Object>} The saved item or null if error\n   */\n  const saveToMemoryVault = useCallback(async ({\n    content,\n    title,\n    type = \"general\",\n    folder_type,\n    preview,\n    tags = [],\n    metadata = {},\n    source = \"unknown\"\n  }) => {\n    console.log(\"=== useMemoryVault Hook Debug ===\");\n    console.log(\"1. saveToMemoryVault called\");\n    console.log(\"2. projectId from params:\", projectId);\n    console.log(\"3. activeProject:\", activeProject);\n    console.log(\"4. Content type:\", typeof content);\n    console.log(\"5. Content length:\", content === null || content === void 0 ? void 0 : content.length);\n    console.log(\"6. Title:\", title);\n    console.log(\"7. Type:\", type);\n    console.log(\"8. Folder type:\", folder_type);\n\n    // Use the projectId from params or from activeProject\n    const currentProjectId = projectId || (activeProject === null || activeProject === void 0 ? void 0 : activeProject.id);\n    console.log(\"9. Current project ID:\", currentProjectId);\n    if (!currentProjectId || !content) {\n      console.error(\"Missing required data for MemoryVault save\", {\n        projectId: currentProjectId,\n        hasContent: !!content,\n        activeProject\n      });\n      setSaveStatus(\"error\");\n      setIsSaving(false);\n      return {\n        success: false,\n        error: \"Missing project or content\"\n      };\n    }\n    setSaveStatus(\"saving\");\n    setIsSaving(true);\n    try {\n      // Auto-generate tags if none provided\n      const autoTags = [type, source, new Date().getFullYear().toString()];\n\n      // Add project-specific tags if available\n      if (activeProject) {\n        if (activeProject.industry) autoTags.push(activeProject.industry);\n        if (activeProject.campaign) autoTags.push(activeProject.campaign);\n      }\n      const finalTags = [...new Set([...tags, ...autoTags])].filter(Boolean);\n\n      // Determine folder type\n      const folderType = determineFolderType(type, folder_type);\n\n      // Create preview\n      let finalPreview = preview; // Use the provided preview parameter if available\n\n      if (!finalPreview) {\n        // Only generate preview if none was provided\n        if (typeof content === \"string\") {\n          finalPreview = content.length > 200 ? content.substring(0, 200) + \"...\" : content;\n        } else {\n          finalPreview = JSON.stringify(content).substring(0, 200) + \"...\";\n        }\n      }\n      const requestBody = {\n        folder_type: folderType,\n        title: title || `${type.replace(/-/g, \" \")} - ${new Date().toLocaleDateString()}`,\n        content: typeof content === \"string\" ? content : JSON.stringify(content, null, 2),\n        preview: finalPreview,\n        type: type,\n        tags: finalTags,\n        author: metadata.author || \"SignalDesk AI\",\n        status: metadata.status || \"draft\",\n        source: source,\n        metadata: {\n          projectId: currentProjectId,\n          projectName: activeProject === null || activeProject === void 0 ? void 0 : activeProject.name,\n          projectIndustry: activeProject === null || activeProject === void 0 ? void 0 : activeProject.industry,\n          projectCampaign: activeProject === null || activeProject === void 0 ? void 0 : activeProject.campaign,\n          generatedAt: new Date().toISOString(),\n          ...metadata\n        }\n      };\n      console.log(\"10. Request body prepared:\", requestBody);\n      console.log(\"11. Making API call to:\", `${API_BASE_URL}/projects/${currentProjectId}/memoryvault`);\n      const response = await fetch(`${API_BASE_URL}/projects/${currentProjectId}/memoryvault`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify(requestBody)\n      });\n      console.log(\"12. Response status:\", response.status);\n      console.log(\"13. Response ok?\", response.ok);\n      const data = await response.json();\n      console.log(\"14. Response data:\", data);\n      if (response.ok && data.success) {\n        setSaveStatus(\"saved\");\n        setLastSavedItem(data.item);\n        setIsSaving(false);\n\n        // Auto-clear success status after 3 seconds\n        setTimeout(() => {\n          setSaveStatus(null);\n        }, 3000);\n        return {\n          success: true,\n          item: data.item\n        };\n      } else {\n        throw new Error(data.message || \"Failed to save to MemoryVault\");\n      }\n    } catch (error) {\n      console.error(\"Error saving to MemoryVault:\", error);\n      setSaveStatus(\"error\");\n      setIsSaving(false);\n\n      // Auto-clear error status after 5 seconds\n      setTimeout(() => {\n        setSaveStatus(null);\n      }, 5000);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }, [projectId, activeProject]);\n\n  /**\n   * Quick save function with minimal parameters\n   */\n  const quickSave = useCallback(async (content, title, type = \"general\") => {\n    return saveToMemoryVault({\n      content,\n      title,\n      type\n    });\n  }, [saveToMemoryVault]);\n\n  /**\n   * Clear save status manually\n   */\n  const clearStatus = useCallback(() => {\n    setSaveStatus(null);\n  }, []);\n  return {\n    saveToMemoryVault,\n    quickSave,\n    saveStatus,\n    lastSavedItem,\n    clearStatus,\n    isProjectReady: !!(projectId || activeProject !== null && activeProject !== void 0 && activeProject.id),\n    isSaving\n  };\n};\n\n// Export status types for consistency\n_s(useMemoryVault, \"JfcGfrhqx1gUplnYW9LYoRJHDI4=\", false, function () {\n  return [useParams, useProject];\n});\nexport const SAVE_STATUS = {\n  SAVING: \"saving\",\n  SAVED: \"saved\",\n  ERROR: \"error\"\n};","map":{"version":3,"names":["useState","useCallback","useParams","useProject","API_BASE_URL","useMemoryVault","_s","projectId","activeProject","saveStatus","setSaveStatus","lastSavedItem","setLastSavedItem","isSaving","setIsSaving","determineFolderType","contentType","folderType","folderMap","announcement","news","content","analytics","report","research","default","saveToMemoryVault","title","type","folder_type","preview","tags","metadata","source","console","log","length","currentProjectId","id","error","hasContent","success","autoTags","Date","getFullYear","toString","industry","push","campaign","finalTags","Set","filter","Boolean","finalPreview","substring","JSON","stringify","requestBody","replace","toLocaleDateString","author","status","projectName","name","projectIndustry","projectCampaign","generatedAt","toISOString","response","fetch","method","headers","Authorization","localStorage","getItem","body","ok","data","json","item","setTimeout","Error","message","quickSave","clearStatus","isProjectReady","SAVE_STATUS","SAVING","SAVED","ERROR"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/hooks/useMemoryVault.js"],"sourcesContent":["// hooks/useMemoryVault.js\nimport { useState, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useProject } from \"../contexts/ProjectContext\";\nimport API_BASE_URL from '../config/api';\n\n/**\n * Custom hook for saving content to MemoryVault\n * Provides auto-save functionality for any feature component\n */\nexport const useMemoryVault = () => {\n  const { projectId } = useParams();\n  const { activeProject } = useProject(); // Changed from selectedProject to activeProject\n  const [saveStatus, setSaveStatus] = useState(null); // 'saving', 'saved', 'error'\n  const [lastSavedItem, setLastSavedItem] = useState(null);\n  const [isSaving, setIsSaving] = useState(false);\n\n  /**\n   * Determine which MemoryVault folder based on content type\n   * Updated to match the 5 default folders created per project\n   */\n  const determineFolderType = (contentType, folderType) => {\n    // If folderType is explicitly provided, use it\n    if (folderType) {\n      return folderType;\n    }\n\n    // Map content type to folder type - MATCHING MEMORYVAULT STRUCTURE\n    const folderMap = {\n      // Content folder (PR Materials)\n      \"press-release\": \"content\",\n      announcement: \"content\",\n      news: \"content\",\n      \"blog-post\": \"content\",\n      \"social-media\": \"content\",\n      \"email-template\": \"content\",\n      content: \"content\",\n\n      // Campaign Intelligence folder\n      \"campaign-brief\": \"campaign-intelligence\",\n      \"campaign-plan\": \"campaign-intelligence\",\n      \"competitor-analysis\": \"campaign-intelligence\",\n      \"campaign-strategy\": \"campaign-intelligence\",\n\n      // Media Lists folder\n      \"media-list\": \"media-lists\",\n      \"media-contact\": \"media-lists\",\n      \"journalist-list\": \"media-lists\",\n\n      // Crisis Management folder\n      \"crisis-plan\": \"crisis-management\",\n      \"crisis-communication\": \"crisis-management\",\n      \"crisis-report\": \"crisis-management\",\n      \"crisis-response\": \"crisis-management\",\n\n      // Research folder\n      analytics: \"research\",\n      report: \"research\",\n      \"sentiment-analysis\": \"research\",\n      \"performance-report\": \"research\",\n      \"market-analysis\": \"research\",\n      research: \"research\",\n\n      // Default\n      default: \"content\",\n    };\n\n    return folderMap[contentType] || folderMap.default;\n  };\n\n  /**\n   * Save content to MemoryVault\n   * @param {Object} params - Save parameters\n   * @param {string} params.content - The content to save\n   * @param {string} params.title - Title of the content\n   * @param {string} params.type - Type of content (e.g., 'press-release', 'blog-post')\n   * @param {string} params.folder_type - Explicit folder type (optional)\n   * @param {string} params.preview - Custom preview text (optional)\n   * @param {Array} params.tags - Tags for the content\n   * @param {Object} params.metadata - Additional metadata\n   * @param {string} params.source - Source feature (e.g., 'content-generator', 'ai-assistant')\n   * @returns {Promise<Object>} The saved item or null if error\n   */\n  const saveToMemoryVault = useCallback(\n    async ({\n      content,\n      title,\n      type = \"general\",\n      folder_type,\n      preview,\n      tags = [],\n      metadata = {},\n      source = \"unknown\",\n    }) => {\n      console.log(\"=== useMemoryVault Hook Debug ===\");\n      console.log(\"1. saveToMemoryVault called\");\n      console.log(\"2. projectId from params:\", projectId);\n      console.log(\"3. activeProject:\", activeProject);\n      console.log(\"4. Content type:\", typeof content);\n      console.log(\"5. Content length:\", content?.length);\n      console.log(\"6. Title:\", title);\n      console.log(\"7. Type:\", type);\n      console.log(\"8. Folder type:\", folder_type);\n\n      // Use the projectId from params or from activeProject\n      const currentProjectId = projectId || activeProject?.id;\n      console.log(\"9. Current project ID:\", currentProjectId);\n\n      if (!currentProjectId || !content) {\n        console.error(\"Missing required data for MemoryVault save\", {\n          projectId: currentProjectId,\n          hasContent: !!content,\n          activeProject,\n        });\n        setSaveStatus(\"error\");\n        setIsSaving(false);\n        return { success: false, error: \"Missing project or content\" };\n      }\n\n      setSaveStatus(\"saving\");\n      setIsSaving(true);\n\n      try {\n        // Auto-generate tags if none provided\n        const autoTags = [type, source, new Date().getFullYear().toString()];\n\n        // Add project-specific tags if available\n        if (activeProject) {\n          if (activeProject.industry) autoTags.push(activeProject.industry);\n          if (activeProject.campaign) autoTags.push(activeProject.campaign);\n        }\n\n        const finalTags = [...new Set([...tags, ...autoTags])].filter(Boolean);\n\n        // Determine folder type\n        const folderType = determineFolderType(type, folder_type);\n\n        // Create preview\n        let finalPreview = preview; // Use the provided preview parameter if available\n\n        if (!finalPreview) {\n          // Only generate preview if none was provided\n          if (typeof content === \"string\") {\n            finalPreview =\n              content.length > 200\n                ? content.substring(0, 200) + \"...\"\n                : content;\n          } else {\n            finalPreview = JSON.stringify(content).substring(0, 200) + \"...\";\n          }\n        }\n\n        const requestBody = {\n          folder_type: folderType,\n          title:\n            title ||\n            `${type.replace(/-/g, \" \")} - ${new Date().toLocaleDateString()}`,\n          content:\n            typeof content === \"string\"\n              ? content\n              : JSON.stringify(content, null, 2),\n          preview: finalPreview,\n          type: type,\n          tags: finalTags,\n          author: metadata.author || \"SignalDesk AI\",\n          status: metadata.status || \"draft\",\n          source: source,\n          metadata: {\n            projectId: currentProjectId,\n            projectName: activeProject?.name,\n            projectIndustry: activeProject?.industry,\n            projectCampaign: activeProject?.campaign,\n            generatedAt: new Date().toISOString(),\n            ...metadata,\n          },\n        };\n\n        console.log(\"10. Request body prepared:\", requestBody);\n        console.log(\n          \"11. Making API call to:\",\n          `${API_BASE_URL}/projects/${currentProjectId}/memoryvault`\n        );\n\n        const response = await fetch(\n          `${API_BASE_URL}/projects/${currentProjectId}/memoryvault`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            },\n            body: JSON.stringify(requestBody),\n          }\n        );\n\n        console.log(\"12. Response status:\", response.status);\n        console.log(\"13. Response ok?\", response.ok);\n\n        const data = await response.json();\n        console.log(\"14. Response data:\", data);\n\n        if (response.ok && data.success) {\n          setSaveStatus(\"saved\");\n          setLastSavedItem(data.item);\n          setIsSaving(false);\n\n          // Auto-clear success status after 3 seconds\n          setTimeout(() => {\n            setSaveStatus(null);\n          }, 3000);\n\n          return { success: true, item: data.item };\n        } else {\n          throw new Error(data.message || \"Failed to save to MemoryVault\");\n        }\n      } catch (error) {\n        console.error(\"Error saving to MemoryVault:\", error);\n        setSaveStatus(\"error\");\n        setIsSaving(false);\n\n        // Auto-clear error status after 5 seconds\n        setTimeout(() => {\n          setSaveStatus(null);\n        }, 5000);\n\n        return { success: false, error: error.message };\n      }\n    },\n    [projectId, activeProject]\n  );\n\n  /**\n   * Quick save function with minimal parameters\n   */\n  const quickSave = useCallback(\n    async (content, title, type = \"general\") => {\n      return saveToMemoryVault({ content, title, type });\n    },\n    [saveToMemoryVault]\n  );\n\n  /**\n   * Clear save status manually\n   */\n  const clearStatus = useCallback(() => {\n    setSaveStatus(null);\n  }, []);\n\n  return {\n    saveToMemoryVault,\n    quickSave,\n    saveStatus,\n    lastSavedItem,\n    clearStatus,\n    isProjectReady: !!(projectId || activeProject?.id),\n    isSaving,\n  };\n};\n\n// Export status types for consistency\nexport const SAVE_STATUS = {\n  SAVING: \"saving\",\n  SAVED: \"saved\",\n  ERROR: \"error\",\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}