{"ast":null,"code":"// Strategic Planning Service - Supabase Edge Functions\nimport { supabase } from '../config/supabase';\nclass StrategicPlanningService {\n  constructor() {\n    this.functionName = 'strategic-planning';\n  }\n  async generatePlan(objective, context = '', constraints = '', timeline = '') {\n    try {\n      console.log('📋 Generating strategic plan via dedicated Strategic Planning function...');\n\n      // Try Supabase Edge Function first\n      try {\n        const {\n          data,\n          error\n        } = await supabase.functions.invoke(this.functionName, {\n          body: {\n            objective,\n            context,\n            constraints,\n            timeline\n          }\n        });\n        if (data && !error) {\n          console.log('✅ Strategic plan generated successfully via Supabase');\n          return data;\n        }\n      } catch (supabaseError) {\n        console.warn('Supabase function failed, using fallback:', supabaseError);\n      }\n\n      // Fallback: Generate strategic plan locally\n      console.log('📋 Using local fallback for strategic plan generation...');\n      const plan = this.generateFallbackPlan(objective, context, constraints, timeline);\n      console.log('✅ Strategic plan generated successfully via fallback');\n      return {\n        success: true,\n        data: plan\n      };\n    } catch (error) {\n      console.error('Generate plan service error:', error);\n      throw new Error(`Failed to generate strategic plan: ${error.message}`);\n    }\n  }\n  async executeCampaign(planId, pillarIndex, executionType = 'immediate') {\n    try {\n      console.log('🚀 Executing campaign via Strategic Planning function...');\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke(`${this.functionName}/execute-campaign`, {\n        body: {\n          planId,\n          pillarIndex,\n          executionType\n        }\n      });\n      if (error) {\n        console.error('Campaign execution error:', error);\n        throw error;\n      }\n      console.log('✅ Campaign execution initiated');\n      return data;\n    } catch (error) {\n      console.error('Execute campaign service error:', error);\n      throw new Error(`Failed to execute campaign: ${error.message}`);\n    }\n  }\n  async gatherEvidence(topic, sources = ['market', 'competitors', 'trends']) {\n    try {\n      console.log('🔍 Gathering evidence via Strategic Planning function...');\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke(`${this.functionName}/gather-evidence`, {\n        body: {\n          topic,\n          sources\n        }\n      });\n      if (error) {\n        console.error('Evidence gathering error:', error);\n        throw error;\n      }\n      console.log('✅ Evidence gathered successfully');\n      return data;\n    } catch (error) {\n      console.error('Gather evidence service error:', error);\n      throw new Error(`Failed to gather evidence: ${error.message}`);\n    }\n  }\n  async updatePlan(planId, updates) {\n    try {\n      console.log('📝 Updating strategic plan via Supabase Edge Function...');\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke(this.functionName, {\n        method: 'PUT',\n        body: updates\n      });\n      if (error) {\n        console.error('Plan update error:', error);\n        throw error;\n      }\n      console.log('✅ Strategic plan updated');\n      return data;\n    } catch (error) {\n      console.error('Update plan service error:', error);\n      throw new Error(`Failed to update plan: ${error.message}`);\n    }\n  }\n  async getPlanStatus(planId) {\n    try {\n      console.log('📊 Getting plan status via Supabase Edge Function...');\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke(this.functionName, {\n        method: 'GET'\n      });\n      if (error) {\n        console.error('Plan status error:', error);\n        throw error;\n      }\n      console.log('✅ Plan status retrieved');\n      return data;\n    } catch (error) {\n      console.error('Get plan status service error:', error);\n      throw new Error(`Failed to get plan status: ${error.message}`);\n    }\n  }\n\n  // Store and retrieve plans from localStorage (fallback)\n  savePlanToLocalStorage(plan) {\n    try {\n      const plans = this.getPlansFromLocalStorage();\n      plans.push(plan);\n      localStorage.setItem('strategic_plans', JSON.stringify(plans));\n      console.log('✅ Plan saved to localStorage');\n    } catch (error) {\n      console.error('Error saving plan to localStorage:', error);\n    }\n  }\n  getPlansFromLocalStorage() {\n    try {\n      const plans = localStorage.getItem('strategic_plans');\n      return plans ? JSON.parse(plans) : [];\n    } catch (error) {\n      console.error('Error getting plans from localStorage:', error);\n      return [];\n    }\n  }\n  getPlanFromLocalStorage(planId) {\n    try {\n      const plans = this.getPlansFromLocalStorage();\n      return plans.find(plan => plan.id === planId);\n    } catch (error) {\n      console.error('Error getting plan from localStorage:', error);\n      return null;\n    }\n  }\n\n  // Fallback strategic plan generator\n  generateFallbackPlan(objective, context, constraints, timeline) {\n    const plan = {\n      id: `plan-${Date.now()}`,\n      objective,\n      context,\n      constraints,\n      timeline,\n      created_at: new Date().toISOString(),\n      status: 'draft',\n      executive_summary: `Strategic plan to ${objective}. ${context ? 'Context: ' + context : ''} This comprehensive approach will address key objectives through coordinated strategic pillars and measurable outcomes.`,\n      strategic_pillars: [{\n        title: 'Strategic Foundation',\n        description: 'Establish the foundational elements required to achieve the objective',\n        actions: ['Conduct stakeholder analysis', 'Define success criteria', 'Establish baseline metrics', 'Create communication framework'],\n        timeline: timeline || '4-6 weeks',\n        mcp: 'Intelligence MCP'\n      }, {\n        title: 'Content & Messaging',\n        description: 'Develop compelling content and messaging strategy',\n        actions: ['Create core messaging framework', 'Develop content calendar', 'Produce strategic content assets', 'Align messaging across channels'],\n        timeline: timeline || '3-4 weeks',\n        mcp: 'Content Generator'\n      }, {\n        title: 'Media & Outreach',\n        description: 'Execute targeted media and stakeholder outreach',\n        actions: ['Identify key media targets', 'Develop media relations strategy', 'Execute outreach campaigns', 'Monitor media coverage'],\n        timeline: timeline || '6-8 weeks',\n        mcp: 'Media Intelligence'\n      }, {\n        title: 'Monitoring & Optimization',\n        description: 'Track performance and optimize strategy based on results',\n        actions: ['Implement tracking systems', 'Monitor key metrics', 'Analyze performance data', 'Optimize strategy based on insights'],\n        timeline: timeline || 'Ongoing',\n        mcp: 'Analytics MCP'\n      }],\n      implementation_phases: [{\n        phase: 'Planning & Preparation',\n        duration: '2 weeks',\n        tasks: ['Strategic research', 'Stakeholder mapping', 'Resource allocation']\n      }, {\n        phase: 'Content Development',\n        duration: '3 weeks',\n        tasks: ['Content creation', 'Message testing', 'Asset production']\n      }, {\n        phase: 'Launch & Execution',\n        duration: '4 weeks',\n        tasks: ['Campaign launch', 'Media outreach', 'Stakeholder engagement']\n      }, {\n        phase: 'Optimization & Scale',\n        duration: '3 weeks',\n        tasks: ['Performance analysis', 'Strategy refinement', 'Scaling successful tactics']\n      }],\n      success_metrics: ['Media mention volume and sentiment', 'Stakeholder engagement rates', 'Share of voice in target conversations', 'Website traffic and conversion', 'Social media engagement and reach', 'Brand awareness and perception metrics'],\n      risk_mitigation: [{\n        risk: 'Timeline delays due to resource constraints',\n        strategy: 'Build buffer time into critical path activities and maintain flexible resource allocation'\n      }, {\n        risk: 'Negative media coverage or stakeholder reaction',\n        strategy: 'Develop crisis communication protocols and maintain proactive monitoring systems'\n      }, {\n        risk: 'Competitive response or market changes',\n        strategy: 'Implement agile planning processes and maintain competitive intelligence monitoring'\n      }]\n    };\n    return plan;\n  }\n\n  // Generate campaign from strategic plan\n  generateCampaignFromPlan(plan) {\n    if (!plan || !plan.strategic_pillars) {\n      throw new Error('Invalid plan structure');\n    }\n    const campaign = {\n      id: `campaign-${Date.now()}`,\n      planId: plan.id,\n      objective: plan.objective,\n      context: plan.context,\n      timeline: plan.timeline,\n      status: 'draft',\n      pillars: plan.strategic_pillars.map((pillar, index) => ({\n        id: `pillar-${index}`,\n        title: pillar.title,\n        description: pillar.description,\n        actions: pillar.actions || [],\n        timeline: pillar.timeline || '30 days',\n        mcp: pillar.mcp || 'Content Generator',\n        status: 'pending',\n        progress: 0,\n        assignee: pillar.mcp || 'Unassigned',\n        dueDate: pillar.timeline || 'TBD'\n      })),\n      created_at: new Date().toISOString()\n    };\n\n    // Save campaign to localStorage\n    const campaigns = JSON.parse(localStorage.getItem('strategic_campaigns') || '[]');\n    campaigns.push(campaign);\n    localStorage.setItem('strategic_campaigns', JSON.stringify(campaigns));\n    return campaign;\n  }\n}\nexport default new StrategicPlanningService();","map":{"version":3,"names":["supabase","StrategicPlanningService","constructor","functionName","generatePlan","objective","context","constraints","timeline","console","log","data","error","functions","invoke","body","supabaseError","warn","plan","generateFallbackPlan","success","Error","message","executeCampaign","planId","pillarIndex","executionType","gatherEvidence","topic","sources","updatePlan","updates","method","getPlanStatus","savePlanToLocalStorage","plans","getPlansFromLocalStorage","push","localStorage","setItem","JSON","stringify","getItem","parse","getPlanFromLocalStorage","find","id","Date","now","created_at","toISOString","status","executive_summary","strategic_pillars","title","description","actions","mcp","implementation_phases","phase","duration","tasks","success_metrics","risk_mitigation","risk","strategy","generateCampaignFromPlan","campaign","pillars","map","pillar","index","progress","assignee","dueDate","campaigns"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/services/strategicPlanningService.js"],"sourcesContent":["// Strategic Planning Service - Supabase Edge Functions\nimport { supabase } from '../config/supabase';\n\nclass StrategicPlanningService {\n  constructor() {\n    this.functionName = 'strategic-planning';\n  }\n\n  async generatePlan(objective, context = '', constraints = '', timeline = '') {\n    try {\n      console.log('📋 Generating strategic plan via dedicated Strategic Planning function...');\n      \n      // Try Supabase Edge Function first\n      try {\n        const { data, error } = await supabase.functions.invoke(this.functionName, {\n          body: {\n            objective,\n            context,\n            constraints,\n            timeline\n          }\n        });\n\n        if (data && !error) {\n          console.log('✅ Strategic plan generated successfully via Supabase');\n          return data;\n        }\n      } catch (supabaseError) {\n        console.warn('Supabase function failed, using fallback:', supabaseError);\n      }\n\n      // Fallback: Generate strategic plan locally\n      console.log('📋 Using local fallback for strategic plan generation...');\n      const plan = this.generateFallbackPlan(objective, context, constraints, timeline);\n      \n      console.log('✅ Strategic plan generated successfully via fallback');\n      return { success: true, data: plan };\n\n    } catch (error) {\n      console.error('Generate plan service error:', error);\n      throw new Error(`Failed to generate strategic plan: ${error.message}`);\n    }\n  }\n\n  async executeCampaign(planId, pillarIndex, executionType = 'immediate') {\n    try {\n      console.log('🚀 Executing campaign via Strategic Planning function...');\n      \n      const { data, error } = await supabase.functions.invoke(`${this.functionName}/execute-campaign`, {\n        body: {\n          planId,\n          pillarIndex,\n          executionType\n        }\n      });\n\n      if (error) {\n        console.error('Campaign execution error:', error);\n        throw error;\n      }\n\n      console.log('✅ Campaign execution initiated');\n      return data;\n\n    } catch (error) {\n      console.error('Execute campaign service error:', error);\n      throw new Error(`Failed to execute campaign: ${error.message}`);\n    }\n  }\n\n  async gatherEvidence(topic, sources = ['market', 'competitors', 'trends']) {\n    try {\n      console.log('🔍 Gathering evidence via Strategic Planning function...');\n      \n      const { data, error } = await supabase.functions.invoke(`${this.functionName}/gather-evidence`, {\n        body: {\n          topic,\n          sources\n        }\n      });\n\n      if (error) {\n        console.error('Evidence gathering error:', error);\n        throw error;\n      }\n\n      console.log('✅ Evidence gathered successfully');\n      return data;\n\n    } catch (error) {\n      console.error('Gather evidence service error:', error);\n      throw new Error(`Failed to gather evidence: ${error.message}`);\n    }\n  }\n\n  async updatePlan(planId, updates) {\n    try {\n      console.log('📝 Updating strategic plan via Supabase Edge Function...');\n      \n      const { data, error } = await supabase.functions.invoke(this.functionName, {\n        method: 'PUT',\n        body: updates\n      });\n\n      if (error) {\n        console.error('Plan update error:', error);\n        throw error;\n      }\n\n      console.log('✅ Strategic plan updated');\n      return data;\n\n    } catch (error) {\n      console.error('Update plan service error:', error);\n      throw new Error(`Failed to update plan: ${error.message}`);\n    }\n  }\n\n  async getPlanStatus(planId) {\n    try {\n      console.log('📊 Getting plan status via Supabase Edge Function...');\n      \n      const { data, error } = await supabase.functions.invoke(this.functionName, {\n        method: 'GET'\n      });\n\n      if (error) {\n        console.error('Plan status error:', error);\n        throw error;\n      }\n\n      console.log('✅ Plan status retrieved');\n      return data;\n\n    } catch (error) {\n      console.error('Get plan status service error:', error);\n      throw new Error(`Failed to get plan status: ${error.message}`);\n    }\n  }\n\n  // Store and retrieve plans from localStorage (fallback)\n  savePlanToLocalStorage(plan) {\n    try {\n      const plans = this.getPlansFromLocalStorage();\n      plans.push(plan);\n      localStorage.setItem('strategic_plans', JSON.stringify(plans));\n      console.log('✅ Plan saved to localStorage');\n    } catch (error) {\n      console.error('Error saving plan to localStorage:', error);\n    }\n  }\n\n  getPlansFromLocalStorage() {\n    try {\n      const plans = localStorage.getItem('strategic_plans');\n      return plans ? JSON.parse(plans) : [];\n    } catch (error) {\n      console.error('Error getting plans from localStorage:', error);\n      return [];\n    }\n  }\n\n  getPlanFromLocalStorage(planId) {\n    try {\n      const plans = this.getPlansFromLocalStorage();\n      return plans.find(plan => plan.id === planId);\n    } catch (error) {\n      console.error('Error getting plan from localStorage:', error);\n      return null;\n    }\n  }\n\n  // Fallback strategic plan generator\n  generateFallbackPlan(objective, context, constraints, timeline) {\n    const plan = {\n      id: `plan-${Date.now()}`,\n      objective,\n      context,\n      constraints,\n      timeline,\n      created_at: new Date().toISOString(),\n      status: 'draft',\n      executive_summary: `Strategic plan to ${objective}. ${context ? 'Context: ' + context : ''} This comprehensive approach will address key objectives through coordinated strategic pillars and measurable outcomes.`,\n      strategic_pillars: [\n        {\n          title: 'Strategic Foundation',\n          description: 'Establish the foundational elements required to achieve the objective',\n          actions: [\n            'Conduct stakeholder analysis',\n            'Define success criteria',\n            'Establish baseline metrics',\n            'Create communication framework'\n          ],\n          timeline: timeline || '4-6 weeks',\n          mcp: 'Intelligence MCP'\n        },\n        {\n          title: 'Content & Messaging',\n          description: 'Develop compelling content and messaging strategy',\n          actions: [\n            'Create core messaging framework',\n            'Develop content calendar',\n            'Produce strategic content assets',\n            'Align messaging across channels'\n          ],\n          timeline: timeline || '3-4 weeks',\n          mcp: 'Content Generator'\n        },\n        {\n          title: 'Media & Outreach',\n          description: 'Execute targeted media and stakeholder outreach',\n          actions: [\n            'Identify key media targets',\n            'Develop media relations strategy',\n            'Execute outreach campaigns',\n            'Monitor media coverage'\n          ],\n          timeline: timeline || '6-8 weeks',\n          mcp: 'Media Intelligence'\n        },\n        {\n          title: 'Monitoring & Optimization',\n          description: 'Track performance and optimize strategy based on results',\n          actions: [\n            'Implement tracking systems',\n            'Monitor key metrics',\n            'Analyze performance data',\n            'Optimize strategy based on insights'\n          ],\n          timeline: timeline || 'Ongoing',\n          mcp: 'Analytics MCP'\n        }\n      ],\n      implementation_phases: [\n        {\n          phase: 'Planning & Preparation',\n          duration: '2 weeks',\n          tasks: ['Strategic research', 'Stakeholder mapping', 'Resource allocation']\n        },\n        {\n          phase: 'Content Development',\n          duration: '3 weeks',\n          tasks: ['Content creation', 'Message testing', 'Asset production']\n        },\n        {\n          phase: 'Launch & Execution',\n          duration: '4 weeks',\n          tasks: ['Campaign launch', 'Media outreach', 'Stakeholder engagement']\n        },\n        {\n          phase: 'Optimization & Scale',\n          duration: '3 weeks',\n          tasks: ['Performance analysis', 'Strategy refinement', 'Scaling successful tactics']\n        }\n      ],\n      success_metrics: [\n        'Media mention volume and sentiment',\n        'Stakeholder engagement rates',\n        'Share of voice in target conversations',\n        'Website traffic and conversion',\n        'Social media engagement and reach',\n        'Brand awareness and perception metrics'\n      ],\n      risk_mitigation: [\n        {\n          risk: 'Timeline delays due to resource constraints',\n          strategy: 'Build buffer time into critical path activities and maintain flexible resource allocation'\n        },\n        {\n          risk: 'Negative media coverage or stakeholder reaction',\n          strategy: 'Develop crisis communication protocols and maintain proactive monitoring systems'\n        },\n        {\n          risk: 'Competitive response or market changes',\n          strategy: 'Implement agile planning processes and maintain competitive intelligence monitoring'\n        }\n      ]\n    };\n\n    return plan;\n  }\n\n  // Generate campaign from strategic plan\n  generateCampaignFromPlan(plan) {\n    if (!plan || !plan.strategic_pillars) {\n      throw new Error('Invalid plan structure');\n    }\n\n    const campaign = {\n      id: `campaign-${Date.now()}`,\n      planId: plan.id,\n      objective: plan.objective,\n      context: plan.context,\n      timeline: plan.timeline,\n      status: 'draft',\n      pillars: plan.strategic_pillars.map((pillar, index) => ({\n        id: `pillar-${index}`,\n        title: pillar.title,\n        description: pillar.description,\n        actions: pillar.actions || [],\n        timeline: pillar.timeline || '30 days',\n        mcp: pillar.mcp || 'Content Generator',\n        status: 'pending',\n        progress: 0,\n        assignee: pillar.mcp || 'Unassigned',\n        dueDate: pillar.timeline || 'TBD'\n      })),\n      created_at: new Date().toISOString()\n    };\n\n    // Save campaign to localStorage\n    const campaigns = JSON.parse(localStorage.getItem('strategic_campaigns') || '[]');\n    campaigns.push(campaign);\n    localStorage.setItem('strategic_campaigns', JSON.stringify(campaigns));\n\n    return campaign;\n  }\n}\n\nexport default new StrategicPlanningService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}