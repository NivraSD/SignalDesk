## Project Overview
SignalDesk is a comprehensive PR platform with Claude AI integration, built with React frontend and Node.js/Express backend.

## Current Working State (July 13, 2025)

### âœ… Fully Functional Features
- **Authentication**: PostgreSQL-based auth with JWT tokens (demo@signaldesk.com / password)
- **AI Assistant**: Chat interface with Claude API (backend integration)
- **Campaign Intelligence**: PR strategy and materials generation
- **Content Generator**: 9 content types with AI assistance
- **Crisis Command Center**: Crisis planning and real-time management
  - Crisis plan generation with real Claude AI data (healthcare, technology, finance, etc.)
  - War room with real-time crisis management
  - AI Crisis Advisor
  - Stakeholder communication drafting
  - Event logging and tracking
- **Backend Claude Integration**: All window.claude calls replaced with backend API calls

### ðŸ”§ Recent Fixes (July 13, 2025 Session)
- Fixed all `window.claude.complete()` calls - replaced with backend API endpoints
- Fixed Crisis Command Center to work in any browser (not just Claude.ai)
- Resolved numerous syntax errors in crisisController.js
- Fixed backend response format to match frontend expectations
- Fixed variable scope issues in crisis plan generation
- Provided complete working crisisController.js implementation
- Crisis plan generation now uses real Claude AI data (no more fallback/template data)

## Technology Stack

### Frontend
- React 18 with React Router v6
- No TypeScript
- Icons: Lucide React
- Styling: Custom CSS
- State Management: Context API (AuthContext, ProjectContext)
- API Service: Generic HTTP client (`/src/services/api.js`)

### Backend
- Node.js with Express
- PostgreSQL database
- Authentication: JWT with bcrypt
- Claude AI: @anthropic-ai/sdk
- Model: claude-3-5-sonnet-20241022
- Middleware: authMiddleware for protected routes
- File uploads: Multer

## API Endpoints

### Crisis Management (All Working with Claude AI)
- `POST /api/crisis/generate-plan` - Generate crisis plan with Claude AI
- `GET /api/crisis/plan` - Get saved plan
- `PUT /api/crisis/plan` - Update plan
- `DELETE /api/crisis/plan` - Delete plan
- `POST /api/crisis/advisor` - AI crisis advice
- `POST /api/crisis/draft-response` - Draft communications
- `POST /api/crisis/event-log` - Save event
- `GET /api/crisis/event-logs` - Get event history

### Other Endpoints
- Authentication: `/api/auth/*`
- Projects: `/api/projects/*`
- AI Assistant: `/api/assistant/chat`
- Campaigns: `/api/campaigns/*`
- Content: `/api/content/*`

## Database Schema

Key tables:
- `users` - User authentication
- `campaigns` - PR campaigns
- `content` - Generated content
- `templates` - Content templates
- `crisis_plans` - User crisis plans (JSONB)
- `crisis_event_logs` - Crisis event history

## Claude Integration Details

### ClaudeService Configuration
```javascript
// config/claude.js
- sendMessage() - For general chat
- sendConversation() - For multi-turn conversations
- generateContent() - For content generation (used by Crisis Command Center)
```

### Crisis Plan Generation Flow
1. Frontend sends industry selection to `/api/crisis/generate-plan`
2. Backend makes 3 Claude API calls:
   - Generate industry-specific crisis scenarios
   - Identify key stakeholders
   - Create communication plans
3. Responses are parsed and combined with universal scenarios
4. Complete plan saved to PostgreSQL
5. Frontend receives formatted response: `{ success: true, plan: { plan_data: {...}, id: ... } }`

## Current Issues & Next Steps

### Issues Resolved âœ…
- ~~Crisis plan generation uses fallback data~~ â†’ Now uses real Claude AI
- ~~Frontend/backend response format mismatch~~ â†’ Fixed
- ~~Syntax errors in crisisController.js~~ â†’ Fixed
- ~~Variable scope issues~~ â†’ Fixed

### Next Features to Build
1. Media List Builder
2. MemoryVault (document management)
3. Analytics/Monitoring Dashboard
4. Enhanced reporting features
5. Team collaboration features

## Development Commands

```bash
# Backend (Port 5001)
cd ~/Desktop/SignalDesk/backend
npm run dev

# Frontend (Port 3000)
cd ~/Desktop/SignalDesk/frontend
npm start

# Database
psql -d signaldesk

# Kill processes if needed
lsof -ti :5001 | xargs kill -9
lsof -ti :3000 | xargs kill -9
```

## Key Files Modified Today

### Frontend
- `/src/components/CrisisCommandCenter.js` - Fixed API calls to remove double `/api` prefix

### Backend
- `/config/claude.js` - Complete rewrite with proper structure and methods
- `/src/controllers/crisisController.js` - Complete rewrite with proper error handling and response format
- `/src/routes/crisisRoutes.js` - Added route-level debugging
- `/server.js` - Added request logging middleware

## Testing Checklist

âœ… Crisis plan generation works with real Claude AI data
âœ… AI Crisis Advisor responds correctly
âœ… Stakeholder communication drafting works
âœ… All crisis features work across all browsers
âœ… No more "template data" messages
âœ… Each generation produces unique, industry-specific content

## Debug Commands Used

```bash
# Check Claude API responses
grep -n "generateContent" config/claude.js

# Monitor backend logs for Claude calls
# Look for: "=== generateContent called ==="
# And: "âœ… Claude API responded successfully"

# Test Claude service directly
node test-claude-simple.js
```

## Notes

- The window.claude API only works inside Claude.ai interface
- Backend Claude integration allows the app to work in any browser
- All Claude API calls include detailed logging for debugging
- Response format must match frontend expectations exactly
- Crisis plans now include industry-specific scenarios + universal scenarios

## Environment Variables Required

```
CLAUDE_API_KEY=sk-ant-api03-...
CLAUDE_MODEL=claude-3-5-sonnet-20241022
DATABASE_URL=postgresql://...
JWT_SECRET=...
```

Last Updated: July 13, 2025 - Crisis Command Center fully integrated with Claude AI
# SignalDesk Project Context
## Last Updated: July 13, 2025 - Evening Session

## Project Overview
SignalDesk is a comprehensive PR platform with Claude AI integration, built with React frontend and Node.js/Express backend.

## Current Working State (July 13, 2025 - Evening)

### âœ… Fully Functional Features
- **Authentication**: PostgreSQL-based auth with JWT tokens (demo@signaldesk.com / password)
- **AI Assistant**: Chat interface with Claude API (backend integration)
- **Campaign Intelligence**: PR strategy and materials generation
- **Content Generator**: 9 content types with AI assistance
- **Crisis Command Center**: Crisis planning and real-time management
  - Crisis plan generation with real Claude AI data (healthcare, technology, finance, etc.)
  - War room with real-time crisis management
  - **AI Crisis Advisor** (FIXED in evening session):
    - Now properly connects to user's crisis plan
    - References specific scenarios, stakeholders, and communication plans
    - Provides industry-specific advice based on crisis plan
    - Properly formatted responses with line breaks and paragraphs
  - Stakeholder communication drafting
  - Event logging and tracking
- **Backend Claude Integration**: All window.claude calls replaced with backend API calls

### ðŸ”§ Recent Fixes (July 13, 2025 Evening Session)
- **Fixed AI Crisis Advisor Integration**:
  - Added missing `advisor`/`getAIAdvice` function to crisisController.js
  - Fixed case mismatch: `ClaudeService` â†’ `claudeService`
  - Advisor now retrieves user's crisis plan from database
  - Includes plan context (scenarios, stakeholders, communication plans) in Claude prompts
  - Returns plan summary with advice
- **Fixed Frontend Display**:
  - Added `whitespace-pre-wrap` CSS class for proper formatting
  - Fixed JSX syntax errors from orphaned code
  - AI responses now display with proper line breaks and paragraphs
- **Cleaned Up Code**:
  - Removed duplicate `handleAIChat` functions
  - Removed orphaned code blocks causing syntax errors
  - Fixed missing closing div tags

## Technology Stack

### Frontend
- React 18 with React Router v6
- No TypeScript
- Icons: Lucide React
- Styling: Custom CSS (with Tailwind-like classes)
- State Management: Context API (AuthContext, ProjectContext)
- API Service: Generic HTTP client (`/src/services/api.js`)

### Backend
- Node.js with Express
- PostgreSQL database
- Authentication: JWT with bcrypt
- Claude AI: @anthropic-ai/sdk
- Model: claude-3-5-sonnet-20241022
- Middleware: authMiddleware for protected routes
- File uploads: Multer

## API Endpoints

### Crisis Management (All Working with Claude AI)
- `POST /api/crisis/generate-plan` - Generate crisis plan with Claude AI âœ…
- `GET /api/crisis/plan` - Get saved plan âœ…
- `PUT /api/crisis/plan` - Update plan âœ…
- `DELETE /api/crisis/plan` - Delete plan âœ…
- `POST /api/crisis/advisor` - AI crisis advice (FIXED) âœ…
- `POST /api/crisis/draft-response` - Draft communications âœ…
- `POST /api/crisis/event-log` - Save event âœ…
- `GET /api/crisis/event-logs` - Get event history âœ…

### Other Endpoints
- Authentication: `/api/auth/*`
- Projects: `/api/projects/*`
- AI Assistant: `/api/assistant/chat`
- Campaigns: `/api/campaigns/*`
- Content: `/api/content/*`

## Database Schema

Key tables:
- `users` - User authentication
- `campaigns` - PR campaigns
- `content` - Generated content
- `templates` - Content templates
- `crisis_plans` - User crisis plans (JSONB) - stores complete plan with scenarios, stakeholders, etc.
- `crisis_event_logs` - Crisis event history

## Claude Integration Details

### ClaudeService Configuration
```javascript
// config/claude.js
const claudeService = require('../../config/claude'); // Note: lowercase 'c'
- sendMessage() - For general chat
- sendConversation() - For multi-turn conversations
- generateContent() - For content generation (used by Crisis Command Center)
```

### Crisis Advisor Flow (FIXED)
1. Frontend sends query to `/api/crisis/advisor`
2. Backend (`getAIAdvice` function):
   - Retrieves user's crisis plan from PostgreSQL
   - Builds comprehensive prompt with plan context
   - Calls `claudeService.generateContent(prompt)`
   - Returns formatted response with plan summary
3. Frontend displays formatted advice with proper line breaks

### Crisis Plan Generation Flow (Working)
1. Frontend sends industry selection to `/api/crisis/generate-plan`
2. Backend makes 3 Claude API calls:
   - Generate industry-specific crisis scenarios
   - Identify key stakeholders
   - Create communication plans
3. Responses are parsed and combined with universal scenarios
4. Complete plan saved to PostgreSQL
5. Frontend receives formatted response

## Key Code Fixes Applied

### Backend - crisisController.js
```javascript
// Added the missing advisor function
exports.getAIAdvice = async (req, res) => {
  // Retrieves crisis plan
  // Builds context-aware prompt
  // Returns AI advice with plan summary
};

// Fixed import case sensitivity
const claudeService = require('../../config/claude'); // lowercase
```

### Frontend - CrisisCommandCenter.js
```javascript
// Updated handleAIChat to call backend API
const response = await api.post('/crisis/advisor', {
  query: chatInput,
  context: selectedScenario ? 
    `Active Crisis Scenario: ${selectedScenario.title}` : 
    'General crisis management inquiry'
});

// Fixed message display formatting
<p className="text-sm whitespace-pre-wrap">{message.content}</p>
```

## Current Issues & Next Steps

### Issues Resolved âœ…
- ~~AI Crisis Advisor not connecting to crisis plan~~ â†’ Fixed
- ~~Frontend calling window.claude instead of backend~~ â†’ Fixed
- ~~AI responses displayed as long string~~ â†’ Fixed with formatting
- ~~Case sensitivity issues with imports~~ â†’ Fixed

### Next Features to Build
1. Media List Builder
2. MemoryVault (document management)
3. Analytics/Monitoring Dashboard
4. Enhanced reporting features
5. Team collaboration features
6. Email integration for crisis communications

## Development Commands

```bash
# Backend (Port 5001)
cd ~/Desktop/SignalDesk/backend
npm run dev

# Frontend (Port 3000)
cd ~/Desktop/SignalDesk/frontend
npm start

# Database
psql -d signaldesk

# Kill processes if needed
lsof -ti :5001 | xargs kill -9
lsof -ti :3000 | xargs kill -9
```

## Testing Checklist

âœ… Crisis plan generation works with real Claude AI data
âœ… AI Crisis Advisor responds with plan context
âœ… AI advice references specific industry, scenarios, and stakeholders
âœ… Responses are properly formatted with line breaks
âœ… Stakeholder communication drafting works
âœ… All crisis features work across all browsers
âœ… No more "template data" messages
âœ… Each generation produces unique, industry-specific content

## Debug Commands Used

```bash
# Check Claude API responses
grep -n "generateContent" config/claude.js

# Monitor backend logs for AI Advisor
# Look for: "=== AI Crisis Advisor called ==="
# And: "âœ… Crisis plan found for user"

# Check imports and case sensitivity
grep -n "ClaudeService\|claudeService" src/controllers/crisisController.js

# Verify crisis plan exists for user
psql -d signaldesk -c "SELECT COUNT(*) FROM crisis_plans WHERE user_id = (SELECT id FROM users WHERE email = 'demo@signaldesk.com');"
```

## Environment Variables Required

```
CLAUDE_API_KEY=sk-ant-api03-...
CLAUDE_MODEL=claude-3-5-sonnet-20241022
DATABASE_URL=postgresql://...
JWT_SECRET=...
PORT=5001
```

## Important Notes

- The window.claude API only works inside Claude.ai interface
- Backend Claude integration allows the app to work in any browser
- All Claude API calls include detailed logging for debugging
- Response format must match frontend expectations exactly
- Crisis plans include industry-specific scenarios + universal scenarios
- AI Advisor now provides context-aware advice based on stored crisis plans
- Case sensitivity matters in JavaScript imports (claudeService vs ClaudeService)

## Backup Locations
- `frontend/src/components/CrisisCommandCenter.js.backup`
- `backups/july13/CrisisCommandCenter.js`
- `backend/src/controllers/crisisController.old`

Last Updated: July 13, 2025 - AI Crisis Advisor fully integrated with crisis plan context