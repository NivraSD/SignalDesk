# Add these functions after line 77 (after state declarations):

  // Fetch social intelligence
  const fetchSocialIntelligence = async () => {
    if (!organization) return

    setSocialLoading(true)
    try {
      const response = await fetch('/api/social-intelligence', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          organization_id: organization.name,
          time_range: socialTimeRange,
          platforms: socialPlatforms
        })
      })

      const data = await response.json()

      if (data.success) {
        setSocialSignals(data.signals || [])
        setSocialSentiment(data.sentiment_analysis)
      }
    } catch (error) {
      console.error('Social intelligence fetch error:', error)
    } finally {
      setSocialLoading(false)
    }
  }

  // Auto-fetch when tab opens or filters change
  useEffect(() => {
    if (activeTab === 'social') {
      fetchSocialIntelligence()
    }
  }, [activeTab, socialTimeRange, socialPlatforms, organization])

  // Platform icon helper
  const getPlatformIcon = (platform: string) => {
    switch (platform) {
      case 'twitter': return <Twitter className="w-4 h-4" />
      case 'reddit': return <MessageCircle className="w-4 h-4" />
      case 'linkedin': return <Linkedin className="w-4 h-4" />
      case 'instagram': return <Instagram className="w-4 h-4" />
      case 'tiktok': return <Hash className="w-4 h-4" />
      default: return <Share2 className="w-4 h-4" />
    }
  }

# Add this button after the "Prompt Library" button (around line 416):

            <button
              onClick={() => setActiveTab('social')}
              className={`px-4 py-2 rounded-lg transition-colors flex items-center gap-2 ${
                activeTab === 'social'
                  ? 'bg-purple-500/20 text-purple-400'
                  : 'bg-gray-800 hover:bg-gray-700 text-gray-400'
              }`}
            >
              <Share2 className="w-4 h-4" />
              Social Intelligence
            </button>

# Add this entire tab section before the closing </div> of the Content Area (around line 720):

        {/* Social Intelligence Tab */}
        {activeTab === 'social' && (
          <div className="p-6 overflow-y-auto h-full">
            <div className="max-w-6xl mx-auto">
              {/* Header with controls */}
              <div className="bg-gray-800/50 rounded-lg p-6 mb-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-cyan-400 flex items-center gap-2">
                      <Share2 className="w-6 h-6" />
                      Social Intelligence
                    </h3>
                    <p className="text-gray-400 text-sm mt-1">
                      Real-time social media monitoring across all major platforms
                    </p>
                  </div>
                  <button
                    onClick={fetchSocialIntelligence}
                    disabled={socialLoading}
                    className="px-4 py-2 bg-cyan-500/20 hover:bg-cyan-500/30 text-cyan-400 rounded-lg flex items-center gap-2 transition-colors disabled:opacity-50"
                  >
                    <RefreshCw className={`w-4 h-4 ${socialLoading ? 'animate-spin' : ''}`} />
                    Refresh
                  </button>
                </div>

                {/* Filters */}
                <div className="flex gap-4 flex-wrap">
                  {/* Time Range */}
                  <div className="flex gap-2">
                    <span className="text-gray-400 text-sm">Time:</span>
                    {(['1h', '24h', '7d'] as const).map(range => (
                      <button
                        key={range}
                        onClick={() => setSocialTimeRange(range)}
                        className={`px-3 py-1 rounded text-sm transition-colors ${
                          socialTimeRange === range
                            ? 'bg-cyan-500/20 text-cyan-400'
                            : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                        }`}
                      >
                        {range}
                      </button>
                    ))}
                  </div>

                  {/* Platforms */}
                  <div className="flex gap-2 items-center">
                    <span className="text-gray-400 text-sm">Platforms:</span>
                    {['twitter', 'reddit', 'linkedin', 'instagram', 'tiktok'].map(platform => (
                      <button
                        key={platform}
                        onClick={() => {
                          setSocialPlatforms(prev =>
                            prev.includes(platform)
                              ? prev.filter(p => p !== platform)
                              : [...prev, platform]
                          )
                        }}
                        className={`px-3 py-1 rounded text-sm transition-colors flex items-center gap-1 ${
                          socialPlatforms.includes(platform)
                            ? 'bg-cyan-500/20 text-cyan-400'
                            : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                        }`}
                      >
                        {getPlatformIcon(platform)}
                        {platform}
                      </button>
                    ))}
                  </div>
                </div>

                {/* Sentiment Summary */}
                {socialSentiment && (
                  <div className="mt-4 p-4 bg-gray-900/50 rounded-lg">
                    <div className="flex items-center gap-4">
                      <div className="flex-1">
                        <div className="text-sm text-gray-400 mb-2">Overall Sentiment</div>
                        <div className="text-2xl font-bold capitalize">{socialSentiment.overall}</div>
                      </div>
                      <div className="flex gap-4">
                        <div className="text-center">
                          <div className="text-green-400 text-xl font-bold">{socialSentiment.positive_percentage}%</div>
                          <div className="text-xs text-gray-400">Positive</div>
                        </div>
                        <div className="text-center">
                          <div className="text-gray-400 text-xl font-bold">{socialSentiment.neutral_percentage}%</div>
                          <div className="text-xs text-gray-400">Neutral</div>
                        </div>
                        <div className="text-center">
                          <div className="text-red-400 text-xl font-bold">{socialSentiment.negative_percentage}%</div>
                          <div className="text-xs text-gray-400">Negative</div>
                        </div>
                      </div>
                    </div>
                    {socialSentiment.summary && (
                      <p className="text-gray-300 text-sm mt-3">{socialSentiment.summary}</p>
                    )}
                  </div>
                )}
              </div>

              {/* Loading State */}
              {socialLoading && (
                <div className="flex items-center justify-center py-12">
                  <Loader2 className="w-8 h-8 animate-spin text-cyan-400" />
                  <span className="ml-3 text-gray-400">Fetching social intelligence...</span>
                </div>
              )}

              {/* Signals Grid */}
              {!socialLoading && socialSignals.length > 0 && (
                <div className="grid gap-4">
                  {socialSignals.map((signal, idx) => (
                    <div
                      key={idx}
                      className="bg-gray-800/50 rounded-lg p-4 hover:bg-gray-800 transition-colors border border-gray-700"
                    >
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center gap-2">
                          {getPlatformIcon(signal.platform)}
                          <span className="font-medium text-cyan-400 capitalize">{signal.platform}</span>
                          {signal.author && (
                            <span className="text-gray-400 text-sm">@{signal.author}</span>
                          )}
                        </div>
                        <div className="flex items-center gap-2">
                          {signal.engagement > 0 && (
                            <span className="text-gray-400 text-sm">{signal.engagement} engagements</span>
                          )}
                          <a
                            href={signal.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-cyan-400 hover:text-cyan-300"
                          >
                            <ExternalLink className="w-4 h-4" />
                          </a>
                        </div>
                      </div>

                      <p className="text-gray-300 text-sm mb-2 line-clamp-3">{signal.content}</p>

                      {signal.metrics && (
                        <div className="flex gap-4 text-xs text-gray-400 mt-2">
                          {signal.metrics.likes > 0 && <span>‚ù§Ô∏è {signal.metrics.likes}</span>}
                          {signal.metrics.retweets > 0 && <span>üîÅ {signal.metrics.retweets}</span>}
                          {signal.metrics.replies > 0 && <span>üí¨ {signal.metrics.replies}</span>}
                          {signal.metrics.score > 0 && <span>‚¨ÜÔ∏è {signal.metrics.score}</span>}
                          {signal.metrics.comments > 0 && <span>üí¨ {signal.metrics.comments}</span>}
                        </div>
                      )}

                      <div className="text-xs text-gray-500 mt-2">
                        {new Date(signal.timestamp).toLocaleString()}
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {/* Empty State */}
              {!socialLoading && socialSignals.length === 0 && (
                <div className="text-center py-12">
                  <Share2 className="w-16 h-16 text-gray-600 mx-auto mb-4" />
                  <p className="text-gray-400">No social signals found for the selected filters.</p>
                  <p className="text-gray-500 text-sm mt-2">Try adjusting the time range or platforms.</p>
                </div>
              )}
            </div>
          </div>
        )}