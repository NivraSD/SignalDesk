## 🚀 Project Overview

SignalDesk is a comprehensive AI-powered PR platform built with React frontend and Node.js/Express backend, featuring deep Claude AI integration for intelligent PR assistance.

**Demo Access**: demo@signaldesk.com / password

## 📋 Table of Contents

1. [Current Features Status](#current-features-status)
2. [Technology Stack](#technology-stack)
3. [Project Structure](#project-structure)
4. [API Documentation](#api-documentation)
5. [Database Schema](#database-schema)
6. [Development Guide](#development-guide)
7. [Recent Updates](#recent-updates)
8. [Next Steps](#next-steps)
9. [Common Issues & Solutions](#common-issues--solutions)

---

## Current Features Status

### ✅ Fully Functional Features

#### 1. **Authentication System**
- PostgreSQL-based authentication with JWT tokens
- Bcrypt password hashing
- Protected routes with automatic redirects
- User session management

#### 2. **AI Assistant**
- Real-time chat interface with Claude AI
- Conversation history maintenance
- Professional PR assistance
- Backend integration (no browser dependency)
- Uses `claudeService.sendMessage()` method

#### 3. **Campaign Intelligence**
- Comprehensive PR strategy generation
- Company information extraction
- Market research and positioning
- 7 types of PR materials generation
- Campaign saving and history
- Export functionality (download/copy)
- Fixed route definitions (removed duplicate `/campaigns` prefix)

#### 4. **Content Generator**
- 9 content types supported:
  - Press Releases
  - Crisis Response Statements
  - Social Media Posts
  - Media Pitches
  - Executive Statements
  - Q&A Documents
  - Messaging Frameworks
  - Thought Leadership Articles
  - Presentation Decks
- AI Writing Assistant with natural language input
- Template management system
- Content library with history
- Multi-format export capabilities
- Uses `claudeService.sendMessage()` for AI generation

#### 5. **Crisis Command Center**
- Industry-specific crisis plan generation via Claude AI
- Real-time crisis war room
- AI Crisis Advisor with plan context integration
- Stakeholder communication drafting
- Event logging and tracking
- Task assignment and status tracking
- Decision logging system
- Crisis timer and status indicators
- Fixed Claude method calls (`generateContent` → `sendMessage`)

#### 6. **AI Monitoring & Sentiment Analysis**
- Live monitoring with auto-refresh (30-second intervals)
- Full Claude AI integration for sentiment analysis
- Detailed analysis with summaries, rationale, and key topics
- Confidence scores and urgency level detection
- Real-time statistics dashboard with charts
- CSV/JSON export functionality
- Keyword configuration
- Color-coded sentiment indicators
- Expandable UI for viewing full Claude analysis
- Brand context configuration for personalized insights
- Fallback to keyword analysis if Claude unavailable
- Data persistence to PostgreSQL
- Backend API integration (no browser dependency)
- **NEW: RSS feed integration with 25+ news sources**
- **NEW: Source type filtering (Technology, Business, PR, etc.)**
- **NEW: Clickable mentions to view full articles**
- **NEW: Proper response structure handling (response.analysis)**

#### 7. **Media List Builder**
- Web search for real journalists using Claude AI
- Smart search with natural language queries
- Reporter database with PostgreSQL persistence
- Filter by beat, publication, or custom search
- Save and manage multiple media lists
- Clean, intuitive UI with gradient search section
- Search results show only current search (no mixing)
- Select reporters and save to named lists
- Load saved lists for viewing/editing
- Real journalist data from Claude web search
- Temporary IDs for display, real IDs on save
- Fixed filter interference issues

### 🏗️ Ready to Build

- **MemoryVault** - Document upload and AI training
- **Analytics Dashboard** - Performance tracking
- **Reports Module** - Advanced reporting features
- **Team Collaboration** - Multi-user features

---

## Technology Stack

### Frontend
- **Framework**: React 18 with React Router v6
- **Icons**: Lucide React
- **Styling**: Custom CSS (Tailwind-like utility classes)
- **State Management**: Context API (AuthContext, ProjectContext)
- **HTTP Client**: Custom API service (`/src/services/api.js`)
- **API Base URL**: `http://localhost:5001` (updated from 5000)

### Backend
- **Runtime**: Node.js with Express
- **Port**: 5001 (updated from 5000)
- **Database**: PostgreSQL with pg package
- **Authentication**: JWT with bcrypt
- **AI Integration**: @anthropic-ai/sdk
- **AI Model**: claude-3-5-sonnet-20241022
- **Claude Service**: Singleton instance with `sendMessage()` and `sendConversation()` methods
- **File Uploads**: Multer
- **RSS Parser**: rss-parser package
- **Middleware**: Custom authMiddleware for protected routes

---

## Project Structure
SignalDesk/
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── Layout.js                    # Sidebar navigation
│   │   │   ├── Dashboard.js                 # Feature cards grid
│   │   │   ├── Login.js                     # Authentication UI
│   │   │   ├── AIAssistant.js              # Chat interface
│   │   │   ├── CampaignIntelligence.js     # PR strategy generation
│   │   │   ├── ContentGenerator.js          # Content creation
│   │   │   ├── CrisisCommandCenter.js      # Crisis management
│   │   │   ├── MediaListBuilder.js          # Journalist search & lists
│   │   │   └── Monitoring/
│   │   │       └── AISentimentMonitor.js   # AI monitoring & sentiment analysis
│   │   ├── contexts/
│   │   │   ├── AuthContext.js               # Authentication state
│   │   │   └── ProjectContext.js            # Project management
│   │   ├── services/
│   │   │   └── api.js                       # HTTP client (all endpoints use /api prefix)
│   │   └── App.js                           # Route configuration
│   └── package.json
│
└── backend/
├── src/
│   ├── routes/
│   │   ├── authRoutes.js                # Authentication endpoints
│   │   ├── assistantRoutes.js           # AI chat endpoints
│   │   ├── campaignRoutes.js            # Campaign management (fixed route paths)
│   │   ├── contentRoutes.js             # Content generation
│   │   ├── crisisRoutes.js              # Crisis management
│   │   ├── monitoringRoutes.js          # AI monitoring endpoints
│   │   └── mediaRoutes.js               # Media list & reporter search
│   ├── controllers/
│   │   ├── assistantController.js       # Claude chat logic
│   │   ├── contentController.js         # Content operations (uses sendMessage)
│   │   ├── crisisController.js          # Crisis operations (uses sendMessage)
│   │   ├── monitoringController.js      # Monitoring & sentiment analysis
│   │   └── mediaController.js           # Media list operations & Claude search
│   └── middleware/
│       └── auth.js                      # JWT verification
├── config/
│   ├── claude.js                        # ClaudeService class (exports instance)
│   └── db.js                            # PostgreSQL pool
├── server.js                            # Express app setup (port 5001)
└── .env                                 # Environment variables

---

## API Documentation

### Base URL
All API endpoints use the base URL: `http://localhost:5001/api`

### Authentication Endpoints
POST   /api/auth/login          # User login
GET    /api/auth/verify         # Token verification
POST   /api/auth/register       # User registration

### AI Assistant Endpoints
POST   /api/assistant/chat      # Send message to Claude

### Campaign Management Endpoints
GET    /api/campaigns                    # List user campaigns
POST   /api/campaigns                    # Save campaign
POST   /api/campaigns/generate-strategy  # Generate PR strategy
POST   /api/campaigns/generate-material  # Generate PR materials
PUT    /api/campaigns/:id/materials      # Update materials
DELETE /api/campaigns/:id                # Delete campaign

### Content Generation Endpoints
POST   /api/content/generate        # Generate with form data
POST   /api/content/ai-generate     # Generate with AI assistant
POST   /api/content/save           # Save generated content
GET    /api/content/history        # Get content history
GET    /api/content/:id            # Get single content
PUT    /api/content/:id            # Update content
DELETE /api/content/:id            # Delete content
GET    /api/content/templates      # Get templates
POST   /api/content/templates/upload # Upload template
DELETE /api/content/templates/:id   # Delete template
POST   /api/content/export         # Export content

### Crisis Management Endpoints
POST   /api/crisis/generate-plan    # Generate crisis plan
GET    /api/crisis/plan            # Get saved plan
PUT    /api/crisis/plan            # Update plan
DELETE /api/crisis/plan            # Delete plan
POST   /api/crisis/advisor         # AI crisis advice
POST   /api/crisis/draft-response  # Draft communications
POST   /api/crisis/event-log       # Save event
GET    /api/crisis/event-logs      # Get event history

### AI Monitoring Endpoints
POST   /api/monitoring/analyze-sentiment  # Analyze single mention
POST   /api/monitoring/analyze-batch      # Analyze multiple mentions
POST   /api/monitoring/config            # Save configuration
GET    /api/monitoring/config            # Get saved configuration
POST   /api/monitoring/mentions          # Save mentions
GET    /api/monitoring/mentions          # Retrieve saved mentions
POST   /api/monitoring/export            # Export data (CSV/JSON)
POST   /api/monitoring/fetch-rss         # Fetch RSS feeds

### Media List Endpoints
POST   /api/media/search-reporters  # Search web for journalists via Claude
GET    /api/media/contacts         # Get all saved contacts
POST   /api/media/contacts         # Save new contacts
GET    /api/media/lists           # Get all media lists
POST   /api/media/lists           # Create new list
PUT    /api/media/lists/:id       # Update list
DELETE /api/media/lists/:id       # Delete list
POST   /api/media/export          # Export contacts to CSV

---

## Database Schema

```sql
-- Users table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    name VARCHAR(255),
    company VARCHAR(255),
    role VARCHAR(50) DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Campaigns table
CREATE TABLE campaigns (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    brief TEXT NOT NULL,
    strategy JSONB,
    materials JSONB,
    status VARCHAR(50) DEFAULT 'draft',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Content table
CREATE TABLE content (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    project_id INTEGER REFERENCES projects(id) ON DELETE SET NULL,
    title VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL,
    content TEXT NOT NULL,
    form_data JSONB,
    status VARCHAR(50) DEFAULT 'draft',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Templates table
CREATE TABLE templates (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    content_type VARCHAR(50) DEFAULT 'universal',
    file_type VARCHAR(100),
    size INTEGER,
    placeholders JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Crisis Plans table
CREATE TABLE crisis_plans (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    industry VARCHAR(255) NOT NULL,
    plan_data JSONB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id)
);

-- Crisis Event Logs table
CREATE TABLE crisis_event_logs (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    event_data JSONB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Monitoring Configs table
CREATE TABLE monitoring_configs (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    config_type VARCHAR(50) NOT NULL DEFAULT 'monitoring',
    config_data JSONB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id)
);

-- Monitoring Mentions table
CREATE TABLE monitoring_mentions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    mention_id VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    source VARCHAR(255),
    source_type VARCHAR(100),
    author VARCHAR(255),
    publish_date TIMESTAMP,
    url TEXT,
    reach INTEGER DEFAULT 0,
    sentiment VARCHAR(50),
    analysis JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, mention_id)
);

-- Monitoring Analyses table
CREATE TABLE monitoring_analyses (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    text TEXT NOT NULL,
    source VARCHAR(255),
    analysis JSONB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Media Contacts table
CREATE TABLE media_contacts (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    publication VARCHAR(255),
    beat VARCHAR(100),
    specialty TEXT,
    email VARCHAR(255),
    twitter VARCHAR(100),
    bio TEXT,
    source VARCHAR(50) DEFAULT 'local',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, email)
);

-- Media Lists table
CREATE TABLE media_lists (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Media List Contacts junction table
CREATE TABLE media_list_contacts (
    id SERIAL PRIMARY KEY,
    list_id INTEGER NOT NULL REFERENCES media_lists(id) ON DELETE CASCADE,
    contact_id INTEGER NOT NULL REFERENCES media_contacts(id) ON DELETE CASCADE,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(list_id, contact_id)
);

-- Performance indexes
CREATE INDEX idx_campaigns_user_id ON campaigns(user_id);
CREATE INDEX idx_content_user_id ON content(user_id);
CREATE INDEX idx_crisis_plans_user_id ON crisis_plans(user_id);
CREATE INDEX idx_monitoring_mentions_user_id ON monitoring_mentions(user_id);
CREATE INDEX idx_monitoring_mentions_publish_date ON monitoring_mentions(publish_date DESC);
CREATE INDEX idx_monitoring_mentions_sentiment ON monitoring_mentions(sentiment);
CREATE INDEX idx_monitoring_analyses_user_id ON monitoring_analyses(user_id);
CREATE INDEX idx_media_contacts_user_id ON media_contacts(user_id);
CREATE INDEX idx_media_lists_user_id ON media_lists(user_id);
CREATE INDEX idx_media_list_contacts_list_id ON media_list_contacts(list_id);
CREATE INDEX idx_media_list_contacts_contact_id ON media_list_contacts(contact_id);

RSS Feeds Configuration
The AI Monitoring system now includes 25+ RSS feeds across multiple categories:
Technology News

TechCrunch
The Verge
Wired
Ars Technica
VentureBeat

Business & Finance

Reuters Business
BBC Business
Bloomberg
Financial Times
WSJ Business

Press Releases & PR

PR Newswire
Business Wire
PR Web
GlobeNewswire

Marketing & Advertising

Marketing Week
AdWeek
Marketing Land

General News

CNN Business
The Guardian Business
NYT Business

Industry Specific

Healthcare IT News
Retail Dive
EdTech Magazine

Social Media & Forums

Reddit Technology
Hacker News
Product Hunt


Development Guide
Environment Variables
bash# Backend (.env)
PORT=5001
CLAUDE_API_KEY=sk-ant-api03-...
CLAUDE_MODEL=claude-3-5-sonnet-20241022
JWT_SECRET=signaldesk-jwt-secret-2024
NODE_ENV=development
DB_HOST=localhost
DB_PORT=5432
DB_NAME=signaldesk
DB_USER=postgres
DB_PASSWORD=your_password
Frontend Environment Variables
bash# Frontend (.env)
REACT_APP_API_URL=http://localhost:5001
Starting the Application
bash# Backend (Port 5001)
cd ~/Desktop/SignalDesk/backend
npm run dev

# Frontend (Port 3000)
cd ~/Desktop/SignalDesk/frontend
npm start

# Database connection
psql -d signaldesk
Common Commands
bash# Kill processes if ports are in use
lsof -ti :5001 | xargs kill -9  # Backend
lsof -ti :3000 | xargs kill -9  # Frontend

# Check database
psql -d signaldesk -c "SELECT COUNT(*) FROM users;"

# Test API
curl -X POST http://localhost:5001/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"demo@signaldesk.com","password":"password"}'
Claude Integration Pattern
javascript// Backend usage (config/claude.js)
const claudeService = require('../../config/claude');

// Available methods:
claudeService.sendMessage(message)        // Single message
claudeService.sendConversation(messages)  // Multi-turn chat

// Note: Do NOT use claudeService.generateContent() - this method doesn't exist

Recent Updates
July 15, 2025 - Enhanced AI Monitoring

✅ Added 25+ RSS feeds across multiple categories
✅ Implemented source type filtering (Technology, Business, PR, etc.)
✅ Added clickable mentions to view full articles
✅ Fixed sentiment analysis response structure (response.analysis)
✅ Improved error handling for RSS feeds
✅ Added timeout protection for slow feeds
✅ Enhanced UI with external link indicators

July 15, 2025 - Media List Builder Complete

✅ Implemented web search for journalists using Claude AI
✅ Created intuitive UI with gradient search section
✅ Fixed filter interference - search and filters work independently
✅ Search results show only current search (no mixing of old results)
✅ Save reporters to named lists with PostgreSQL persistence
✅ Load and manage saved media lists
✅ Removed confusing "local database" references
✅ Clean UI with search button below search bar

July 15, 2025 - Complete Platform Fix

✅ Fixed port configuration across entire platform (5000 → 5001)
✅ Added /api prefix to all frontend API calls
✅ Fixed Claude service method calls (generateContent → sendMessage)
✅ Fixed campaign route definitions (removed duplicate /campaigns prefix)
✅ Fixed database unique constraint on monitoring_configs table
✅ Fixed template string syntax errors in components
✅ All features now fully functional

July 14, 2025 - Evening Session

✅ Completed AI Monitoring & Sentiment Analysis integration
✅ Connected monitoring frontend to backend Claude API
✅ Implemented expandable UI for viewing full Claude analysis
✅ Added monitoring data persistence to PostgreSQL
✅ Created monitoring API endpoints and database tables
✅ Fixed import and syntax errors in AISentimentMonitor.js
✅ Sentiment analysis now shows summaries, rationale, key topics, and urgency levels

July 13, 2025 - Evening Session

✅ Fixed AI Crisis Advisor integration with crisis plan context
✅ Fixed case sensitivity issues (ClaudeService → claudeService)
✅ Added proper formatting for AI responses (whitespace-pre-wrap)
✅ Removed duplicate code and syntax errors
✅ Crisis Advisor now retrieves and uses stored crisis plans

July 13, 2025 - Day Session

✅ Replaced all window.claude calls with backend API endpoints
✅ Fixed Crisis Command Center browser compatibility
✅ Implemented real Claude AI data (removed template fallbacks)
✅ Fixed backend response format mismatches
✅ Added comprehensive error handling


Next Steps
Immediate Priorities

MemoryVault™

Document upload system
AI training on company materials
Knowledge base management


Analytics Dashboard

Campaign performance metrics
Content engagement tracking
Crisis response analytics


Reports Module

Comprehensive PR reports
Campaign summaries
Media coverage analysis



Future Enhancements

Email integration for Media List Builder
Slack and social media integrations
Advanced user roles and permissions
Multi-language support
Mobile application
Mention search and advanced filtering
Saved searches and alerts
Email digests for monitoring


Common Issues & Solutions
Port Already in Use
bash# Kill process on port 5001
lsof -ti:5001 | xargs kill -9
Claude Not Responding

Check API key in .env file
Verify using correct method: claudeService.sendMessage()
Check for rate limiting

API 404 Errors

Ensure all frontend calls use /api prefix
Check route definitions don't have duplicate path segments
Verify routes are properly imported in server.js

Database Constraint Errors

Check for unique constraints: \d table_name in psql
Ensure INSERT queries handle conflicts properly
Include all required columns in queries

RSS Feed Issues

Some feeds may timeout or return 404 - system continues with working feeds
Reuters feed URL updated to working endpoint
Added 10-second timeout for slow feeds
Keywords must be sent as string, not array


Important Notes
Technical Considerations

All Claude API calls must use sendMessage() or sendConversation() methods
Frontend API calls must include /api prefix
Backend runs on port 5001 (not 5000)
Route definitions should not duplicate path segments
Response format must match frontend expectations
JSONB columns provide flexible data storage
Case sensitivity matters in imports (claudeService not ClaudeService)
Template placeholders support multiple formats: {{var}}, [var], ${var}
All features use backend Claude API (not window.claude)
Sentiment analysis includes fallback to keyword-based analysis
Monitoring data persists to PostgreSQL with full analysis results
Media List Builder uses temporary IDs for display, real IDs on save
RSS mentions must include sentiment: 'unanalyzed' field
API responses with nested structure need proper handling (response.analysis)

UI/UX Standards

Primary Colors: Blue (#007bff)
Sidebar: Black (#1a1a1a) with white text
Background: Gray (#f5f5f5)
Cards: White with shadows and hover effects
Buttons: Gradient (blue to purple)
Status Indicators: Green/Yellow/Red
Search Sections: Gradient backgrounds (blue to indigo)
External Links: Blue with hover effects (#1976d2)

Security

JWT tokens stored in localStorage
All routes require authentication (except login)
User-scoped data access
Password hashing with bcrypt
CORS configured for localhost:3000 only
