{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import'./SystemInitializer.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SystemInitializer=_ref=>{let{onComplete}=_ref;const navigate=useNavigate();const[initStatus,setInitStatus]=useState('starting');const[progress,setProgress]=useState(0);const[currentTask,setCurrentTask]=useState('');const[tasks,setTasks]=useState([]);useEffect(()=>{initializeSystem();},[]);const initializeSystem=async()=>{console.log('🚀 Starting SignalDesk initialization...');// Get saved configuration\nconst savedConfig=localStorage.getItem('signaldesk_onboarding');if(!savedConfig){navigate('/');return;}const config=JSON.parse(savedConfig);// Simplified initialization - only what actually works\nconst initTasks=[{id:'config',name:'Loading configuration',weight:20},{id:'opportunities',name:'Connecting to opportunity detection',weight:30},{id:'stakeholders',name:'Setting up stakeholder monitoring',weight:25},{id:'intelligence',name:'Initializing intelligence gathering',weight:25}];setTasks(initTasks.map(t=>_objectSpread(_objectSpread({},t),{},{status:'pending'})));let completedWeight=0;for(const task of initTasks){setCurrentTask(task.name);setTasks(prev=>prev.map(t=>t.id===task.id?_objectSpread(_objectSpread({},t),{},{status:'running'}):t));try{if(task.id==='opportunities'){// Actually call the deployed opportunities MCP\nawait callOpportunitiesMCP(config);}else{// For other tasks, just simulate for now since MCPs aren't deployed\nawait new Promise(resolve=>setTimeout(resolve,800));}completedWeight+=task.weight;setProgress(completedWeight);setTasks(prev=>prev.map(t=>t.id===task.id?_objectSpread(_objectSpread({},t),{},{status:'completed'}):t));}catch(error){console.error(\"Error with \".concat(task.id,\":\"),error);// Don't fail the whole init if one part fails\nsetTasks(prev=>prev.map(t=>t.id===task.id?_objectSpread(_objectSpread({},t),{},{status:'completed'}):t));completedWeight+=task.weight;setProgress(completedWeight);}}// Final setup\nsetCurrentTask('Starting dashboard...');await new Promise(resolve=>setTimeout(resolve,1000));setInitStatus('complete');setProgress(100);// Save initialization timestamp\nlocalStorage.setItem('signaldesk_initialized',new Date().toISOString());// Navigate to dashboard\nsetTimeout(()=>{if(onComplete){onComplete(config);}else{window.location.href='/dashboard';// Hard refresh to ensure clean state\n}},1500);};const callOpportunitiesMCP=async config=>{console.log('Calling Opportunities MCP...');try{var _config$organization;// Call your deployed MCP\nconst response=await fetch('https://signaldesk-opportunities.vercel.app/api',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({method:'discover_opportunities',params:{industry:((_config$organization=config.organization)===null||_config$organization===void 0?void 0:_config$organization.industry)||'technology',keywords:[],// From config.stakeholders if needed\nlimit:5}})});if(response.ok){const data=await response.json();console.log('✅ Opportunities MCP responded:',data);// Store initial opportunities\nif(data.success&&data.data){localStorage.setItem('signaldesk_initial_opportunities',JSON.stringify(data.data));}}}catch(error){console.log('Opportunities MCP not critical for startup, continuing...');}};const getStatusIcon=status=>{switch(status){case'completed':return'✅';case'running':return'🔄';default:return'⏳';}};return/*#__PURE__*/_jsx(\"div\",{className:\"system-initializer\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"init-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"init-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"logo-animation\",children:/*#__PURE__*/_jsx(\"span\",{className:\"logo-icon\",children:\"\\uD83D\\uDE80\"})}),/*#__PURE__*/_jsx(\"h1\",{children:\"Starting SignalDesk\"}),/*#__PURE__*/_jsx(\"p\",{className:\"init-subtitle\",children:\"Preparing your intelligence dashboard...\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"progress-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:\"\".concat(progress,\"%\")}})}),/*#__PURE__*/_jsxs(\"span\",{className:\"progress-text\",children:[Math.round(progress),\"%\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"current-task\",children:currentTask}),/*#__PURE__*/_jsx(\"div\",{className:\"task-list\",children:tasks.map(task=>/*#__PURE__*/_jsxs(\"div\",{className:\"task-item \".concat(task.status),children:[/*#__PURE__*/_jsx(\"span\",{className:\"task-icon\",children:getStatusIcon(task.status)}),/*#__PURE__*/_jsx(\"span\",{className:\"task-name\",children:task.name})]},task.id))}),initStatus==='complete'&&/*#__PURE__*/_jsxs(\"div\",{className:\"complete-message\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"checkmark\",children:\"\\u2713\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Ready!\"})]})]})});};export default SystemInitializer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}