{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/components/NivDatabaseChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { supabase } from '../config/supabase';\nimport { Send, Bot, User, Loader, FileText, CheckCircle, AlertCircle, Edit3, Eye, Download, Save } from 'lucide-react';\nimport './NivRealtimeChat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NivDatabaseChat = () => {\n  _s();\n  // State management\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [artifacts, setArtifacts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sessionId] = useState(`session-${Date.now()}`);\n  const [selectedArtifact, setSelectedArtifact] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [error, setError] = useState(null);\n\n  // Refs\n  const messagesEndRef = useRef(null);\n  const pollingInterval = useRef(null);\n\n  // Initialize and load data\n  useEffect(() => {\n    loadSessionData();\n\n    // Poll for updates every 2 seconds when loading\n    if (isLoading) {\n      pollingInterval.current = setInterval(() => {\n        loadSessionData();\n      }, 2000);\n    }\n    return () => {\n      if (pollingInterval.current) {\n        clearInterval(pollingInterval.current);\n      }\n    };\n  }, [sessionId, isLoading]);\n\n  // Auto-scroll to bottom when messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const loadSessionData = async () => {\n    try {\n      // Load existing conversations\n      const {\n        data: convos,\n        error: convoError\n      } = await supabase.from('niv_conversations').select('*').eq('session_id', sessionId).order('created_at', {\n        ascending: true\n      });\n      if (convoError) {\n        console.error('Error loading conversations:', convoError);\n        setError(`Failed to load conversations: ${convoError.message}`);\n      } else if (convos) {\n        setMessages(convos);\n      }\n\n      // Load existing artifacts\n      const {\n        data: arts,\n        error: artError\n      } = await supabase.from('niv_artifacts').select('*').eq('session_id', sessionId).order('created_at', {\n        ascending: true\n      });\n      if (artError) {\n        console.error('Error loading artifacts:', artError);\n        setError(`Failed to load artifacts: ${artError.message}`);\n      } else if (arts) {\n        setArtifacts(arts);\n      }\n    } catch (err) {\n      console.error('Error in loadSessionData:', err);\n      setError(`Failed to load data: ${err.message}`);\n    }\n  };\n  const saveMessageToDatabase = async (role, content, artifactId = null) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('niv_conversations').insert({\n        session_id: sessionId,\n        role: role,\n        content: content,\n        artifact_id: artifactId,\n        mcps_used: []\n      }).select().single();\n      if (error) {\n        console.error('Error saving message:', error);\n        setError(`Failed to save message: ${error.message}`);\n        return null;\n      }\n      return data;\n    } catch (err) {\n      console.error('Error in saveMessageToDatabase:', err);\n      setError(`Failed to save message: ${err.message}`);\n      return null;\n    }\n  };\n  const createArtifact = async (type, title, content) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('niv_artifacts').insert({\n        session_id: sessionId,\n        type: type,\n        title: title,\n        content: content,\n        metadata: {},\n        mcp_sources: [],\n        status: 'draft'\n      }).select().single();\n      if (error) {\n        console.error('Error creating artifact:', error);\n        setError(`Failed to create artifact: ${error.message}`);\n        return null;\n      }\n      return data;\n    } catch (err) {\n      console.error('Error in createArtifact:', err);\n      setError(`Failed to create artifact: ${err.message}`);\n      return null;\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!message.trim()) return;\n    const userMessage = message.trim();\n    setMessage('');\n    setIsLoading(true);\n    setError(null);\n\n    // Save user message to database\n    const savedUserMessage = await saveMessageToDatabase('user', userMessage);\n    if (savedUserMessage) {\n      setMessages(prev => [...prev, savedUserMessage]);\n    }\n    try {\n      // Call the Edge Function\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('niv-database', {\n        body: {\n          message: userMessage,\n          sessionId: sessionId,\n          conversationHistory: messages.map(m => ({\n            role: m.role,\n            content: m.content\n          }))\n        }\n      });\n      if (error) {\n        console.error('Edge function error:', error);\n        setError(`Failed to get response: ${error.message}`);\n        const errorMessage = await saveMessageToDatabase('assistant', `Sorry, I encountered an error: ${error.message}`);\n        if (errorMessage) {\n          setMessages(prev => [...prev, errorMessage]);\n        }\n      } else if (data) {\n        // Save assistant response\n        const assistantMessage = await saveMessageToDatabase('assistant', data.response || data.message || 'I processed your request.');\n        if (assistantMessage) {\n          setMessages(prev => [...prev, assistantMessage]);\n        }\n\n        // Create artifacts if any\n        if (data.artifacts && Array.isArray(data.artifacts)) {\n          for (const artifact of data.artifacts) {\n            const createdArtifact = await createArtifact(artifact.type || 'document', artifact.title || 'Untitled', artifact.content || {});\n            if (createdArtifact) {\n              setArtifacts(prev => [...prev, createdArtifact]);\n              showNotification(`‚ú® Created: ${createdArtifact.title}`, 'success');\n            }\n          }\n        }\n\n        // Check for save button content\n        if (data.saveButton || data.shouldSave) {\n          const saveArtifact = await createArtifact('document', 'Strategic Content', {\n            text: data.response || data.message\n          });\n          if (saveArtifact) {\n            setArtifacts(prev => [...prev, saveArtifact]);\n            showNotification('üíæ Content saved to workspace', 'success');\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Error calling edge function:', err);\n      setError(`Failed to process request: ${err.message}`);\n      const errorMessage = await saveMessageToDatabase('assistant', `Sorry, I couldn't process your request: ${err.message}`);\n      if (errorMessage) {\n        setMessages(prev => [...prev, errorMessage]);\n      }\n    } finally {\n      setIsLoading(false);\n      // Reload data to ensure sync\n      await loadSessionData();\n    }\n  };\n  const showNotification = (message, type = 'info') => {\n    // Simple console notification for now\n    console.log(`[${type.toUpperCase()}] ${message}`);\n  };\n  const openArtifactInWorkspace = artifact => {\n    setSelectedArtifact(artifact);\n    // You can implement workspace opening logic here\n    console.log('Opening artifact in workspace:', artifact);\n  };\n  const updateArtifact = async (artifactId, updates) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('niv_artifacts').update(updates).eq('id', artifactId).select().single();\n      if (error) {\n        console.error('Error updating artifact:', error);\n        setError(`Failed to update artifact: ${error.message}`);\n        return null;\n      }\n\n      // Update local state\n      setArtifacts(prev => prev.map(a => a.id === artifactId ? data : a));\n      showNotification(`üìù Updated: ${data.title}`, 'success');\n      return data;\n    } catch (err) {\n      console.error('Error in updateArtifact:', err);\n      setError(`Failed to update artifact: ${err.message}`);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"niv-realtime-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"niv-chat-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"niv-chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(Bot, {\n          className: \"niv-header-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Niv - Your AI PR Strategist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `connection-status ${connectionStatus}`,\n          children: [connectionStatus === 'connected' ? /*#__PURE__*/_jsxDEV(CheckCircle, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 49\n          }, this) : /*#__PURE__*/_jsxDEV(AlertCircle, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 77\n          }, this), connectionStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-banner\",\n        children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), error, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setError(null),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"niv-messages\",\n        children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `niv-message ${msg.role}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-icon\",\n            children: msg.role === 'user' ? /*#__PURE__*/_jsxDEV(User, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(Bot, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 61\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-text\",\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this), msg.artifact_id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-artifact-link\",\n              children: [/*#__PURE__*/_jsxDEV(FileText, {\n                size: 14\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Artifact created\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)]\n        }, msg.id || idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"niv-message assistant\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-icon\",\n            children: /*#__PURE__*/_jsxDEV(Bot, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(Loader, {\n              className: \"spinner\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Niv is thinking...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"niv-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          onKeyPress: e => e.key === 'Enter' && !isLoading && handleSendMessage(),\n          placeholder: \"Ask Niv about PR strategy, media lists, or content creation...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: isLoading || !message.trim(),\n          className: \"send-button\",\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"niv-artifacts-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"artifacts-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Artifacts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"artifact-count\",\n          children: artifacts.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"artifacts-list\",\n        children: artifacts.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-artifacts\",\n          children: [/*#__PURE__*/_jsxDEV(FileText, {\n            size: 32\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No artifacts yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Artifacts will appear here when Niv creates content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this) : artifacts.map(artifact => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"artifact-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"artifact-header\",\n            children: [/*#__PURE__*/_jsxDEV(FileText, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"artifact-type\",\n              children: artifact.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: artifact.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"artifact-meta\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: new Date(artifact.created_at).toLocaleTimeString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"artifact-status\",\n              children: artifact.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"artifact-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => openArtifactInWorkspace(artifact),\n              children: [/*#__PURE__*/_jsxDEV(Eye, {\n                size: 14\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 21\n              }, this), \" View\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => openArtifactInWorkspace(artifact),\n              children: [/*#__PURE__*/_jsxDEV(Edit3, {\n                size: 14\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 21\n              }, this), \" Edit\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: [/*#__PURE__*/_jsxDEV(Download, {\n                size: 14\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 21\n              }, this), \" Export\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 17\n          }, this)]\n        }, artifact.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), selectedArtifact && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"artifact-workspace-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"workspace-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: selectedArtifact.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedArtifact(null),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"workspace-content\",\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(selectedArtifact.content, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"workspace-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateArtifact(selectedArtifact.id, {\n            status: 'published'\n          }),\n          children: [/*#__PURE__*/_jsxDEV(Save, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this), \" Save Changes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n};\n_s(NivDatabaseChat, \"dLEy1uFO9Upo21fMjncUyWN/VE8=\");\n_c = NivDatabaseChat;\nexport default NivDatabaseChat;\nvar _c;\n$RefreshReg$(_c, \"NivDatabaseChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","supabase","Send","Bot","User","Loader","FileText","CheckCircle","AlertCircle","Edit3","Eye","Download","Save","jsxDEV","_jsxDEV","NivDatabaseChat","_s","message","setMessage","messages","setMessages","artifacts","setArtifacts","isLoading","setIsLoading","sessionId","Date","now","selectedArtifact","setSelectedArtifact","connectionStatus","setConnectionStatus","error","setError","messagesEndRef","pollingInterval","loadSessionData","current","setInterval","clearInterval","scrollToBottom","_messagesEndRef$curre","scrollIntoView","behavior","data","convos","convoError","from","select","eq","order","ascending","console","arts","artError","err","saveMessageToDatabase","role","content","artifactId","insert","session_id","artifact_id","mcps_used","single","createArtifact","type","title","metadata","mcp_sources","status","handleSendMessage","trim","userMessage","savedUserMessage","prev","functions","invoke","body","conversationHistory","map","m","errorMessage","assistantMessage","response","Array","isArray","artifact","createdArtifact","showNotification","saveButton","shouldSave","saveArtifact","text","log","toUpperCase","openArtifactInWorkspace","updateArtifact","updates","update","a","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","onClick","msg","idx","ref","value","onChange","e","target","onKeyPress","key","placeholder","disabled","length","created_at","toLocaleTimeString","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/components/NivDatabaseChat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { supabase } from '../config/supabase';\nimport { \n  Send, \n  Bot, \n  User, \n  Loader, \n  FileText, \n  CheckCircle, \n  AlertCircle,\n  Edit3,\n  Eye,\n  Download,\n  Save\n} from 'lucide-react';\nimport './NivRealtimeChat.css';\n\nconst NivDatabaseChat = () => {\n  // State management\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [artifacts, setArtifacts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sessionId] = useState(`session-${Date.now()}`);\n  const [selectedArtifact, setSelectedArtifact] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [error, setError] = useState(null);\n  \n  // Refs\n  const messagesEndRef = useRef(null);\n  const pollingInterval = useRef(null);\n  \n  // Initialize and load data\n  useEffect(() => {\n    loadSessionData();\n    \n    // Poll for updates every 2 seconds when loading\n    if (isLoading) {\n      pollingInterval.current = setInterval(() => {\n        loadSessionData();\n      }, 2000);\n    }\n    \n    return () => {\n      if (pollingInterval.current) {\n        clearInterval(pollingInterval.current);\n      }\n    };\n  }, [sessionId, isLoading]);\n  \n  // Auto-scroll to bottom when messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  \n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n  \n  const loadSessionData = async () => {\n    try {\n      // Load existing conversations\n      const { data: convos, error: convoError } = await supabase\n        .from('niv_conversations')\n        .select('*')\n        .eq('session_id', sessionId)\n        .order('created_at', { ascending: true });\n      \n      if (convoError) {\n        console.error('Error loading conversations:', convoError);\n        setError(`Failed to load conversations: ${convoError.message}`);\n      } else if (convos) {\n        setMessages(convos);\n      }\n      \n      // Load existing artifacts\n      const { data: arts, error: artError } = await supabase\n        .from('niv_artifacts')\n        .select('*')\n        .eq('session_id', sessionId)\n        .order('created_at', { ascending: true });\n      \n      if (artError) {\n        console.error('Error loading artifacts:', artError);\n        setError(`Failed to load artifacts: ${artError.message}`);\n      } else if (arts) {\n        setArtifacts(arts);\n      }\n    } catch (err) {\n      console.error('Error in loadSessionData:', err);\n      setError(`Failed to load data: ${err.message}`);\n    }\n  };\n  \n  const saveMessageToDatabase = async (role, content, artifactId = null) => {\n    try {\n      const { data, error } = await supabase\n        .from('niv_conversations')\n        .insert({\n          session_id: sessionId,\n          role: role,\n          content: content,\n          artifact_id: artifactId,\n          mcps_used: []\n        })\n        .select()\n        .single();\n      \n      if (error) {\n        console.error('Error saving message:', error);\n        setError(`Failed to save message: ${error.message}`);\n        return null;\n      }\n      \n      return data;\n    } catch (err) {\n      console.error('Error in saveMessageToDatabase:', err);\n      setError(`Failed to save message: ${err.message}`);\n      return null;\n    }\n  };\n  \n  const createArtifact = async (type, title, content) => {\n    try {\n      const { data, error } = await supabase\n        .from('niv_artifacts')\n        .insert({\n          session_id: sessionId,\n          type: type,\n          title: title,\n          content: content,\n          metadata: {},\n          mcp_sources: [],\n          status: 'draft'\n        })\n        .select()\n        .single();\n      \n      if (error) {\n        console.error('Error creating artifact:', error);\n        setError(`Failed to create artifact: ${error.message}`);\n        return null;\n      }\n      \n      return data;\n    } catch (err) {\n      console.error('Error in createArtifact:', err);\n      setError(`Failed to create artifact: ${err.message}`);\n      return null;\n    }\n  };\n  \n  const handleSendMessage = async () => {\n    if (!message.trim()) return;\n    \n    const userMessage = message.trim();\n    setMessage('');\n    setIsLoading(true);\n    setError(null);\n    \n    // Save user message to database\n    const savedUserMessage = await saveMessageToDatabase('user', userMessage);\n    if (savedUserMessage) {\n      setMessages(prev => [...prev, savedUserMessage]);\n    }\n    \n    try {\n      // Call the Edge Function\n      const { data, error } = await supabase.functions.invoke('niv-database', {\n        body: {\n          message: userMessage,\n          sessionId: sessionId,\n          conversationHistory: messages.map(m => ({\n            role: m.role,\n            content: m.content\n          }))\n        }\n      });\n      \n      if (error) {\n        console.error('Edge function error:', error);\n        setError(`Failed to get response: ${error.message}`);\n        const errorMessage = await saveMessageToDatabase('assistant', `Sorry, I encountered an error: ${error.message}`);\n        if (errorMessage) {\n          setMessages(prev => [...prev, errorMessage]);\n        }\n      } else if (data) {\n        // Save assistant response\n        const assistantMessage = await saveMessageToDatabase('assistant', data.response || data.message || 'I processed your request.');\n        if (assistantMessage) {\n          setMessages(prev => [...prev, assistantMessage]);\n        }\n        \n        // Create artifacts if any\n        if (data.artifacts && Array.isArray(data.artifacts)) {\n          for (const artifact of data.artifacts) {\n            const createdArtifact = await createArtifact(\n              artifact.type || 'document',\n              artifact.title || 'Untitled',\n              artifact.content || {}\n            );\n            if (createdArtifact) {\n              setArtifacts(prev => [...prev, createdArtifact]);\n              showNotification(`‚ú® Created: ${createdArtifact.title}`, 'success');\n            }\n          }\n        }\n        \n        // Check for save button content\n        if (data.saveButton || data.shouldSave) {\n          const saveArtifact = await createArtifact(\n            'document',\n            'Strategic Content',\n            { text: data.response || data.message }\n          );\n          if (saveArtifact) {\n            setArtifacts(prev => [...prev, saveArtifact]);\n            showNotification('üíæ Content saved to workspace', 'success');\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Error calling edge function:', err);\n      setError(`Failed to process request: ${err.message}`);\n      const errorMessage = await saveMessageToDatabase('assistant', `Sorry, I couldn't process your request: ${err.message}`);\n      if (errorMessage) {\n        setMessages(prev => [...prev, errorMessage]);\n      }\n    } finally {\n      setIsLoading(false);\n      // Reload data to ensure sync\n      await loadSessionData();\n    }\n  };\n  \n  const showNotification = (message, type = 'info') => {\n    // Simple console notification for now\n    console.log(`[${type.toUpperCase()}] ${message}`);\n  };\n  \n  const openArtifactInWorkspace = (artifact) => {\n    setSelectedArtifact(artifact);\n    // You can implement workspace opening logic here\n    console.log('Opening artifact in workspace:', artifact);\n  };\n  \n  const updateArtifact = async (artifactId, updates) => {\n    try {\n      const { data, error } = await supabase\n        .from('niv_artifacts')\n        .update(updates)\n        .eq('id', artifactId)\n        .select()\n        .single();\n      \n      if (error) {\n        console.error('Error updating artifact:', error);\n        setError(`Failed to update artifact: ${error.message}`);\n        return null;\n      }\n      \n      // Update local state\n      setArtifacts(prev => \n        prev.map(a => a.id === artifactId ? data : a)\n      );\n      \n      showNotification(`üìù Updated: ${data.title}`, 'success');\n      return data;\n    } catch (err) {\n      console.error('Error in updateArtifact:', err);\n      setError(`Failed to update artifact: ${err.message}`);\n      return null;\n    }\n  };\n  \n  return (\n    <div className=\"niv-realtime-container\">\n      <div className=\"niv-chat-section\">\n        <div className=\"niv-chat-header\">\n          <Bot className=\"niv-header-icon\" />\n          <h2>Niv - Your AI PR Strategist</h2>\n          <span className={`connection-status ${connectionStatus}`}>\n            {connectionStatus === 'connected' ? <CheckCircle size={16} /> : <AlertCircle size={16} />}\n            {connectionStatus}\n          </span>\n        </div>\n        \n        {error && (\n          <div className=\"error-banner\">\n            <AlertCircle size={16} />\n            {error}\n            <button onClick={() => setError(null)}>√ó</button>\n          </div>\n        )}\n        \n        <div className=\"niv-messages\">\n          {messages.map((msg, idx) => (\n            <div key={msg.id || idx} className={`niv-message ${msg.role}`}>\n              <div className=\"message-icon\">\n                {msg.role === 'user' ? <User size={20} /> : <Bot size={20} />}\n              </div>\n              <div className=\"message-content\">\n                <div className=\"message-text\">{msg.content}</div>\n                {msg.artifact_id && (\n                  <div className=\"message-artifact-link\">\n                    <FileText size={14} />\n                    <span>Artifact created</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"niv-message assistant\">\n              <div className=\"message-icon\">\n                <Bot size={20} />\n              </div>\n              <div className=\"message-content\">\n                <Loader className=\"spinner\" size={20} />\n                <span>Niv is thinking...</span>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n        \n        <div className=\"niv-input-area\">\n          <input\n            type=\"text\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && !isLoading && handleSendMessage()}\n            placeholder=\"Ask Niv about PR strategy, media lists, or content creation...\"\n            disabled={isLoading}\n          />\n          <button \n            onClick={handleSendMessage} \n            disabled={isLoading || !message.trim()}\n            className=\"send-button\"\n          >\n            <Send size={20} />\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"niv-artifacts-panel\">\n        <div className=\"artifacts-header\">\n          <h3>Artifacts</h3>\n          <span className=\"artifact-count\">{artifacts.length}</span>\n        </div>\n        \n        <div className=\"artifacts-list\">\n          {artifacts.length === 0 ? (\n            <div className=\"no-artifacts\">\n              <FileText size={32} />\n              <p>No artifacts yet</p>\n              <span>Artifacts will appear here when Niv creates content</span>\n            </div>\n          ) : (\n            artifacts.map(artifact => (\n              <div key={artifact.id} className=\"artifact-card\">\n                <div className=\"artifact-header\">\n                  <FileText size={16} />\n                  <span className=\"artifact-type\">{artifact.type}</span>\n                </div>\n                <h4>{artifact.title}</h4>\n                <div className=\"artifact-meta\">\n                  <span>{new Date(artifact.created_at).toLocaleTimeString()}</span>\n                  <span className=\"artifact-status\">{artifact.status}</span>\n                </div>\n                <div className=\"artifact-actions\">\n                  <button onClick={() => openArtifactInWorkspace(artifact)}>\n                    <Eye size={14} /> View\n                  </button>\n                  <button onClick={() => openArtifactInWorkspace(artifact)}>\n                    <Edit3 size={14} /> Edit\n                  </button>\n                  <button>\n                    <Download size={14} /> Export\n                  </button>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      \n      {selectedArtifact && (\n        <div className=\"artifact-workspace-modal\">\n          <div className=\"workspace-header\">\n            <h3>{selectedArtifact.title}</h3>\n            <button onClick={() => setSelectedArtifact(null)}>√ó</button>\n          </div>\n          <div className=\"workspace-content\">\n            <pre>{JSON.stringify(selectedArtifact.content, null, 2)}</pre>\n          </div>\n          <div className=\"workspace-actions\">\n            <button onClick={() => updateArtifact(selectedArtifact.id, { status: 'published' })}>\n              <Save size={16} /> Save Changes\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NivDatabaseChat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}