{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Centralized Cache Manager - Single source of truth for all caching\n// Handles clearing, saving, and loading consistently\nclass CacheManager{constructor(){this.CACHE_PREFIX='signaldesk_';this.CACHE_KEYS={ORGANIZATION:'signaldesk_organization',COMPLETE_PROFILE:'signaldesk_complete_profile',INTELLIGENCE:'signaldesk_intelligence_cache',LAST_SYNTHESIS:'signaldesk_last_synthesis',INTELLIGENCE_HUB:'signaldesk_intelligence_hub',ONBOARDING_CONFIG:'onboarding_config',CURRENT_ORGANIZATION:'current_organization'};// Cache duration in milliseconds\nthis.CACHE_DURATION={ORGANIZATION:24*60*60*1000,// 24 hours\nINTELLIGENCE:30*60*1000,// 30 minutes\nSYNTHESIS:30*60*1000// 30 minutes\n};// Initialize on construction\nthis.init();}init(){console.log('üîß Cache Manager initialized');// Check if we should clear stale data on app start\nthis.clearStaleData();}// Clear ALL SignalDesk data - for fresh start\nclearAll(){console.log('üóëÔ∏è Clearing ALL SignalDesk cache data...');const keys=Object.keys(localStorage);let cleared=0;keys.forEach(key=>{if(key.includes('signaldesk')||key.includes('onboarding')||key.includes('organization')||key.includes('intelligence')||key.includes('opportunity')){localStorage.removeItem(key);cleared++;}});console.log(\"\\u2705 Cleared \".concat(cleared,\" cache items\"));return cleared;}// Clear only intelligence/synthesis data (keep organization)\nclearIntelligence(){console.log('üóëÔ∏è Clearing ALL intelligence data...');// Clear primary intelligence keys\nlocalStorage.removeItem(this.CACHE_KEYS.INTELLIGENCE);localStorage.removeItem(this.CACHE_KEYS.LAST_SYNTHESIS);localStorage.removeItem(this.CACHE_KEYS.INTELLIGENCE_HUB);// Clear any other intelligence-related keys that might exist\nconst allKeys=Object.keys(localStorage);allKeys.forEach(key=>{if((key.includes('intelligence')||key.includes('synthesis')||key.includes('gathering')||key.includes('opportunity')||key.includes('cache'))&&!key.includes('organization')&&!key.includes('profile')){console.log(\"  \\uD83D\\uDDD1\\uFE0F Removing: \".concat(key));localStorage.removeItem(key);}});}// Clear stale data based on age\nclearStaleData(){const now=Date.now();// Check intelligence cache age\nconst intelligenceCache=this.get(this.CACHE_KEYS.INTELLIGENCE);if(intelligenceCache&&intelligenceCache.timestamp){const age=now-new Date(intelligenceCache.timestamp).getTime();if(age>this.CACHE_DURATION.INTELLIGENCE){console.log('üóëÔ∏è Clearing stale intelligence cache');this.clearIntelligence();}}// Check synthesis cache age\nconst synthesisCache=this.get(this.CACHE_KEYS.LAST_SYNTHESIS);if(synthesisCache&&synthesisCache.timestamp){const age=now-new Date(synthesisCache.timestamp).getTime();if(age>this.CACHE_DURATION.SYNTHESIS){console.log('üóëÔ∏è Clearing stale synthesis cache');localStorage.removeItem(this.CACHE_KEYS.LAST_SYNTHESIS);}}}// Save data with timestamp\nsave(key,data){let addTimestamp=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;try{const dataToSave=addTimestamp?_objectSpread(_objectSpread({},data),{},{_cachedAt:new Date().toISOString()}):data;localStorage.setItem(key,JSON.stringify(dataToSave));console.log(\"\\uD83D\\uDCBE Saved to cache: \".concat(key));return true;}catch(error){console.error(\"Failed to save \".concat(key,\":\"),error);return false;}}// Get data from cache\nget(key){try{const data=localStorage.getItem(key);if(!data)return null;return JSON.parse(data);}catch(error){console.error(\"Failed to get \".concat(key,\":\"),error);return null;}}// Remove specific key\nremove(key){localStorage.removeItem(key);console.log(\"\\uD83D\\uDDD1\\uFE0F Removed from cache: \".concat(key));}// Save organization data\nsaveOrganization(orgData){return this.save(this.CACHE_KEYS.ORGANIZATION,orgData);}// Get organization data\ngetOrganization(){return this.get(this.CACHE_KEYS.ORGANIZATION);}// Save complete profile (org + stakeholders)\nsaveCompleteProfile(profile){return this.save(this.CACHE_KEYS.COMPLETE_PROFILE,profile);}// Get complete profile\ngetCompleteProfile(){return this.get(this.CACHE_KEYS.COMPLETE_PROFILE);}// Save intelligence data\nsaveIntelligence(intelligence){return this.save(this.CACHE_KEYS.INTELLIGENCE,{data:intelligence,timestamp:new Date().toISOString()},false);}// Get intelligence data (with age check)\ngetIntelligence(){const cached=this.get(this.CACHE_KEYS.INTELLIGENCE);if(!cached||!cached.timestamp)return null;// Check age\nconst age=Date.now()-new Date(cached.timestamp).getTime();if(age>this.CACHE_DURATION.INTELLIGENCE){console.log('‚ö†Ô∏è Intelligence cache is stale');this.remove(this.CACHE_KEYS.INTELLIGENCE);return null;}return cached.data;}// Save synthesis data\nsaveSynthesis(synthesis){return this.save(this.CACHE_KEYS.LAST_SYNTHESIS,synthesis);}// Get synthesis data\ngetSynthesis(){return this.get(this.CACHE_KEYS.LAST_SYNTHESIS);}// Check if user just onboarded (within last 5 minutes)\nisJustOnboarded(){const profile=this.getCompleteProfile();if(!profile||!profile._cachedAt)return false;const age=Date.now()-new Date(profile._cachedAt).getTime();return age<5*60*1000;// 5 minutes\n}// Start new search (clear intelligence but keep organization)\nstartNewSearch(){console.log('üîÑ Starting new search...');this.clearIntelligence();return true;}// Get cache status for debugging\ngetCacheStatus(){const status={};Object.entries(this.CACHE_KEYS).forEach(_ref=>{let[name,key]=_ref;const data=localStorage.getItem(key);status[name]={exists:!!data,size:data?data.length:0,key:key};});return status;}}// Export singleton instance\nconst cacheManager=new CacheManager();export default cacheManager;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}