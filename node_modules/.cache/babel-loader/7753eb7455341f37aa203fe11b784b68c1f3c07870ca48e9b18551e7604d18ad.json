{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/context/IntelligenceContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create context for global intelligence state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IntelligenceContext = /*#__PURE__*/createContext();\n\n// Cache expiration time (in milliseconds) - 5 minutes default\nconst CACHE_EXPIRATION = 5 * 60 * 1000;\nexport const IntelligenceProvider = ({\n  children\n}) => {\n  _s();\n  // Intelligence state\n  const [intelligenceData, setIntelligenceData] = useState({\n    unified: null,\n    competitors: {},\n    topics: {},\n    lastFetch: null\n  });\n\n  // Organization state\n  const [organizationData, setOrganizationData] = useState({\n    id: null,\n    name: null,\n    targets: [],\n    strategy: null\n  });\n\n  // Opportunity state\n  const [opportunityData, setOpportunityData] = useState({\n    analysis: null,\n    concepts: [],\n    selectedConcept: null,\n    executionPlan: null,\n    lastAnalysis: null\n  });\n\n  // Source configuration state\n  const [sourceData, setSourceData] = useState({\n    sources: [],\n    validated: false,\n    lastUpdate: null\n  });\n\n  // Loading states\n  const [loadingStates, setLoadingStates] = useState({\n    intelligence: false,\n    opportunities: false,\n    sources: false\n  });\n\n  // Check if data is stale\n  const isDataStale = lastFetch => {\n    if (!lastFetch) return true;\n    return Date.now() - lastFetch > CACHE_EXPIRATION;\n  };\n\n  // Update intelligence data\n  const updateIntelligenceData = data => {\n    setIntelligenceData({\n      ...data,\n      lastFetch: Date.now()\n    });\n  };\n\n  // Update organization data\n  const updateOrganizationData = data => {\n    // Check if targets have changed\n    if (data.targets && organizationData.targets) {\n      const prevTargetIds = organizationData.targets.map(t => t.id).sort().join(',');\n      const newTargetIds = data.targets.map(t => t.id).sort().join(',');\n      if (prevTargetIds !== newTargetIds) {\n        console.log('Organization targets changed, clearing opportunity data');\n        // Clear opportunity data when targets change\n        setOpportunityData({\n          analysis: null,\n          concepts: [],\n          selectedConcept: null,\n          executionPlan: null,\n          lastAnalysis: null\n        });\n      }\n    }\n    setOrganizationData(prev => ({\n      ...prev,\n      ...data\n    }));\n  };\n\n  // Update opportunity data\n  const updateOpportunityData = data => {\n    setOpportunityData(prev => ({\n      ...prev,\n      ...data,\n      lastAnalysis: data.analysis ? Date.now() : prev.lastAnalysis\n    }));\n  };\n\n  // Update source data\n  const updateSourceData = data => {\n    setSourceData({\n      ...data,\n      lastUpdate: Date.now()\n    });\n  };\n\n  // Clear specific data type\n  const clearData = dataType => {\n    switch (dataType) {\n      case 'intelligence':\n        setIntelligenceData({\n          unified: null,\n          competitors: {},\n          topics: {},\n          lastFetch: null\n        });\n        break;\n      case 'opportunities':\n        setOpportunityData({\n          analysis: null,\n          concepts: [],\n          selectedConcept: null,\n          executionPlan: null,\n          lastAnalysis: null\n        });\n        break;\n      case 'sources':\n        setSourceData({\n          sources: [],\n          validated: false,\n          lastUpdate: null\n        });\n        break;\n      case 'all':\n        // Clear all data\n        setIntelligenceData({\n          unified: null,\n          competitors: {},\n          topics: {},\n          lastFetch: null\n        });\n        setOpportunityData({\n          analysis: null,\n          concepts: [],\n          selectedConcept: null,\n          executionPlan: null,\n          lastAnalysis: null\n        });\n        setSourceData({\n          sources: [],\n          validated: false,\n          lastUpdate: null\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Manual refresh function\n  const refreshData = dataType => {\n    clearData(dataType);\n    // Component will re-fetch when it detects null data\n  };\n\n  // Persist to localStorage\n  useEffect(() => {\n    const state = {\n      intelligence: intelligenceData,\n      organization: organizationData,\n      opportunity: opportunityData,\n      source: sourceData\n    };\n    localStorage.setItem('signaldesk_state', JSON.stringify(state));\n  }, [intelligenceData, organizationData, opportunityData, sourceData]);\n\n  // Load from localStorage on mount\n  useEffect(() => {\n    const savedState = localStorage.getItem('signaldesk_state');\n    if (savedState) {\n      try {\n        var _parsed$intelligence, _parsed$opportunity, _parsed$source;\n        const parsed = JSON.parse(savedState);\n\n        // Only restore if data is not too old (24 hours)\n        const dayAgo = Date.now() - 24 * 60 * 60 * 1000;\n        if (((_parsed$intelligence = parsed.intelligence) === null || _parsed$intelligence === void 0 ? void 0 : _parsed$intelligence.lastFetch) > dayAgo) {\n          setIntelligenceData(parsed.intelligence);\n        }\n        if (parsed.organization) {\n          setOrganizationData(parsed.organization);\n        }\n        if (((_parsed$opportunity = parsed.opportunity) === null || _parsed$opportunity === void 0 ? void 0 : _parsed$opportunity.lastAnalysis) > dayAgo) {\n          setOpportunityData(parsed.opportunity);\n        }\n        if (((_parsed$source = parsed.source) === null || _parsed$source === void 0 ? void 0 : _parsed$source.lastUpdate) > dayAgo) {\n          setSourceData(parsed.source);\n        }\n      } catch (error) {\n        console.error('Error loading saved state:', error);\n      }\n    }\n  }, []);\n  const value = {\n    // Data\n    intelligenceData,\n    organizationData,\n    opportunityData,\n    sourceData,\n    loadingStates,\n    // Update functions\n    updateIntelligenceData,\n    updateOrganizationData,\n    updateOpportunityData,\n    updateSourceData,\n    setLoadingStates,\n    // Utility functions\n    isDataStale,\n    clearData,\n    refreshData\n  };\n  return /*#__PURE__*/_jsxDEV(IntelligenceContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the context\n_s(IntelligenceProvider, \"SxWdIComAVomlRBwIo788ohrBec=\");\n_c = IntelligenceProvider;\nexport const useIntelligence = () => {\n  _s2();\n  const context = useContext(IntelligenceContext);\n  if (!context) {\n    throw new Error('useIntelligence must be used within IntelligenceProvider');\n  }\n  return context;\n};\n_s2(useIntelligence, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"IntelligenceProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","IntelligenceContext","CACHE_EXPIRATION","IntelligenceProvider","children","_s","intelligenceData","setIntelligenceData","unified","competitors","topics","lastFetch","organizationData","setOrganizationData","id","name","targets","strategy","opportunityData","setOpportunityData","analysis","concepts","selectedConcept","executionPlan","lastAnalysis","sourceData","setSourceData","sources","validated","lastUpdate","loadingStates","setLoadingStates","intelligence","opportunities","isDataStale","Date","now","updateIntelligenceData","data","updateOrganizationData","prevTargetIds","map","t","sort","join","newTargetIds","console","log","prev","updateOpportunityData","updateSourceData","clearData","dataType","refreshData","state","organization","opportunity","source","localStorage","setItem","JSON","stringify","savedState","getItem","_parsed$intelligence","_parsed$opportunity","_parsed$source","parsed","parse","dayAgo","error","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useIntelligence","_s2","context","Error","$RefreshReg$"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/context/IntelligenceContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create context for global intelligence state\nconst IntelligenceContext = createContext();\n\n// Cache expiration time (in milliseconds) - 5 minutes default\nconst CACHE_EXPIRATION = 5 * 60 * 1000;\n\nexport const IntelligenceProvider = ({ children }) => {\n  // Intelligence state\n  const [intelligenceData, setIntelligenceData] = useState({\n    unified: null,\n    competitors: {},\n    topics: {},\n    lastFetch: null\n  });\n\n  // Organization state\n  const [organizationData, setOrganizationData] = useState({\n    id: null,\n    name: null,\n    targets: [],\n    strategy: null\n  });\n\n  // Opportunity state\n  const [opportunityData, setOpportunityData] = useState({\n    analysis: null,\n    concepts: [],\n    selectedConcept: null,\n    executionPlan: null,\n    lastAnalysis: null\n  });\n\n  // Source configuration state\n  const [sourceData, setSourceData] = useState({\n    sources: [],\n    validated: false,\n    lastUpdate: null\n  });\n\n  // Loading states\n  const [loadingStates, setLoadingStates] = useState({\n    intelligence: false,\n    opportunities: false,\n    sources: false\n  });\n\n  // Check if data is stale\n  const isDataStale = (lastFetch) => {\n    if (!lastFetch) return true;\n    return Date.now() - lastFetch > CACHE_EXPIRATION;\n  };\n\n  // Update intelligence data\n  const updateIntelligenceData = (data) => {\n    setIntelligenceData({\n      ...data,\n      lastFetch: Date.now()\n    });\n  };\n\n  // Update organization data\n  const updateOrganizationData = (data) => {\n    // Check if targets have changed\n    if (data.targets && organizationData.targets) {\n      const prevTargetIds = organizationData.targets.map(t => t.id).sort().join(',');\n      const newTargetIds = data.targets.map(t => t.id).sort().join(',');\n      \n      if (prevTargetIds !== newTargetIds) {\n        console.log('Organization targets changed, clearing opportunity data');\n        // Clear opportunity data when targets change\n        setOpportunityData({\n          analysis: null,\n          concepts: [],\n          selectedConcept: null,\n          executionPlan: null,\n          lastAnalysis: null\n        });\n      }\n    }\n    \n    setOrganizationData(prev => ({\n      ...prev,\n      ...data\n    }));\n  };\n\n  // Update opportunity data\n  const updateOpportunityData = (data) => {\n    setOpportunityData(prev => ({\n      ...prev,\n      ...data,\n      lastAnalysis: data.analysis ? Date.now() : prev.lastAnalysis\n    }));\n  };\n\n  // Update source data\n  const updateSourceData = (data) => {\n    setSourceData({\n      ...data,\n      lastUpdate: Date.now()\n    });\n  };\n\n  // Clear specific data type\n  const clearData = (dataType) => {\n    switch(dataType) {\n      case 'intelligence':\n        setIntelligenceData({\n          unified: null,\n          competitors: {},\n          topics: {},\n          lastFetch: null\n        });\n        break;\n      case 'opportunities':\n        setOpportunityData({\n          analysis: null,\n          concepts: [],\n          selectedConcept: null,\n          executionPlan: null,\n          lastAnalysis: null\n        });\n        break;\n      case 'sources':\n        setSourceData({\n          sources: [],\n          validated: false,\n          lastUpdate: null\n        });\n        break;\n      case 'all':\n        // Clear all data\n        setIntelligenceData({\n          unified: null,\n          competitors: {},\n          topics: {},\n          lastFetch: null\n        });\n        setOpportunityData({\n          analysis: null,\n          concepts: [],\n          selectedConcept: null,\n          executionPlan: null,\n          lastAnalysis: null\n        });\n        setSourceData({\n          sources: [],\n          validated: false,\n          lastUpdate: null\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Manual refresh function\n  const refreshData = (dataType) => {\n    clearData(dataType);\n    // Component will re-fetch when it detects null data\n  };\n\n  // Persist to localStorage\n  useEffect(() => {\n    const state = {\n      intelligence: intelligenceData,\n      organization: organizationData,\n      opportunity: opportunityData,\n      source: sourceData\n    };\n    localStorage.setItem('signaldesk_state', JSON.stringify(state));\n  }, [intelligenceData, organizationData, opportunityData, sourceData]);\n\n  // Load from localStorage on mount\n  useEffect(() => {\n    const savedState = localStorage.getItem('signaldesk_state');\n    if (savedState) {\n      try {\n        const parsed = JSON.parse(savedState);\n        \n        // Only restore if data is not too old (24 hours)\n        const dayAgo = Date.now() - (24 * 60 * 60 * 1000);\n        \n        if (parsed.intelligence?.lastFetch > dayAgo) {\n          setIntelligenceData(parsed.intelligence);\n        }\n        \n        if (parsed.organization) {\n          setOrganizationData(parsed.organization);\n        }\n        \n        if (parsed.opportunity?.lastAnalysis > dayAgo) {\n          setOpportunityData(parsed.opportunity);\n        }\n        \n        if (parsed.source?.lastUpdate > dayAgo) {\n          setSourceData(parsed.source);\n        }\n      } catch (error) {\n        console.error('Error loading saved state:', error);\n      }\n    }\n  }, []);\n\n  const value = {\n    // Data\n    intelligenceData,\n    organizationData,\n    opportunityData,\n    sourceData,\n    loadingStates,\n    \n    // Update functions\n    updateIntelligenceData,\n    updateOrganizationData,\n    updateOpportunityData,\n    updateSourceData,\n    setLoadingStates,\n    \n    // Utility functions\n    isDataStale,\n    clearData,\n    refreshData\n  };\n\n  return (\n    <IntelligenceContext.Provider value={value}>\n      {children}\n    </IntelligenceContext.Provider>\n  );\n};\n\n// Custom hook to use the context\nexport const useIntelligence = () => {\n  const context = useContext(IntelligenceContext);\n  if (!context) {\n    throw new Error('useIntelligence must be used within IntelligenceProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}