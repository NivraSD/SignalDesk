{"ast":null,"code":"export class WebSocketFactory {\n  static detectEnvironment() {\n    var _a;\n    if (typeof WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: WebSocket\n      };\n    }\n    if (typeof globalThis !== 'undefined' && typeof globalThis.WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: globalThis.WebSocket\n      };\n    }\n    if (typeof global !== 'undefined' && typeof global.WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: global.WebSocket\n      };\n    }\n    if (typeof globalThis !== 'undefined' && typeof globalThis.WebSocketPair !== 'undefined' && typeof globalThis.WebSocket === 'undefined') {\n      return {\n        type: 'cloudflare',\n        error: 'Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.',\n        workaround: 'Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime.'\n      };\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.EdgeRuntime || typeof navigator !== 'undefined' && ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes('Vercel-Edge'))) {\n      return {\n        type: 'unsupported',\n        error: 'Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.',\n        workaround: 'Use serverless functions or a different deployment target for WebSocket functionality.'\n      };\n    }\n    if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n      const nodeVersion = parseInt(process.versions.node.split('.')[0]);\n      // Node.js 22+ should have native WebSocket\n      if (nodeVersion >= 22) {\n        // Check if native WebSocket is available (should be in Node.js 22+)\n        if (typeof globalThis.WebSocket !== 'undefined') {\n          return {\n            type: 'native',\n            constructor: globalThis.WebSocket\n          };\n        }\n        // If not available, user needs to provide it\n        return {\n          type: 'unsupported',\n          error: \"Node.js \".concat(nodeVersion, \" detected but native WebSocket not found.\"),\n          workaround: 'Provide a WebSocket implementation via the transport option.'\n        };\n      }\n      // Node.js < 22 doesn't have native WebSocket\n      return {\n        type: 'unsupported',\n        error: \"Node.js \".concat(nodeVersion, \" detected without native WebSocket support.\"),\n        workaround: 'For Node.js < 22, install \"ws\" package and provide it via the transport option:\\n' + 'import ws from \"ws\"\\n' + 'new RealtimeClient(url, { transport: ws })'\n      };\n    }\n    return {\n      type: 'unsupported',\n      error: 'Unknown JavaScript runtime without WebSocket support.',\n      workaround: \"Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation.\"\n    };\n  }\n  static getWebSocketConstructor() {\n    const env = this.detectEnvironment();\n    if (env.constructor) {\n      return env.constructor;\n    }\n    let errorMessage = env.error || 'WebSocket not supported in this environment.';\n    if (env.workaround) {\n      errorMessage += \"\\n\\nSuggested solution: \".concat(env.workaround);\n    }\n    throw new Error(errorMessage);\n  }\n  static createWebSocket(url, protocols) {\n    const WS = this.getWebSocketConstructor();\n    return new WS(url, protocols);\n  }\n  static isWebSocketSupported() {\n    try {\n      const env = this.detectEnvironment();\n      return env.type === 'native' || env.type === 'ws';\n    } catch (_a) {\n      return false;\n    }\n  }\n}\nexport default WebSocketFactory;\n//# sourceMappingURL=websocket-factory.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}