{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Central State Manager for Niv System\n// This is the SINGLE SOURCE OF TRUTH for all Niv-generated content\nclass NivStateManager{constructor(){// Core state\nthis.chatMessages=[];this.workItems=new Map();// id -> workItem\nthis.activeWorkspaceId=null;// Subscribers for different components\nthis.subscribers={chat:new Set(),workItems:new Set(),workspace:new Set()};// Debug mode\nthis.debug=true;}// ============= CHAT MANAGEMENT =============\naddChatMessage(message){this.chatMessages.push(_objectSpread({id:Date.now(),timestamp:new Date()},message));this.log('Chat message added:',message);this.notify('chat',{type:'message_added',message});}getChatMessages(){return[...this.chatMessages];}// ============= WORK ITEM MANAGEMENT =============\naddWorkItem(workItem){// Ensure each work item has a unique ID\nconst id=workItem.id||\"work_\".concat(Date.now(),\"_\").concat(Math.random());const fullWorkItem=_objectSpread(_objectSpread({id,timestamp:new Date(),status:'ready'},workItem),{},{// Ensure generatedContent is at the right level\ngeneratedContent:workItem.generatedContent||workItem.content});this.workItems.set(id,fullWorkItem);this.log('Work item added:',fullWorkItem);this.notify('workItems',{type:'item_added',item:fullWorkItem});return id;}getWorkItems(){return Array.from(this.workItems.values());}getWorkItem(id){return this.workItems.get(id);}// ============= WORKSPACE MANAGEMENT =============\nopenWorkspace(workItemId){const workItem=this.workItems.get(workItemId);if(!workItem){console.error('Work item not found:',workItemId);return false;}this.activeWorkspaceId=workItemId;this.log('Opening workspace for:',workItem);this.notify('workspace',{type:'workspace_opened',workItem});return true;}closeWorkspace(){this.activeWorkspaceId=null;this.notify('workspace',{type:'workspace_closed'});}getActiveWorkspace(){if(!this.activeWorkspaceId)return null;return this.workItems.get(this.activeWorkspaceId);}// ============= NIV RESPONSE HANDLER =============\n// This is the KEY method that handles Niv's responses\nhandleNivResponse(response){this.log('Handling Niv response:',response);// 1. Always add the chat message (Niv's conversational response)\nif(response.response){this.addChatMessage({type:'assistant',content:response.response});}// 2. Check for work items in various formats (handle different response structures)\nlet workItemsToProcess=[];// Check for workItems array\nif(response.workItems&&Array.isArray(response.workItems)){workItemsToProcess=response.workItems;}// Check for artifacts array (older format)\nelse if(response.artifacts&&Array.isArray(response.artifacts)){workItemsToProcess=response.artifacts;}// Check for workCards array (another format)\nelse if(response.workCards&&Array.isArray(response.workCards)){workItemsToProcess=response.workCards;}// Check if the response itself contains material generation\nelse if(response.type&&response.generatedContent){// Single work item embedded in response\nworkItemsToProcess=[{type:response.type,title:response.title,description:response.description,generatedContent:response.generatedContent}];}// Process work items if we found any\nif(workItemsToProcess.length>0){const workItemIds=[];workItemsToProcess.forEach(item=>{var _item$data,_item$data2;// Extract content from various possible structures\nlet content=item.generatedContent||item.content||item.data;// If content is nested in data.generatedContent\nif(item.data&&item.data.generatedContent){content=item.data.generatedContent;}// Create a properly structured work item\nconst workItem={type:item.type||'content-draft',title:item.title||((_item$data=item.data)===null||_item$data===void 0?void 0:_item$data.title)||this.getTitleForType(item.type),description:item.description||((_item$data2=item.data)===null||_item$data2===void 0?void 0:_item$data2.description)||'',generatedContent:content,metadata:_objectSpread({source:'niv',generatedAt:new Date()},item.metadata)};const id=this.addWorkItem(workItem);workItemIds.push(id);});// Notify that Niv created work items\nthis.notify('chat',{type:'work_items_created',ids:workItemIds,count:workItemIds.length});return{messageAdded:true,workItemsCreated:workItemIds.length};}return{messageAdded:true,workItemsCreated:0};}// ============= SUBSCRIPTION MANAGEMENT =============\nsubscribe(channel,callback){if(!this.subscribers[channel]){console.error('Invalid channel:',channel);return null;}this.subscribers[channel].add(callback);// Return unsubscribe function\nreturn()=>{this.subscribers[channel].delete(callback);};}notify(channel,event){if(!this.subscribers[channel])return;this.subscribers[channel].forEach(callback=>{try{callback(event);}catch(error){console.error('Subscriber error:',error);}});}// ============= UTILITY METHODS =============\ngetTitleForType(type){const titles={'media-list':'Media List','content-draft':'Press Release','strategy-plan':'Strategic Plan','key-messaging':'Key Messaging','social-content':'Social Media Content','faq-document':'FAQ Document'};return titles[type]||'Generated Content';}log(){if(this.debug){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}console.log('[NivStateManager]',...args);}}// ============= STATE RESET (for testing) =============\nreset(){this.chatMessages=[];this.workItems.clear();this.activeWorkspaceId=null;this.notify('chat',{type:'reset'});this.notify('workItems',{type:'reset'});this.notify('workspace',{type:'reset'});}// ============= STATE EXPORT (for debugging) =============\nexportState(){return{chatMessages:this.chatMessages,workItems:Array.from(this.workItems.entries()),activeWorkspaceId:this.activeWorkspaceId,timestamp:new Date()};}}// Create singleton instance\nconst nivStateManager=new NivStateManager();export default nivStateManager;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}