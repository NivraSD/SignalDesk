{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';// Create context for global intelligence state\nimport{jsx as _jsx}from\"react/jsx-runtime\";const IntelligenceContext=/*#__PURE__*/createContext();// Cache expiration time (in milliseconds) - 5 minutes default\nconst CACHE_EXPIRATION=5*60*1000;export const IntelligenceProvider=_ref=>{let{children}=_ref;// Intelligence state\nconst[intelligenceData,setIntelligenceData]=useState({unified:null,competitors:{},topics:{},lastFetch:null});// Organization state\nconst[organizationData,setOrganizationData]=useState({id:null,name:null,targets:[],strategy:null});// Opportunity state\nconst[opportunityData,setOpportunityData]=useState({analysis:null,concepts:[],selectedConcept:null,executionPlan:null,lastAnalysis:null});// Source configuration state\nconst[sourceData,setSourceData]=useState({sources:[],validated:false,lastUpdate:null});// Loading states\nconst[loadingStates,setLoadingStates]=useState({intelligence:false,opportunities:false,sources:false});// Check if data is stale\nconst isDataStale=lastFetch=>{if(!lastFetch)return true;return Date.now()-lastFetch>CACHE_EXPIRATION;};// Update intelligence data\nconst updateIntelligenceData=data=>{setIntelligenceData(_objectSpread(_objectSpread({},data),{},{lastFetch:Date.now()}));};// Update organization data\nconst updateOrganizationData=data=>{// Check if targets have changed\nif(data.targets&&organizationData.targets){const prevTargetIds=organizationData.targets.map(t=>t.id).sort().join(',');const newTargetIds=data.targets.map(t=>t.id).sort().join(',');if(prevTargetIds!==newTargetIds){console.log('Organization targets changed, clearing opportunity data');// Clear opportunity data when targets change\nsetOpportunityData({analysis:null,concepts:[],selectedConcept:null,executionPlan:null,lastAnalysis:null});}}setOrganizationData(prev=>_objectSpread(_objectSpread({},prev),data));};// Update opportunity data\nconst updateOpportunityData=data=>{setOpportunityData(prev=>_objectSpread(_objectSpread(_objectSpread({},prev),data),{},{lastAnalysis:data.analysis?Date.now():prev.lastAnalysis}));};// Update source data\nconst updateSourceData=data=>{setSourceData(_objectSpread(_objectSpread({},data),{},{lastUpdate:Date.now()}));};// Clear specific data type\nconst clearData=dataType=>{switch(dataType){case'intelligence':setIntelligenceData({unified:null,competitors:{},topics:{},lastFetch:null});break;case'opportunities':setOpportunityData({analysis:null,concepts:[],selectedConcept:null,executionPlan:null,lastAnalysis:null});break;case'sources':setSourceData({sources:[],validated:false,lastUpdate:null});break;case'all':// Clear all data\nsetIntelligenceData({unified:null,competitors:{},topics:{},lastFetch:null});setOpportunityData({analysis:null,concepts:[],selectedConcept:null,executionPlan:null,lastAnalysis:null});setSourceData({sources:[],validated:false,lastUpdate:null});break;default:break;}};// Manual refresh function\nconst refreshData=dataType=>{clearData(dataType);// Component will re-fetch when it detects null data\n};// Persist to localStorage\nuseEffect(()=>{const state={intelligence:intelligenceData,organization:organizationData,opportunity:opportunityData,source:sourceData};localStorage.setItem('signaldesk_state',JSON.stringify(state));},[intelligenceData,organizationData,opportunityData,sourceData]);// Load from localStorage on mount\nuseEffect(()=>{const savedState=localStorage.getItem('signaldesk_state');if(savedState){try{var _parsed$intelligence,_parsed$opportunity,_parsed$source;const parsed=JSON.parse(savedState);// Only restore if data is not too old (24 hours)\nconst dayAgo=Date.now()-24*60*60*1000;if(((_parsed$intelligence=parsed.intelligence)===null||_parsed$intelligence===void 0?void 0:_parsed$intelligence.lastFetch)>dayAgo){setIntelligenceData(parsed.intelligence);}if(parsed.organization){setOrganizationData(parsed.organization);}if(((_parsed$opportunity=parsed.opportunity)===null||_parsed$opportunity===void 0?void 0:_parsed$opportunity.lastAnalysis)>dayAgo){setOpportunityData(parsed.opportunity);}if(((_parsed$source=parsed.source)===null||_parsed$source===void 0?void 0:_parsed$source.lastUpdate)>dayAgo){setSourceData(parsed.source);}}catch(error){console.error('Error loading saved state:',error);}}},[]);const value={// Data\nintelligenceData,organizationData,opportunityData,sourceData,loadingStates,// Update functions\nupdateIntelligenceData,updateOrganizationData,updateOpportunityData,updateSourceData,setLoadingStates,// Utility functions\nisDataStale,clearData,refreshData};return/*#__PURE__*/_jsx(IntelligenceContext.Provider,{value:value,children:children});};// Custom hook to use the context\nexport const useIntelligence=()=>{const context=useContext(IntelligenceContext);if(!context){throw new Error('useIntelligence must be used within IntelligenceProvider');}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}