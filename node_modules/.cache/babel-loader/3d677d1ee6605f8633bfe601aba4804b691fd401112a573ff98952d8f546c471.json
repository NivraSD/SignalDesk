{"ast":null,"code":"// Smart Cache Manager - Prevents cache from ruining everything\n// Only caches when appropriate, clears when needed\nclass SmartCacheManager{constructor(){this.CACHE_KEYS={INTELLIGENCE:'signaldesk_intelligence_cache',ORGANIZATION:'signaldesk_organization',UNIFIED_PROFILE:'signaldesk_unified_profile',ONBOARDING:'signaldesk_onboarding',JUST_ONBOARDED:'signaldesk_just_onboarded'};// Development/Testing mode detection\nthis.isDevelopment=window.location.hostname==='localhost'||window.location.hostname.includes('vercel.app');// Auto-clear stale caches on load\nthis.clearStaleCaches();}clearStaleCaches(){// In development, always clear intelligence cache\nif(this.isDevelopment){localStorage.removeItem(this.CACHE_KEYS.INTELLIGENCE);console.log('üóëÔ∏è Cleared intelligence cache (development mode)');}// Clear \"just onboarded\" flag if it's been more than 5 minutes\nconst onboardedTime=localStorage.getItem('onboarded_timestamp');if(onboardedTime){const elapsed=Date.now()-parseInt(onboardedTime);if(elapsed>5*60*1000){// 5 minutes\nlocalStorage.removeItem(this.CACHE_KEYS.JUST_ONBOARDED);localStorage.removeItem('onboarded_timestamp');console.log('üóëÔ∏è Cleared stale onboarding flag');}}}saveIntelligence(data,organization){// NEVER cache in development/testing\nif(this.isDevelopment){console.log('üö´ Skipping cache save (development mode)');return;}// Only cache if we have real data (not templates)\nif(this.isRealData(data)){localStorage.setItem(this.CACHE_KEYS.INTELLIGENCE,JSON.stringify({data,organization:organization===null||organization===void 0?void 0:organization.name,timestamp:Date.now()}));console.log('üíæ Cached real intelligence data');}else{console.log('üö´ Not caching template/mock data');}}getIntelligence(organization){// NEVER use cache in development/testing\nif(this.isDevelopment){console.log('üö´ Skipping cache read (development mode)');return null;}try{const cached=localStorage.getItem(this.CACHE_KEYS.INTELLIGENCE);if(!cached)return null;const parsed=JSON.parse(cached);// Check if cache is for same organization\nif(parsed.organization!==(organization===null||organization===void 0?void 0:organization.name)){console.log('üóëÔ∏è Cache is for different organization, clearing');localStorage.removeItem(this.CACHE_KEYS.INTELLIGENCE);return null;}// Check if cache is fresh (less than 30 minutes old)\nconst age=Date.now()-parsed.timestamp;if(age>30*60*1000){console.log('üóëÔ∏è Cache is stale, clearing');localStorage.removeItem(this.CACHE_KEYS.INTELLIGENCE);return null;}return parsed.data;}catch(e){console.error('Cache read error:',e);localStorage.removeItem(this.CACHE_KEYS.INTELLIGENCE);return null;}}isRealData(data){// Check if this is real data or template/mock\nif(!data)return false;// Check for template indicators\nconst templateIndicators=['Microsoft','Google','Apple',// Generic tech companies\n'template','mock','example','test','Lorem ipsum','placeholder'];const dataString=JSON.stringify(data).toLowerCase();for(const indicator of templateIndicators){if(dataString.includes(indicator.toLowerCase())){// Exception: Allow if it's in a real context (like actual competitor data)\nif(data.competitors&&Array.isArray(data.competitors)){continue;// This might be real competitor data\n}return false;}}// Check for suspiciously fast generation (less than 2 seconds)\nif(data.generatedIn&&data.generatedIn<2000){return false;}return true;}saveOrganizationProfile(profile){// Always save organization profile\nlocalStorage.setItem(this.CACHE_KEYS.UNIFIED_PROFILE,JSON.stringify(profile));console.log('üíæ Saved organization profile');}clearAllCaches(){Object.values(this.CACHE_KEYS).forEach(key=>{localStorage.removeItem(key);});sessionStorage.clear();console.log('üóëÔ∏è Cleared all caches');}clearIntelligenceOnly(){localStorage.removeItem(this.CACHE_KEYS.INTELLIGENCE);console.log('üóëÔ∏è Cleared intelligence cache only');}}// Export singleton instance\nexport const cacheManager=new SmartCacheManager();export default cacheManager;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}