{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Centralized Cache Manager - Single source of truth for all caching\n// Handles clearing, saving, and loading consistently\nclass CacheManager{constructor(){this.CACHE_PREFIX='signaldesk_';this.CACHE_KEYS={ORGANIZATION:'signaldesk_organization',COMPLETE_PROFILE:'signaldesk_complete_profile',INTELLIGENCE:'signaldesk_intelligence_cache',LAST_SYNTHESIS:'signaldesk_last_synthesis',INTELLIGENCE_HUB:'signaldesk_intelligence_hub',ONBOARDING_CONFIG:'onboarding_config',CURRENT_ORGANIZATION:'current_organization'};// Cache duration in milliseconds\nthis.CACHE_DURATION={ORGANIZATION:24*60*60*1000,// 24 hours\nINTELLIGENCE:30*60*1000,// 30 minutes\nSYNTHESIS:30*60*1000// 30 minutes\n};// Initialize on construction\nthis.init();}init(){console.log('üîß Cache Manager initialized');// Check if we should clear stale data on app start\nthis.clearStaleData();}// Clear ALL SignalDesk data - for fresh start\nclearAll(){console.log('üóëÔ∏è Clearing ALL SignalDesk cache data...');const keys=Object.keys(localStorage);let cleared=0;// More comprehensive list of keys to clear\nconst clearPatterns=['signaldesk','onboarding','organization','intelligence','opportunity','synthesis','gathering','discovery','monitoring','cache','profile','stakeholder','competitor','regulator','analyst','investor','media','activist','mcp_results','just_onboarded','completed'];keys.forEach(key=>{const shouldClear=clearPatterns.some(pattern=>key.toLowerCase().includes(pattern));if(shouldClear){localStorage.removeItem(key);cleared++;console.log(\"  \\uD83D\\uDDD1\\uFE0F Removed: \".concat(key));}});// Also clear any window-level caches\nif(typeof window!=='undefined'){// Clear any window-level intelligence cache\nif(window.__SIGNALDESK_INTELLIGENCE__){window.__SIGNALDESK_INTELLIGENCE__=null;console.log('  üóëÔ∏è Cleared window.__SIGNALDESK_INTELLIGENCE__');}if(window.__SIGNALDESK_CACHE__){window.__SIGNALDESK_CACHE__=null;console.log('  üóëÔ∏è Cleared window.__SIGNALDESK_CACHE__');}if(window.__SIGNALDESK_ORG__){window.__SIGNALDESK_ORG__=null;console.log('  üóëÔ∏è Cleared window.__SIGNALDESK_ORG__');}}console.log(\"\\u2705 Cleared \".concat(cleared,\" cache items\"));return cleared;}// Clear only intelligence/synthesis data (keep organization)\nclearIntelligence(){console.log('üóëÔ∏è Clearing ALL intelligence data...');// Clear primary intelligence keys\nlocalStorage.removeItem(this.CACHE_KEYS.INTELLIGENCE);localStorage.removeItem(this.CACHE_KEYS.LAST_SYNTHESIS);localStorage.removeItem(this.CACHE_KEYS.INTELLIGENCE_HUB);// Clear any other intelligence-related keys that might exist\nconst allKeys=Object.keys(localStorage);allKeys.forEach(key=>{if((key.includes('intelligence')||key.includes('synthesis')||key.includes('gathering')||key.includes('opportunity')||key.includes('cache'))&&!key.includes('organization')&&!key.includes('profile')){console.log(\"  \\uD83D\\uDDD1\\uFE0F Removing: \".concat(key));localStorage.removeItem(key);}});}// Clear stale data based on age\nclearStaleData(){const now=Date.now();// Check intelligence cache age\nconst intelligenceCache=this.get(this.CACHE_KEYS.INTELLIGENCE);if(intelligenceCache&&intelligenceCache.timestamp){const age=now-new Date(intelligenceCache.timestamp).getTime();if(age>this.CACHE_DURATION.INTELLIGENCE){console.log('üóëÔ∏è Clearing stale intelligence cache');this.clearIntelligence();}}// Check synthesis cache age\nconst synthesisCache=this.get(this.CACHE_KEYS.LAST_SYNTHESIS);if(synthesisCache&&synthesisCache.timestamp){const age=now-new Date(synthesisCache.timestamp).getTime();if(age>this.CACHE_DURATION.SYNTHESIS){console.log('üóëÔ∏è Clearing stale synthesis cache');localStorage.removeItem(this.CACHE_KEYS.LAST_SYNTHESIS);}}}// Save data with timestamp\nsave(key,data){let addTimestamp=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;try{const dataToSave=addTimestamp?_objectSpread(_objectSpread({},data),{},{_cachedAt:new Date().toISOString()}):data;localStorage.setItem(key,JSON.stringify(dataToSave));console.log(\"\\uD83D\\uDCBE Saved to cache: \".concat(key));return true;}catch(error){console.error(\"Failed to save \".concat(key,\":\"),error);return false;}}// Get data from cache\nget(key){try{const data=localStorage.getItem(key);if(!data)return null;return JSON.parse(data);}catch(error){console.error(\"Failed to get \".concat(key,\":\"),error);return null;}}// Remove specific key\nremove(key){localStorage.removeItem(key);console.log(\"\\uD83D\\uDDD1\\uFE0F Removed from cache: \".concat(key));}// Save organization data\nsaveOrganization(orgData){return this.save(this.CACHE_KEYS.ORGANIZATION,orgData);}// Get organization data\ngetOrganization(){return this.get(this.CACHE_KEYS.ORGANIZATION);}// Save complete profile (org + stakeholders)\nsaveCompleteProfile(profile){return this.save(this.CACHE_KEYS.COMPLETE_PROFILE,profile);}// Get complete profile\ngetCompleteProfile(){return this.get(this.CACHE_KEYS.COMPLETE_PROFILE);}// Save intelligence data\nsaveIntelligence(intelligence){return this.save(this.CACHE_KEYS.INTELLIGENCE,{data:intelligence,timestamp:new Date().toISOString()},false);}// Get intelligence data (with age check)\ngetIntelligence(){const cached=this.get(this.CACHE_KEYS.INTELLIGENCE);if(!cached||!cached.timestamp)return null;// Check age\nconst age=Date.now()-new Date(cached.timestamp).getTime();if(age>this.CACHE_DURATION.INTELLIGENCE){console.log('‚ö†Ô∏è Intelligence cache is stale');this.remove(this.CACHE_KEYS.INTELLIGENCE);return null;}return cached.data;}// Save synthesis data\nsaveSynthesis(synthesis){return this.save(this.CACHE_KEYS.LAST_SYNTHESIS,synthesis);}// Get synthesis data\ngetSynthesis(){return this.get(this.CACHE_KEYS.LAST_SYNTHESIS);}// Check if user just onboarded (within last 5 minutes)\nisJustOnboarded(){const profile=this.getCompleteProfile();if(!profile||!profile._cachedAt)return false;const age=Date.now()-new Date(profile._cachedAt).getTime();return age<5*60*1000;// 5 minutes\n}// Start new search (clear intelligence but keep organization)\nstartNewSearch(){console.log('üîÑ Starting new search - clearing ALL intelligence data...');this.clearIntelligence();// Also clear window-level intelligence caches\nif(typeof window!=='undefined'){if(window.__SIGNALDESK_INTELLIGENCE__){window.__SIGNALDESK_INTELLIGENCE__=null;console.log('  üóëÔ∏è Cleared window.__SIGNALDESK_INTELLIGENCE__');}if(window.__SIGNALDESK_CACHE__){window.__SIGNALDESK_CACHE__=null;console.log('  üóëÔ∏è Cleared window.__SIGNALDESK_CACHE__');}}// Verify what's left\nthis.verifyCacheState();return true;}// Verify cache state - useful for debugging\nverifyCacheState(){const state={localStorage:{},windowCaches:{},totalItems:0};// Check localStorage\nconst keys=Object.keys(localStorage);keys.forEach(key=>{if(key.includes('signaldesk')||key.includes('organization')||key.includes('intelligence')||key.includes('opportunity')||key.includes('profile')){try{const value=localStorage.getItem(key);const parsed=JSON.parse(value);state.localStorage[key]=parsed?'‚úÖ Has data':'‚ö†Ô∏è Empty';}catch(_unused){state.localStorage[key]='‚ö†Ô∏è Invalid JSON';}state.totalItems++;}});// Check window caches\nif(typeof window!=='undefined'){state.windowCaches.__SIGNALDESK_INTELLIGENCE__=window.__SIGNALDESK_INTELLIGENCE__?'‚úÖ Has data':'‚ùå Empty';state.windowCaches.__SIGNALDESK_CACHE__=window.__SIGNALDESK_CACHE__?'‚úÖ Has data':'‚ùå Empty';state.windowCaches.__SIGNALDESK_ORG__=window.__SIGNALDESK_ORG__?'‚úÖ Has data':'‚ùå Empty';}console.log('üìä Cache State Verification:',state);return state;}// Get cache status for debugging\ngetCacheStatus(){const status={};Object.entries(this.CACHE_KEYS).forEach(_ref=>{let[name,key]=_ref;const data=localStorage.getItem(key);status[name]={exists:!!data,size:data?data.length:0,key:key};});return status;}}// Export singleton instance\nconst cacheManager=new CacheManager();// Add global debug functions for testing cache issues\nif(typeof window!=='undefined'){window.debugCache=()=>cacheManager.verifyCacheState();window.clearAllCache=()=>cacheManager.clearAll();window.checkCacheContamination=()=>{const state=cacheManager.verifyCacheState();const issues=[];// Check for multiple organizations in cache\nconst orgKeys=Object.keys(state.localStorage).filter(k=>k.includes('organization')||k.includes('profile'));if(orgKeys.length>3){issues.push(\"\\u26A0\\uFE0F Multiple organization keys found: \".concat(orgKeys.length));}// Check for stale intelligence\nconst intelKeys=Object.keys(state.localStorage).filter(k=>k.includes('intelligence')||k.includes('synthesis'));intelKeys.forEach(key=>{try{const data=JSON.parse(localStorage.getItem(key));if(data&&data.timestamp){const age=Date.now()-new Date(data.timestamp).getTime();if(age>30*60*1000){// 30 minutes\nissues.push(\"\\u26A0\\uFE0F Stale cache: \".concat(key,\" is \").concat(Math.round(age/60000),\" minutes old\"));}}}catch(_unused2){}});// Check for window-level contamination\nif(window.__SIGNALDESK_INTELLIGENCE__||window.__SIGNALDESK_CACHE__){issues.push('‚ö†Ô∏è Window-level caches still active');}if(issues.length>0){console.log('üö® Cache contamination detected:',issues);}else{console.log('‚úÖ Cache is clean');}return issues;};console.log('üõ†Ô∏è Cache debug functions available:');console.log('  - window.debugCache() - Show cache state');console.log('  - window.clearAllCache() - Clear all caches');console.log('  - window.checkCacheContamination() - Check for issues');}export default cacheManager;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}