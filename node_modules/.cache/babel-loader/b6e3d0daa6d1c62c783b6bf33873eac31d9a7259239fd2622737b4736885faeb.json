{"ast":null,"code":"/**\n * Intelligence Orchestrator Service\n * Manages the complete 4-phase intelligence flow:\n * 1. Intelligent Discovery\n * 2. Source Mapping\n * 3. Parallel Data Gathering\n * 4. Intelligent Synthesis\n */import dataFormatterService from'./dataFormatter';class IntelligenceOrchestratorService{constructor(){this.supabaseUrl=(process.env.REACT_APP_SUPABASE_URL||'https://zskaxjtyuaqazydouifp.supabase.co').trim().replace(/\\n/g,'');this.supabaseKey=(process.env.REACT_APP_SUPABASE_ANON_KEY||'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpza2F4anR5dWFxYXp5ZG91aWZwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUxMjk2MzcsImV4cCI6MjA3MDcwNTYzN30.5PhMVptHk3n-1dTSwGF-GvTwrVM0loovkHGUBDtBOe8').trim().replace(/\\n/g,'');this.cache=new Map();this.activeRequests=new Map();}/**\n   * Run the complete intelligence orchestration flow\n   * @param {Object} organization - Organization details\n   * @param {string} organization.name - Organization name\n   * @param {string} organization.industry - Industry hint\n   * @param {string} method - Method to run: 'full', 'discovery', 'gather'\n   */async orchestrateIntelligence(organization){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'full';let forceRefresh=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;console.log(\"\\uD83C\\uDFAF Starting Intelligence Orchestration for \".concat(organization.name));// Check cache (unless force refresh)\nconst cacheKey=\"\".concat(organization.name,\"_\").concat(organization.industry,\"_\").concat(method);if(!forceRefresh&&this.cache.has(cacheKey)){const cached=this.cache.get(cacheKey);if(Date.now()-cached.timestamp<300000){// 5 minute cache\nconsole.log('📦 Using cached orchestration results');return cached.data;}}// Check if request is already in progress\nif(this.activeRequests.has(cacheKey)){console.log('⏳ Request already in progress, waiting...');return this.activeRequests.get(cacheKey);}// Start new request\nconst requestPromise=this._executeOrchestration(organization,method);this.activeRequests.set(cacheKey,requestPromise);try{const result=await requestPromise;// Cache successful result\nif(result.success){this.cache.set(cacheKey,{data:result,timestamp:Date.now()});}return result;}finally{this.activeRequests.delete(cacheKey);}}async _executeOrchestration(organization,method){try{var _data$intelligence,_data$intelligence2,_data$intelligence3,_data$intelligence4,_data$intelligence4$k;const response=await fetch(\"\".concat(this.supabaseUrl,\"/functions/v1/intelligence-orchestrator\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(this.supabaseKey)},body:JSON.stringify({organization,method})});if(!response.ok){throw new Error(\"Orchestration failed: \".concat(response.status));}const data=await response.json();console.log('✅ Orchestration complete:',data);// DEBUG: What did we actually receive?\nconsole.log('🔍 RAW ORCHESTRATOR RESPONSE:',{hasIntelligence:!!data.intelligence,intelligenceKeys:Object.keys(data.intelligence||{}),executiveSummaryType:typeof((_data$intelligence=data.intelligence)===null||_data$intelligence===void 0?void 0:_data$intelligence.executive_summary),executiveSummaryValue:(_data$intelligence2=data.intelligence)===null||_data$intelligence2===void 0?void 0:_data$intelligence2.executive_summary,synthesizedKeys:Object.keys(((_data$intelligence3=data.intelligence)===null||_data$intelligence3===void 0?void 0:_data$intelligence3.synthesized)||{}),keyInsightsCount:((_data$intelligence4=data.intelligence)===null||_data$intelligence4===void 0?void 0:(_data$intelligence4$k=_data$intelligence4.key_insights)===null||_data$intelligence4$k===void 0?void 0:_data$intelligence4$k.length)||0});// Check if the Edge Function returned an error\nif(!data.success&&data.error){console.error('❌ Edge Function error:',data.error);throw new Error(data.error);}// Use the data formatter for consistent structure\nreturn dataFormatterService.formatForDisplay(data);}catch(error){console.error('❌ Orchestration error:',error);return{success:false,error:error.message,fallback:await this._getFallbackIntelligence(organization)};}}_processOrchestrationResult(data){var _data$statistics,_data$statistics2,_data$statistics3,_data$statistics4;if(!data.success){return data;}// The raw orchestrator returns everything in 'intelligence', not 'insights'\n// We need to keep the raw intelligence AND extract insights for tabs\nconst processed={success:true,organization:data.organization,industry:data.industry,// Phase completion status - KEEP ORIGINAL\nphases_completed:data.phases_completed||{},// Statistics - KEEP ORIGINAL\nstatistics:data.statistics||{},// Keep stats in both formats for compatibility\nstats:{competitors:((_data$statistics=data.statistics)===null||_data$statistics===void 0?void 0:_data$statistics.competitors_identified)||0,websites:((_data$statistics2=data.statistics)===null||_data$statistics2===void 0?void 0:_data$statistics2.websites_scraped)||0,articles:((_data$statistics3=data.statistics)===null||_data$statistics3===void 0?void 0:_data$statistics3.articles_processed)||0,sources:((_data$statistics4=data.statistics)===null||_data$statistics4===void 0?void 0:_data$statistics4.sources_used)||0},// Main intelligence data - KEEP AS IS\nintelligence:data.intelligence||{},// Extract insights for different tabs from the intelligence data\ninsights:{overview:this._extractOverviewInsights(data),competitive:this._extractCompetitiveInsights(data),stakeholder:this._extractStakeholderInsights(data),risk:this._extractRiskInsights(data),opportunity:this._extractOpportunityInsights(data),predictive:this._extractPredictiveInsights(data)},// Also add tab intelligence for direct compatibility\ntabIntelligence:{overview:this._extractOverviewInsights(data),competition:this._extractCompetitiveInsights(data),stakeholders:this._extractStakeholderInsights(data),topics:this._extractTopicsInsights(data),predictions:this._extractPredictiveInsights(data)},timestamp:data.timestamp||new Date().toISOString()};console.log('📊 Processed orchestration result:',{hasIntelligence:!!processed.intelligence,intelligenceKeys:Object.keys(processed.intelligence),hasInsights:!!processed.insights,insightKeys:Object.keys(processed.insights),phasesCompleted:processed.phases_completed});return processed;}_extractOverviewInsights(data){var _intelligence$synthes;const intelligence=data.intelligence||{};// The orchestrator now returns executive_summary as a direct string\nconst summaryText=intelligence.executive_summary||((_intelligence$synthes=intelligence.synthesized)===null||_intelligence$synthes===void 0?void 0:_intelligence$synthes.executive_summary)||'Executive intelligence analysis in progress...';return{executive_summary:summaryText,key_insights:intelligence.key_insights||[],critical_alerts:intelligence.alerts||[],recommended_actions:intelligence.recommendations||intelligence.immediate_opportunities||[]};}_extractTopicsInsights(data){const intelligence=data.intelligence||{};return{trending_topics:intelligence.trending_topics||intelligence.industry_trends||[],media_coverage:intelligence.media_coverage||[],sentiment_analysis:intelligence.sentiment_analysis||{},key_narratives:intelligence.key_narratives||[]};}_extractCompetitiveInsights(data){var _intelligence$executi,_intelligence$executi2;const intelligence=data.intelligence||{};// Build proper competitive landscape structure\nconst competitorProfiles={};if(intelligence.competitors&&Array.isArray(intelligence.competitors)){intelligence.competitors.forEach(comp=>{if(typeof comp==='string'){competitorProfiles[comp]={threat_level:'medium',market_position:{position:'competitive'},latest_developments:[],opportunities:[]};}else if(comp.name){competitorProfiles[comp.name]={threat_level:comp.threat_level||'medium',market_position:comp.market_position||{position:'competitive'},latest_developments:comp.developments||[],opportunities:comp.opportunities||[]};}});}return{competitive_landscape:{summary:intelligence.competitive_landscape_summary||((_intelligence$executi=intelligence.executive_summary)===null||_intelligence$executi===void 0?void 0:_intelligence$executi.competitive_analysis)||'Competitive landscape analysis in progress',competitor_profiles:competitorProfiles,opportunities:intelligence.competitive_opportunities||[]},competitor_profiles:competitorProfiles,competitive_opportunities:intelligence.competitive_opportunities||[],positioning:intelligence.competitive_positioning||{},advantages:intelligence.competitive_advantages||[],threats:intelligence.competitive_threats||[],recommendations:((_intelligence$executi2=intelligence.executive_summary)===null||_intelligence$executi2===void 0?void 0:_intelligence$executi2.recommendations)||[],activity:intelligence.competitor_activity||[]};}_extractStakeholderInsights(data){const intelligence=data.intelligence||{};// Since orchestrator doesn't return stakeholder-specific data, create defaults\nreturn{groups:['investors','customers','employees','media','regulators'],sentiment:{},concerns:intelligence.alerts||[],communications:[]};}_extractRiskInsights(data){const intelligence=data.intelligence||{};return{immediate:intelligence.immediate_risks||[],emerging:intelligence.alerts||[],mitigation:[],alerts:intelligence.alerts||[]};}_extractOpportunityInsights(data){const intelligence=data.intelligence||{};return{immediate:intelligence.immediate_opportunities||[],strategic:intelligence.opportunities||[],market:[],partnerships:[]};}_extractPredictiveInsights(data){const intelligence=data.intelligence||{};return{trends:intelligence.industry_trends||[],scenarios:[],timeline:[],confidence:{}};}async _getFallbackIntelligence(organization){// Basic fallback intelligence if orchestration fails\nreturn{organization:organization.name,industry:organization.industry||'unknown',message:'Using simplified intelligence gathering',insights:{competitive:{competitors:[],positioning:{}},stakeholder:{groups:[],sentiment:{}},risk:{immediate:[],emerging:[]},opportunity:{immediate:[],strategic:[]},predictive:{trends:[],scenarios:[]}}};}/**\n   * Get just the discovery phase data\n   */async runDiscovery(organizationName,industryHint){return this.orchestrateIntelligence({name:organizationName,industry:industryHint},'discovery');}/**\n   * Get discovery + gathering (no synthesis)\n   */async runGathering(organizationName,industryHint){return this.orchestrateIntelligence({name:organizationName,industry:industryHint},'gather');}/**\n   * Clear cache for an organization\n   */clearCache(){let organizationName=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(organizationName){// Clear specific organization\nfor(const[key]of this.cache){if(key.includes(organizationName)){this.cache.delete(key);}}}else{// Clear all cache\nthis.cache.clear();}console.log('🗑️ Cache cleared');}}// Export singleton instance\nconst intelligenceOrchestratorService=new IntelligenceOrchestratorService();export default intelligenceOrchestratorService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}