{"ast":null,"code":"var _process$env$REACT_AP, _process$env$REACT_AP2;\n// Supabase Client Configuration for Frontend - SINGLETON INSTANCE\nimport { createClient } from '@supabase/supabase-js';\n\n// Singleton enforcement - prevent multiple client creation\nif (window.__SUPABASE_CLIENT__) {\n  console.warn('WARNING: Attempting to create multiple Supabase clients. Using existing singleton.');\n  throw new Error('Multiple Supabase clients detected! Use the singleton from config/supabase.js');\n}\n\n// Get from environment variables - NO HARDCODED FALLBACKS FOR SECURITY\n// Trim any whitespace/newlines that might have been accidentally included\nconst supabaseUrl = (_process$env$REACT_AP = process.env.REACT_APP_SUPABASE_URL) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.trim();\nconst supabaseAnonKey = (_process$env$REACT_AP2 = process.env.REACT_APP_SUPABASE_ANON_KEY) === null || _process$env$REACT_AP2 === void 0 ? void 0 : _process$env$REACT_AP2.trim();\n\n// Log configuration (for debugging)\nconsole.log('🔧 Supabase Configuration:', {\n  url: supabaseUrl,\n  hasKey: !!supabaseAnonKey,\n  envVarsPresent: !!(process.env.REACT_APP_SUPABASE_URL && process.env.REACT_APP_SUPABASE_ANON_KEY),\n  buildTime: new Date().toISOString()\n});\n\n// Validate configuration\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('CRITICAL: Supabase configuration missing from environment variables');\n  console.error('Required environment variables:');\n  console.error('- REACT_APP_SUPABASE_URL');\n  console.error('- REACT_APP_SUPABASE_ANON_KEY');\n  console.error('Please set these in your .env file locally or in Vercel environment settings for production');\n  throw new Error('Supabase configuration is required. Please set REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY environment variables.');\n}\n\n// Create SINGLETON Supabase client - DO NOT create multiple instances\nexport const supabase = window.__SUPABASE_CLIENT__ || (() => {\n  const client = createClient(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: false,\n      // Prevents conflicts with SPA routing\n      storage: window.localStorage,\n      flowType: 'pkce',\n      // Added PKCE for better security\n      debug: process.env.NODE_ENV === 'development' // Enable auth debugging in dev\n    },\n    realtime: {\n      params: {\n        eventsPerSecond: 10\n      }\n    },\n    global: {\n      headers: {\n        'X-Client-Info': 'signaldesk-frontend'\n      }\n    }\n  });\n\n  // Store singleton reference globally to prevent multiple instances\n  window.__SUPABASE_CLIENT__ = client;\n\n  // Add development validation\n  if (process.env.NODE_ENV === 'development') {\n    // Add global method to check client health\n    window.__SUPABASE_VALIDATE__ = () => {\n      const isValid = client && typeof client.auth === 'object';\n      console.log('🔍 Supabase singleton validation:', isValid ? '✅ PASS' : '❌ FAIL');\n      return isValid;\n    };\n  }\n  console.log('✅ Supabase singleton client created successfully');\n  return client;\n})();\n\n// Add global error handler for database schema issues\nconst originalFrom = supabase.from.bind(supabase);\nsupabase.from = function (table) {\n  const query = originalFrom(table);\n  const originalSelect = query.select.bind(query);\n  query.select = function (...args) {\n    const result = originalSelect(...args);\n\n    // Add error handling for schema access issues\n    const originalPromise = result.then.bind(result);\n    result.then = function (onSuccess, onError) {\n      return originalPromise(onSuccess, error => {\n        var _error$message, _error$message2;\n        if (error !== null && error !== void 0 && (_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('schema') || error !== null && error !== void 0 && (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('permission')) {\n          console.warn(`Database schema access issue for table '${table}':`, error.message);\n          // Return empty result instead of throwing\n          if (onSuccess) {\n            return onSuccess({\n              data: [],\n              error: null,\n              count: 0\n            });\n          }\n        }\n        if (onError) return onError(error);\n        throw error;\n      });\n    };\n    return result;\n  };\n  return query;\n};\n\n// Helper functions for the frontend\n\n// Authentication\nexport const signIn = async (email, password) => {\n  const {\n    data,\n    error\n  } = await supabase.auth.signInWithPassword({\n    email,\n    password\n  });\n  if (error) throw error;\n\n  // Get user profile with proper error handling\n  try {\n    var _data$user$email;\n    const {\n      data: profile,\n      error: profileError\n    } = await supabase.from('users').select('*, organization:organizations(*)').eq('id', data.user.id).maybeSingle(); // Use maybeSingle to handle no rows gracefully\n\n    if (profileError && !profileError.message.includes('Row not found')) {\n      console.warn('Profile fetch warning:', profileError.message);\n    }\n    return {\n      ...data,\n      profile: profile || {\n        id: data.user.id,\n        email: data.user.email,\n        username: (_data$user$email = data.user.email) === null || _data$user$email === void 0 ? void 0 : _data$user$email.split('@')[0],\n        role: 'admin'\n      }\n    };\n  } catch (profileError) {\n    var _data$user$email2;\n    console.warn('Profile fetch failed (non-critical):', profileError.message);\n    // Return basic user data without profile\n    return {\n      ...data,\n      profile: {\n        id: data.user.id,\n        email: data.user.email,\n        username: (_data$user$email2 = data.user.email) === null || _data$user$email2 === void 0 ? void 0 : _data$user$email2.split('@')[0],\n        role: 'admin'\n      }\n    };\n  }\n};\nexport const signOut = async () => {\n  const {\n    error\n  } = await supabase.auth.signOut();\n  if (error) throw error;\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n};\nexport const getCurrentUser = async () => {\n  const {\n    data: {\n      user\n    },\n    error\n  } = await supabase.auth.getUser();\n  if (error || !user) return null;\n\n  // Get user profile with proper error handling\n  try {\n    var _user$email;\n    const {\n      data: profile,\n      error: profileError\n    } = await supabase.from('users').select('*, organization:organizations(*)').eq('id', user.id).maybeSingle(); // Use maybeSingle to handle no rows gracefully\n\n    if (profileError && !profileError.message.includes('Row not found')) {\n      console.warn('Profile fetch warning:', profileError.message);\n    }\n    return {\n      ...user,\n      profile: profile || {\n        id: user.id,\n        email: user.email,\n        username: (_user$email = user.email) === null || _user$email === void 0 ? void 0 : _user$email.split('@')[0],\n        role: 'admin'\n      }\n    };\n  } catch (profileError) {\n    var _user$email2;\n    console.warn('Profile fetch failed (non-critical):', profileError.message);\n    // Return basic user data without profile\n    return {\n      ...user,\n      profile: {\n        id: user.id,\n        email: user.email,\n        username: (_user$email2 = user.email) === null || _user$email2 === void 0 ? void 0 : _user$email2.split('@')[0],\n        role: 'admin'\n      }\n    };\n  }\n};\n\n// Real-time subscriptions\nexport const subscribeToFindings = (organizationId, callback) => {\n  return supabase.channel('intelligence-findings').on('postgres_changes', {\n    event: 'INSERT',\n    schema: 'public',\n    table: 'intelligence_findings',\n    filter: `organization_id=eq.${organizationId}`\n  }, payload => {\n    console.log('New finding:', payload);\n    callback(payload.new);\n  }).subscribe();\n};\nexport const subscribeToMonitoring = (organizationId, callback) => {\n  return supabase.channel('monitoring-runs').on('postgres_changes', {\n    event: '*',\n    schema: 'public',\n    table: 'monitoring_runs',\n    filter: `organization_id=eq.${organizationId}`\n  }, payload => {\n    console.log('Monitoring update:', payload);\n    callback(payload);\n  }).subscribe();\n};\nexport const subscribeToOpportunities = (organizationId, callback) => {\n  return supabase.channel('opportunities').on('postgres_changes', {\n    event: '*',\n    schema: 'public',\n    table: 'opportunity_queue',\n    filter: `organization_id=eq.${organizationId}`\n  }, payload => {\n    console.log('Opportunity update:', payload);\n    callback(payload);\n  }).subscribe();\n};\n\n// Data fetching\nexport const getIntelligenceFindings = async (organizationId, limit = 50) => {\n  const {\n    data,\n    error\n  } = await supabase.from('intelligence_findings').select(`\n      *,\n      target:intelligence_targets(name, type)\n    `).eq('organization_id', organizationId).order('created_at', {\n    ascending: false\n  }).limit(limit);\n  if (error) throw error;\n  return data;\n};\nexport const getOpportunities = async organizationId => {\n  const {\n    data,\n    error\n  } = await supabase.from('opportunity_queue').select('*').eq('organization_id', organizationId).eq('status', 'active').order('score', {\n    ascending: false\n  });\n  if (error) throw error;\n  return data;\n};\nexport const getProjects = async organizationId => {\n  const {\n    data,\n    error\n  } = await supabase.from('projects').select('*').eq('organization_id', organizationId).order('created_at', {\n    ascending: false\n  });\n  if (error) throw error;\n  return data;\n};\nexport const getContent = async projectId => {\n  const {\n    data,\n    error\n  } = await supabase.from('content').select('*').eq('project_id', projectId).order('created_at', {\n    ascending: false\n  });\n  if (error) throw error;\n  return data;\n};\n\n// Monitoring\nexport const triggerMonitoring = async (organizationId, targetId = null) => {\n  const {\n    data,\n    error\n  } = await supabase.functions.invoke('monitor-intelligence', {\n    body: {\n      organizationId,\n      targetId\n    }\n  });\n  if (error) throw error;\n  return data;\n};\n\n// Content operations\nexport const saveContent = async content => {\n  const {\n    data,\n    error\n  } = await supabase.from('content').insert(content).select().single();\n  if (error) throw error;\n  return data;\n};\nexport const updateContent = async (id, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from('content').update(updates).eq('id', id).select().single();\n  if (error) throw error;\n  return data;\n};\n\n// MemoryVault operations\nexport const searchMemory = async (organizationId, query) => {\n  const {\n    data,\n    error\n  } = await supabase.from('memoryvault_items').select('*').eq('organization_id', organizationId).textSearch('content', query).limit(10);\n  if (error) throw error;\n  return data;\n};\nexport const addToMemory = async item => {\n  const {\n    data,\n    error\n  } = await supabase.from('memoryvault_items').insert(item).select().single();\n  if (error) throw error;\n  return data;\n};\nexport default supabase;","map":{"version":3,"names":["createClient","window","__SUPABASE_CLIENT__","console","warn","Error","supabaseUrl","_process$env$REACT_AP","process","env","REACT_APP_SUPABASE_URL","trim","supabaseAnonKey","_process$env$REACT_AP2","REACT_APP_SUPABASE_ANON_KEY","log","url","hasKey","envVarsPresent","buildTime","Date","toISOString","error","supabase","client","auth","autoRefreshToken","persistSession","detectSessionInUrl","storage","localStorage","flowType","debug","NODE_ENV","realtime","params","eventsPerSecond","global","headers","__SUPABASE_VALIDATE__","isValid","originalFrom","from","bind","table","query","originalSelect","select","args","result","originalPromise","then","onSuccess","onError","_error$message","_error$message2","message","includes","data","count","signIn","email","password","signInWithPassword","_data$user$email","profile","profileError","eq","user","id","maybeSingle","username","split","role","_data$user$email2","signOut","removeItem","getCurrentUser","getUser","_user$email","_user$email2","subscribeToFindings","organizationId","callback","channel","on","event","schema","filter","payload","new","subscribe","subscribeToMonitoring","subscribeToOpportunities","getIntelligenceFindings","limit","order","ascending","getOpportunities","getProjects","getContent","projectId","triggerMonitoring","targetId","functions","invoke","body","saveContent","content","insert","single","updateContent","updates","update","searchMemory","textSearch","addToMemory","item"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/config/supabase.js"],"sourcesContent":["// Supabase Client Configuration for Frontend - SINGLETON INSTANCE\nimport { createClient } from '@supabase/supabase-js'\n\n// Singleton enforcement - prevent multiple client creation\nif (window.__SUPABASE_CLIENT__) {\n  console.warn('WARNING: Attempting to create multiple Supabase clients. Using existing singleton.')\n  throw new Error('Multiple Supabase clients detected! Use the singleton from config/supabase.js')\n}\n\n// Get from environment variables - NO HARDCODED FALLBACKS FOR SECURITY\n// Trim any whitespace/newlines that might have been accidentally included\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL?.trim()\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY?.trim()\n\n// Log configuration (for debugging)\nconsole.log('🔧 Supabase Configuration:', {\n  url: supabaseUrl,\n  hasKey: !!supabaseAnonKey,\n  envVarsPresent: !!(process.env.REACT_APP_SUPABASE_URL && process.env.REACT_APP_SUPABASE_ANON_KEY),\n  buildTime: new Date().toISOString()\n})\n\n// Validate configuration\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('CRITICAL: Supabase configuration missing from environment variables')\n  console.error('Required environment variables:')\n  console.error('- REACT_APP_SUPABASE_URL')\n  console.error('- REACT_APP_SUPABASE_ANON_KEY')\n  console.error('Please set these in your .env file locally or in Vercel environment settings for production')\n  throw new Error('Supabase configuration is required. Please set REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY environment variables.')\n}\n\n// Create SINGLETON Supabase client - DO NOT create multiple instances\nexport const supabase = window.__SUPABASE_CLIENT__ || (() => {\n  const client = createClient(\n    supabaseUrl,\n    supabaseAnonKey,\n    {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: false,  // Prevents conflicts with SPA routing\n        storage: window.localStorage,\n        flowType: 'pkce',  // Added PKCE for better security\n        debug: process.env.NODE_ENV === 'development'  // Enable auth debugging in dev\n      },\n      realtime: {\n        params: {\n          eventsPerSecond: 10\n        }\n      },\n      global: {\n        headers: {\n          'X-Client-Info': 'signaldesk-frontend'\n        }\n      }\n    }\n  )\n  \n  // Store singleton reference globally to prevent multiple instances\n  window.__SUPABASE_CLIENT__ = client\n  \n  // Add development validation\n  if (process.env.NODE_ENV === 'development') {\n    // Add global method to check client health\n    window.__SUPABASE_VALIDATE__ = () => {\n      const isValid = client && typeof client.auth === 'object'\n      console.log('🔍 Supabase singleton validation:', isValid ? '✅ PASS' : '❌ FAIL')\n      return isValid\n    }\n  }\n  \n  console.log('✅ Supabase singleton client created successfully')\n  return client\n})()\n\n// Add global error handler for database schema issues\nconst originalFrom = supabase.from.bind(supabase)\nsupabase.from = function(table) {\n  const query = originalFrom(table)\n  const originalSelect = query.select.bind(query)\n  \n  query.select = function(...args) {\n    const result = originalSelect(...args)\n    \n    // Add error handling for schema access issues\n    const originalPromise = result.then.bind(result)\n    result.then = function(onSuccess, onError) {\n      return originalPromise(\n        onSuccess,\n        (error) => {\n          if (error?.message?.includes('schema') || error?.message?.includes('permission')) {\n            console.warn(`Database schema access issue for table '${table}':`, error.message)\n            // Return empty result instead of throwing\n            if (onSuccess) {\n              return onSuccess({ data: [], error: null, count: 0 })\n            }\n          }\n          if (onError) return onError(error)\n          throw error\n        }\n      )\n    }\n    \n    return result\n  }\n  \n  return query\n}\n\n// Helper functions for the frontend\n\n// Authentication\nexport const signIn = async (email, password) => {\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password\n  })\n  \n  if (error) throw error\n  \n  // Get user profile with proper error handling\n  try {\n    const { data: profile, error: profileError } = await supabase\n      .from('users')\n      .select('*, organization:organizations(*)')\n      .eq('id', data.user.id)\n      .maybeSingle() // Use maybeSingle to handle no rows gracefully\n    \n    if (profileError && !profileError.message.includes('Row not found')) {\n      console.warn('Profile fetch warning:', profileError.message)\n    }\n    \n    return { \n      ...data, \n      profile: profile || {\n        id: data.user.id,\n        email: data.user.email,\n        username: data.user.email?.split('@')[0],\n        role: 'admin'\n      }\n    }\n  } catch (profileError) {\n    console.warn('Profile fetch failed (non-critical):', profileError.message)\n    // Return basic user data without profile\n    return { \n      ...data, \n      profile: {\n        id: data.user.id,\n        email: data.user.email,\n        username: data.user.email?.split('@')[0],\n        role: 'admin'\n      }\n    }\n  }\n}\n\nexport const signOut = async () => {\n  const { error } = await supabase.auth.signOut()\n  if (error) throw error\n  localStorage.removeItem('token')\n  localStorage.removeItem('user')\n}\n\nexport const getCurrentUser = async () => {\n  const { data: { user }, error } = await supabase.auth.getUser()\n  if (error || !user) return null\n  \n  // Get user profile with proper error handling\n  try {\n    const { data: profile, error: profileError } = await supabase\n      .from('users')\n      .select('*, organization:organizations(*)')\n      .eq('id', user.id)\n      .maybeSingle() // Use maybeSingle to handle no rows gracefully\n    \n    if (profileError && !profileError.message.includes('Row not found')) {\n      console.warn('Profile fetch warning:', profileError.message)\n    }\n    \n    return { \n      ...user, \n      profile: profile || {\n        id: user.id,\n        email: user.email,\n        username: user.email?.split('@')[0],\n        role: 'admin'\n      }\n    }\n  } catch (profileError) {\n    console.warn('Profile fetch failed (non-critical):', profileError.message)\n    // Return basic user data without profile\n    return { \n      ...user, \n      profile: {\n        id: user.id,\n        email: user.email,\n        username: user.email?.split('@')[0],\n        role: 'admin'\n      }\n    }\n  }\n}\n\n// Real-time subscriptions\nexport const subscribeToFindings = (organizationId, callback) => {\n  return supabase\n    .channel('intelligence-findings')\n    .on(\n      'postgres_changes',\n      {\n        event: 'INSERT',\n        schema: 'public',\n        table: 'intelligence_findings',\n        filter: `organization_id=eq.${organizationId}`\n      },\n      (payload) => {\n        console.log('New finding:', payload)\n        callback(payload.new)\n      }\n    )\n    .subscribe()\n}\n\nexport const subscribeToMonitoring = (organizationId, callback) => {\n  return supabase\n    .channel('monitoring-runs')\n    .on(\n      'postgres_changes',\n      {\n        event: '*',\n        schema: 'public',\n        table: 'monitoring_runs',\n        filter: `organization_id=eq.${organizationId}`\n      },\n      (payload) => {\n        console.log('Monitoring update:', payload)\n        callback(payload)\n      }\n    )\n    .subscribe()\n}\n\nexport const subscribeToOpportunities = (organizationId, callback) => {\n  return supabase\n    .channel('opportunities')\n    .on(\n      'postgres_changes',\n      {\n        event: '*',\n        schema: 'public',\n        table: 'opportunity_queue',\n        filter: `organization_id=eq.${organizationId}`\n      },\n      (payload) => {\n        console.log('Opportunity update:', payload)\n        callback(payload)\n      }\n    )\n    .subscribe()\n}\n\n// Data fetching\nexport const getIntelligenceFindings = async (organizationId, limit = 50) => {\n  const { data, error } = await supabase\n    .from('intelligence_findings')\n    .select(`\n      *,\n      target:intelligence_targets(name, type)\n    `)\n    .eq('organization_id', organizationId)\n    .order('created_at', { ascending: false })\n    .limit(limit)\n  \n  if (error) throw error\n  return data\n}\n\nexport const getOpportunities = async (organizationId) => {\n  const { data, error } = await supabase\n    .from('opportunity_queue')\n    .select('*')\n    .eq('organization_id', organizationId)\n    .eq('status', 'active')\n    .order('score', { ascending: false })\n  \n  if (error) throw error\n  return data\n}\n\nexport const getProjects = async (organizationId) => {\n  const { data, error } = await supabase\n    .from('projects')\n    .select('*')\n    .eq('organization_id', organizationId)\n    .order('created_at', { ascending: false })\n  \n  if (error) throw error\n  return data\n}\n\nexport const getContent = async (projectId) => {\n  const { data, error } = await supabase\n    .from('content')\n    .select('*')\n    .eq('project_id', projectId)\n    .order('created_at', { ascending: false })\n  \n  if (error) throw error\n  return data\n}\n\n// Monitoring\nexport const triggerMonitoring = async (organizationId, targetId = null) => {\n  const { data, error } = await supabase.functions.invoke('monitor-intelligence', {\n    body: {\n      organizationId,\n      targetId\n    }\n  })\n  \n  if (error) throw error\n  return data\n}\n\n// Content operations\nexport const saveContent = async (content) => {\n  const { data, error } = await supabase\n    .from('content')\n    .insert(content)\n    .select()\n    .single()\n  \n  if (error) throw error\n  return data\n}\n\nexport const updateContent = async (id, updates) => {\n  const { data, error } = await supabase\n    .from('content')\n    .update(updates)\n    .eq('id', id)\n    .select()\n    .single()\n  \n  if (error) throw error\n  return data\n}\n\n// MemoryVault operations\nexport const searchMemory = async (organizationId, query) => {\n  const { data, error } = await supabase\n    .from('memoryvault_items')\n    .select('*')\n    .eq('organization_id', organizationId)\n    .textSearch('content', query)\n    .limit(10)\n  \n  if (error) throw error\n  return data\n}\n\nexport const addToMemory = async (item) => {\n  const { data, error } = await supabase\n    .from('memoryvault_items')\n    .insert(item)\n    .select()\n    .single()\n  \n  if (error) throw error\n  return data\n}\n\nexport default supabase"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}