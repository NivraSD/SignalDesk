{"ast":null,"code":"/**\n * Supabase-Only API Service for SignalDesk\n * All backend functionality through Supabase Edge Functions and Database\n */\n\nimport { supabase } from '../config/supabase';\nclass SupabaseApiService {\n  constructor() {\n    this.supabase = supabase;\n    console.log('‚úÖ Supabase API Service initialized');\n    console.log('üöÄ Using Supabase for ALL backend operations');\n  }\n\n  /**\n   * Get current user session\n   */\n  async getSession() {\n    const {\n      data: {\n        session\n      }\n    } = await this.supabase.auth.getSession();\n    return session;\n  }\n\n  /**\n   * Call Supabase Edge Function\n   */\n  async callEdgeFunction(functionName, payload = {}) {\n    try {\n      console.log(`Calling Edge Function: ${functionName}`, payload);\n      const {\n        data,\n        error\n      } = await this.supabase.functions.invoke(functionName, {\n        body: payload\n      });\n      if (error) {\n        console.error(`Edge Function error (${functionName}):`, error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error(`Failed to call Edge Function ${functionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Database Operations\n   */\n  async dbQuery(table, operation, params = {}) {\n    let query = this.supabase.from(table);\n    switch (operation) {\n      case 'select':\n        query = query.select(params.columns || '*');\n        if (params.filter) query = query.match(params.filter);\n        if (params.limit) query = query.limit(params.limit);\n        if (params.orderBy) query = query.order(params.orderBy.column, {\n          ascending: params.orderBy.ascending\n        });\n        break;\n      case 'insert':\n        query = query.insert(params.data);\n        break;\n      case 'update':\n        query = query.update(params.data);\n        if (params.filter) query = query.match(params.filter);\n        break;\n      case 'delete':\n        query = query.delete();\n        if (params.filter) query = query.match(params.filter);\n        break;\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      console.error(`Database error (${table}/${operation}):`, error);\n      throw error;\n    }\n    return data;\n  }\n\n  // Authentication methods\n  async login(email, password) {\n    const {\n      data,\n      error\n    } = await this.supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) throw error;\n    return data;\n  }\n  async signup(email, password, metadata = {}) {\n    const {\n      data,\n      error\n    } = await this.supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata\n      }\n    });\n    if (error) throw error;\n    return data;\n  }\n  async logout() {\n    const {\n      error\n    } = await this.supabase.auth.signOut();\n    if (error) throw error;\n  }\n\n  // Organization methods\n  async getOrganizations() {\n    return this.dbQuery('organizations', 'select');\n  }\n  async createOrganization(orgData) {\n    return this.dbQuery('organizations', 'insert', {\n      data: orgData\n    });\n  }\n  async updateOrganization(id, updates) {\n    return this.dbQuery('organizations', 'update', {\n      data: updates,\n      filter: {\n        id\n      }\n    });\n  }\n\n  // Project methods  \n  async getProjects(organizationId = null) {\n    const params = organizationId ? {\n      filter: {\n        organization_id: organizationId\n      }\n    } : {};\n    return this.dbQuery('projects', 'select', params);\n  }\n  async createProject(projectData) {\n    return this.dbQuery('projects', 'insert', {\n      data: projectData\n    });\n  }\n\n  // Intelligence/Monitoring methods (via Edge Functions)\n  async getIntelligenceFindings(organizationId) {\n    return this.callEdgeFunction('monitor-intelligence', {\n      action: 'getFindings',\n      organizationId\n    });\n  }\n  async startMonitoring(organizationId, sources) {\n    return this.callEdgeFunction('monitor-intelligence', {\n      action: 'startMonitoring',\n      organizationId,\n      sources\n    });\n  }\n  async stopMonitoring(organizationId) {\n    return this.callEdgeFunction('monitor-intelligence', {\n      action: 'stopMonitoring',\n      organizationId\n    });\n  }\n\n  // Claude AI methods (via Edge Functions)\n  async sendClaudeMessage(message, context = {}) {\n    return this.callEdgeFunction('claude-chat', {\n      prompt: message,\n      // Edge Function expects 'prompt' not 'message'\n      system: context.systemPrompt,\n      model: context.model || 'claude-sonnet-4-20250514',\n      max_tokens: context.max_tokens || 1000,\n      temperature: context.temperature || 0.7\n    });\n  }\n  async generateContent(type, params) {\n    // Build a comprehensive prompt for content generation\n    const prompt = `Generate ${type} content with the following parameters:\nType: ${type}\n${params.prompt || ''}\nCompany: ${params.companyName || 'the company'}\nIndustry: ${params.industry || 'technology'}\nTone: ${params.tone || 'professional'}\n${params.context ? `Additional context: ${JSON.stringify(params.context)}` : ''}`;\n    return this.callEdgeFunction('claude-chat', {\n      prompt,\n      system: \"You are Niv, an experienced PR strategist with 20 years of expertise. Generate high-quality PR content that is strategic, compelling, and tailored to the target audience.\",\n      model: params.model || 'claude-sonnet-4-20250514',\n      max_tokens: params.max_tokens || 2000,\n      temperature: params.temperature || 0.7\n    });\n  }\n  async analyzeOpportunity(opportunityData) {\n    const prompt = `Analyze this PR opportunity and provide strategic recommendations:\n${JSON.stringify(opportunityData, null, 2)}\n\nProvide analysis including:\n1. Strategic value (1-10)\n2. Timing recommendations\n3. Key angles to pursue\n4. Potential risks\n5. Action steps`;\n    return this.callEdgeFunction('claude-chat', {\n      prompt,\n      system: \"You are Niv, a senior PR strategist. Analyze opportunities with deep strategic insight.\",\n      model: 'claude-sonnet-4-20250514',\n      max_tokens: 1500\n    });\n  }\n\n  // ============= NIV CONVERSATION PERSISTENCE METHODS =============\n\n  // Enhanced Niv Strategic Orchestrator with conversation persistence\n  async callNivChat({\n    message,\n    messages = [],\n    context = {},\n    mode = 'strategic_orchestration',\n    conversationId = null\n  }) {\n    var _session$user;\n    console.log('üîç [supabaseApiService] Calling Niv Backend Orchestrator:', {\n      message,\n      messagesCount: messages.length,\n      context,\n      mode,\n      conversationId\n    });\n\n    // Get current user for conversation tracking\n    const session = await this.getSession();\n    const userId = session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.id;\n    const sessionId = conversationId || `session-${Date.now()}`;\n    const organizationId = context.organizationId || null;\n    try {\n      // Determine backend URL based on environment\n      const backendUrl = process.env.REACT_APP_BACKEND_URL || (process.env.NODE_ENV === 'production' ? 'https://backend-orchestrator.vercel.app' : 'https://backend-orchestrator.vercel.app');\n\n      // Call backend orchestrator (using working multimode endpoint)\n      const response = await fetch(`${backendUrl}/api/niv-multimode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          messages,\n          sessionId,\n          userId,\n          organizationId,\n          mode\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Backend responded with ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('‚úÖ [supabaseApiService] Backend Orchestrator response:', {\n        hasResponse: !!(data !== null && data !== void 0 && data.response),\n        shouldSave: data === null || data === void 0 ? void 0 : data.shouldSave,\n        artifactCreated: !!(data !== null && data !== void 0 && data.artifact),\n        mcpsTriggered: (data === null || data === void 0 ? void 0 : data.mcpsTriggered) || [],\n        conversationId: sessionId\n      });\n\n      // Format response to match expected structure (supports multi-mode)\n      return {\n        response: data.response,\n        message: data.message || data.response,\n        chatMessage: data.chatMessage || data.response,\n        shouldSave: data.shouldSave || false,\n        conversationId: sessionId,\n        workItems: data.workItems || [],\n        artifacts: data.artifacts || [],\n        scope: data.scope,\n        metadata: data.metadata,\n        mcpsTriggered: data.mcpsTriggered,\n        mcpInsights: data.mcpInsights\n      };\n    } catch (error) {\n      console.error('Failed to call backend orchestrator:', error);\n      // Return a helpful fallback response\n      return {\n        response: `I understand you need help with: ${message}. As your AI PR strategist, I can assist with press releases, media strategies, and campaign planning.`,\n        message: 'Niv is ready to help!',\n        chatMessage: 'How can I assist with your PR needs today?',\n        shouldSave: false,\n        conversationId: sessionId\n      };\n    }\n  }\n\n  // Load conversation history and context\n  async loadNivConversation(conversationId) {\n    try {\n      const {\n        data: conversation,\n        error\n      } = await this.supabase.from('niv_conversations').select(`\n          *,\n          niv_conversation_messages (\n            id, role, content, message_type, metadata, created_at\n          ),\n          niv_work_items (\n            id, title, description, work_item_type, generated_content, \n            status, metadata, created_at, updated_at\n          ),\n          niv_strategic_context (\n            context_type, extracted_data, confidence_score, validated\n          )\n        `).eq('id', conversationId).single();\n      if (error) {\n        console.error('Error loading conversation:', error);\n        throw error;\n      }\n      return {\n        conversation,\n        messages: conversation.niv_conversation_messages || [],\n        workItems: conversation.niv_work_items || [],\n        strategicContext: conversation.niv_strategic_context || []\n      };\n    } catch (error) {\n      console.error('Failed to load conversation:', error);\n      throw error;\n    }\n  }\n\n  // Get recent conversations for a user\n  async getRecentNivConversations(limit = 10) {\n    try {\n      var _session$user2;\n      const session = await this.getSession();\n      if (!(session !== null && session !== void 0 && (_session$user2 = session.user) !== null && _session$user2 !== void 0 && _session$user2.id)) {\n        throw new Error('User not authenticated');\n      }\n      const {\n        data: conversations,\n        error\n      } = await this.supabase.from('niv_conversations').select(`\n          id, title, description, conversation_phase, status,\n          created_at, updated_at, last_message_at,\n          niv_conversation_messages (count),\n          niv_work_items (count)\n        `).eq('user_id', session.user.id).order('last_message_at', {\n        ascending: false\n      }).limit(limit);\n      if (error) {\n        console.error('Error fetching recent conversations:', error);\n        throw error;\n      }\n      return conversations || [];\n    } catch (error) {\n      console.error('Failed to get recent conversations:', error);\n      throw error;\n    }\n  }\n\n  // Search conversations by content or metadata\n  async searchNivConversations(query, filters = {}) {\n    try {\n      var _session$user3;\n      const session = await this.getSession();\n      if (!(session !== null && session !== void 0 && (_session$user3 = session.user) !== null && _session$user3 !== void 0 && _session$user3.id)) {\n        throw new Error('User not authenticated');\n      }\n      let queryBuilder = this.supabase.from('niv_conversations').select(`\n          id, title, description, conversation_phase, status,\n          created_at, updated_at, last_message_at,\n          niv_conversation_messages (\n            id, content, created_at\n          ),\n          niv_work_items (\n            id, title, work_item_type\n          )\n        `).eq('user_id', session.user.id);\n\n      // Add text search if query provided\n      if (query) {\n        queryBuilder = queryBuilder.or(`title.ilike.%${query}%,description.ilike.%${query}%`);\n      }\n\n      // Add filters\n      if (filters.phase) {\n        queryBuilder = queryBuilder.eq('conversation_phase', filters.phase);\n      }\n      if (filters.status) {\n        queryBuilder = queryBuilder.eq('status', filters.status);\n      }\n      if (filters.dateFrom) {\n        queryBuilder = queryBuilder.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        queryBuilder = queryBuilder.lte('created_at', filters.dateTo);\n      }\n      const {\n        data: conversations,\n        error\n      } = await queryBuilder.order('last_message_at', {\n        ascending: false\n      }).limit(50);\n      if (error) {\n        console.error('Error searching conversations:', error);\n        throw error;\n      }\n      return conversations || [];\n    } catch (error) {\n      console.error('Failed to search conversations:', error);\n      throw error;\n    }\n  }\n\n  // Update conversation metadata\n  async updateNivConversation(conversationId, updates) {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from('niv_conversations').update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      }).eq('id', conversationId).select().single();\n      if (error) {\n        console.error('Error updating conversation:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Failed to update conversation:', error);\n      throw error;\n    }\n  }\n\n  // Delete conversation and all associated data\n  async deleteNivConversation(conversationId) {\n    try {\n      const {\n        error\n      } = await this.supabase.from('niv_conversations').delete().eq('id', conversationId);\n      if (error) {\n        console.error('Error deleting conversation:', error);\n        throw error;\n      }\n      return true;\n    } catch (error) {\n      console.error('Failed to delete conversation:', error);\n      throw error;\n    }\n  }\n\n  // ============= NIV WORK ITEM MANAGEMENT =============\n\n  // Update work item content\n  async updateNivWorkItem(workItemId, updates) {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from('niv_work_items').update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      }).eq('id', workItemId).select().single();\n      if (error) {\n        console.error('Error updating work item:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Failed to update work item:', error);\n      throw error;\n    }\n  }\n\n  // Create work item revision\n  async createWorkItemRevision(workItemId, revisionData) {\n    try {\n      var _session$user4;\n      const session = await this.getSession();\n      const {\n        data,\n        error\n      } = await this.supabase.from('niv_work_item_revisions').insert({\n        work_item_id: workItemId,\n        user_id: session === null || session === void 0 ? void 0 : (_session$user4 = session.user) === null || _session$user4 === void 0 ? void 0 : _session$user4.id,\n        ...revisionData\n      }).select().single();\n      if (error) {\n        console.error('Error creating work item revision:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Failed to create work item revision:', error);\n      throw error;\n    }\n  }\n\n  // Get work item revisions\n  async getWorkItemRevisions(workItemId) {\n    try {\n      const {\n        data: revisions,\n        error\n      } = await this.supabase.from('niv_work_item_revisions').select('*').eq('work_item_id', workItemId).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('Error fetching work item revisions:', error);\n        throw error;\n      }\n      return revisions || [];\n    } catch (error) {\n      console.error('Failed to get work item revisions:', error);\n      throw error;\n    }\n  }\n\n  // ============= NIV USER PREFERENCES =============\n\n  // Get user preferences for Niv\n  async getNivUserPreferences() {\n    try {\n      var _session$user5;\n      const session = await this.getSession();\n      if (!(session !== null && session !== void 0 && (_session$user5 = session.user) !== null && _session$user5 !== void 0 && _session$user5.id)) {\n        throw new Error('User not authenticated');\n      }\n      const {\n        data: preferences,\n        error\n      } = await this.supabase.from('niv_user_preferences').select('*').eq('user_id', session.user.id).single();\n      if (error && error.code !== 'PGRST116') {\n        // PGRST116 = no rows returned\n        console.error('Error fetching user preferences:', error);\n        throw error;\n      }\n      return preferences || null;\n    } catch (error) {\n      console.error('Failed to get user preferences:', error);\n      throw error;\n    }\n  }\n\n  // Update user preferences for Niv\n  async updateNivUserPreferences(preferences) {\n    try {\n      var _session$user6;\n      const session = await this.getSession();\n      if (!(session !== null && session !== void 0 && (_session$user6 = session.user) !== null && _session$user6 !== void 0 && _session$user6.id)) {\n        throw new Error('User not authenticated');\n      }\n      const {\n        data,\n        error\n      } = await this.supabase.from('niv_user_preferences').upsert({\n        user_id: session.user.id,\n        ...preferences,\n        updated_at: new Date().toISOString()\n      }).select().single();\n      if (error) {\n        console.error('Error updating user preferences:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Failed to update user preferences:', error);\n      throw error;\n    }\n  }\n\n  // ============= NIV ANALYTICS =============\n\n  // Save conversation analytics\n  async saveNivConversationAnalytics(conversationId, analytics) {\n    try {\n      var _session$user7;\n      const session = await this.getSession();\n      const {\n        data,\n        error\n      } = await this.supabase.from('niv_conversation_analytics').upsert({\n        conversation_id: conversationId,\n        user_id: session === null || session === void 0 ? void 0 : (_session$user7 = session.user) === null || _session$user7 === void 0 ? void 0 : _session$user7.id,\n        ...analytics,\n        created_at: new Date().toISOString()\n      }).select().single();\n      if (error) {\n        console.error('Error saving conversation analytics:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Failed to save conversation analytics:', error);\n      throw error;\n    }\n  }\n\n  // Get user analytics summary\n  async getNivUserAnalytics(timeframe = '30d') {\n    try {\n      var _session$user8;\n      const session = await this.getSession();\n      if (!(session !== null && session !== void 0 && (_session$user8 = session.user) !== null && _session$user8 !== void 0 && _session$user8.id)) {\n        throw new Error('User not authenticated');\n      }\n\n      // Calculate date filter\n      const daysAgo = parseInt(timeframe.replace('d', ''));\n      const fromDate = new Date();\n      fromDate.setDate(fromDate.getDate() - daysAgo);\n      const {\n        data: analytics,\n        error\n      } = await this.supabase.from('niv_conversation_analytics').select('*').eq('user_id', session.user.id).gte('created_at', fromDate.toISOString()).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('Error fetching user analytics:', error);\n        throw error;\n      }\n      return analytics || [];\n    } catch (error) {\n      console.error('Failed to get user analytics:', error);\n      throw error;\n    }\n  }\n\n  // ============= ORGANIZATION CONTEXT =============\n\n  // Get organization Niv context\n  async getOrganizationNivContext(organizationId) {\n    try {\n      const {\n        data: context,\n        error\n      } = await this.supabase.from('niv_organization_context').select('*').eq('organization_id', organizationId).single();\n      if (error && error.code !== 'PGRST116') {\n        console.error('Error fetching organization context:', error);\n        throw error;\n      }\n      return context || null;\n    } catch (error) {\n      console.error('Failed to get organization context:', error);\n      throw error;\n    }\n  }\n\n  // Update organization Niv context\n  async updateOrganizationNivContext(organizationId, context) {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from('niv_organization_context').upsert({\n        organization_id: organizationId,\n        ...context,\n        updated_at: new Date().toISOString()\n      }).select().single();\n      if (error) {\n        console.error('Error updating organization context:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Failed to update organization context:', error);\n      throw error;\n    }\n  }\n\n  // Legacy Niv Chat - Keep for backward compatibility\n  async callNivChatLegacy({\n    message,\n    context = {},\n    mode = 'chat',\n    sessionId = null\n  }) {\n    return this.callEdgeFunction('niv-chat', {\n      message,\n      context,\n      mode,\n      conversationId: sessionId\n    });\n  }\n\n  // Campaign methods\n  async analyzeCampaign(campaignData) {\n    const prompt = `Analyze this PR campaign and provide strategic guidance:\n${JSON.stringify(campaignData, null, 2)}\n\nProvide comprehensive campaign analysis including messaging, targeting, and execution strategy.`;\n    return this.callEdgeFunction('claude-chat', {\n      prompt,\n      system: \"You are Niv, an expert PR strategist with 20 years of experience running successful campaigns.\",\n      model: 'claude-sonnet-4-20250514',\n      max_tokens: 2000\n    });\n  }\n\n  // Crisis management\n  async analyzeCrisis(crisisData) {\n    const prompt = `URGENT: Analyze this crisis situation and provide immediate strategic guidance:\n${JSON.stringify(crisisData, null, 2)}\n\nProvide crisis response plan including:\n1. Immediate actions (first hour)\n2. Key stakeholders to address\n3. Core messaging framework\n4. Media response strategy\n5. Timeline for updates`;\n    return this.callEdgeFunction('claude-chat', {\n      prompt,\n      system: \"You are Niv, a crisis management expert. Time is critical. Be direct, strategic, and action-oriented.\",\n      model: 'claude-sonnet-4-20250514',\n      // Use Claude Sonnet 4 for crisis\n      max_tokens: 2000,\n      temperature: 0.3 // Lower temperature for more consistent crisis response\n    });\n  }\n\n  // Real-time subscriptions\n  subscribeToFindings(organizationId, callback) {\n    return this.supabase.channel(`findings:${organizationId}`).on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'intelligence_findings',\n      filter: `organization_id=eq.${organizationId}`\n    }, callback).subscribe();\n  }\n  subscribeToOpportunities(organizationId, callback) {\n    return this.supabase.channel(`opportunities:${organizationId}`).on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'opportunity_queue',\n      filter: `organization_id=eq.${organizationId}`\n    }, callback).subscribe();\n  }\n\n  // Utility methods\n  async uploadFile(bucket, path, file) {\n    const {\n      data,\n      error\n    } = await this.supabase.storage.from(bucket).upload(path, file);\n    if (error) throw error;\n    return data;\n  }\n  async getFileUrl(bucket, path) {\n    const {\n      data\n    } = this.supabase.storage.from(bucket).getPublicUrl(path);\n    return data.publicUrl;\n  }\n}\n\n// Create singleton instance\nconst supabaseApiService = new SupabaseApiService();\n\n// Export both the class and instance\nexport { SupabaseApiService };\nexport default supabaseApiService;","map":{"version":3,"names":["supabase","SupabaseApiService","constructor","console","log","getSession","data","session","auth","callEdgeFunction","functionName","payload","error","functions","invoke","body","dbQuery","table","operation","params","query","from","select","columns","filter","match","limit","orderBy","order","column","ascending","insert","update","delete","login","email","password","signInWithPassword","signup","metadata","signUp","options","logout","signOut","getOrganizations","createOrganization","orgData","updateOrganization","id","updates","getProjects","organizationId","organization_id","createProject","projectData","getIntelligenceFindings","action","startMonitoring","sources","stopMonitoring","sendClaudeMessage","message","context","prompt","system","systemPrompt","model","max_tokens","temperature","generateContent","type","companyName","industry","tone","JSON","stringify","analyzeOpportunity","opportunityData","callNivChat","messages","mode","conversationId","_session$user","messagesCount","length","userId","user","sessionId","Date","now","backendUrl","process","env","REACT_APP_BACKEND_URL","NODE_ENV","response","fetch","method","headers","ok","Error","status","json","hasResponse","shouldSave","artifactCreated","artifact","mcpsTriggered","chatMessage","workItems","artifacts","scope","mcpInsights","loadNivConversation","conversation","eq","single","niv_conversation_messages","niv_work_items","strategicContext","niv_strategic_context","getRecentNivConversations","_session$user2","conversations","searchNivConversations","filters","_session$user3","queryBuilder","or","phase","dateFrom","gte","dateTo","lte","updateNivConversation","updated_at","toISOString","deleteNivConversation","updateNivWorkItem","workItemId","createWorkItemRevision","revisionData","_session$user4","work_item_id","user_id","getWorkItemRevisions","revisions","getNivUserPreferences","_session$user5","preferences","code","updateNivUserPreferences","_session$user6","upsert","saveNivConversationAnalytics","analytics","_session$user7","conversation_id","created_at","getNivUserAnalytics","timeframe","_session$user8","daysAgo","parseInt","replace","fromDate","setDate","getDate","getOrganizationNivContext","updateOrganizationNivContext","callNivChatLegacy","analyzeCampaign","campaignData","analyzeCrisis","crisisData","subscribeToFindings","callback","channel","on","event","schema","subscribe","subscribeToOpportunities","uploadFile","bucket","path","file","storage","upload","getFileUrl","getPublicUrl","publicUrl","supabaseApiService"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/services/supabaseApiService.js"],"sourcesContent":["/**\n * Supabase-Only API Service for SignalDesk\n * All backend functionality through Supabase Edge Functions and Database\n */\n\nimport { supabase } from '../config/supabase';\n\nclass SupabaseApiService {\n  constructor() {\n    this.supabase = supabase;\n    console.log('‚úÖ Supabase API Service initialized');\n    console.log('üöÄ Using Supabase for ALL backend operations');\n  }\n\n  /**\n   * Get current user session\n   */\n  async getSession() {\n    const { data: { session } } = await this.supabase.auth.getSession();\n    return session;\n  }\n\n  /**\n   * Call Supabase Edge Function\n   */\n  async callEdgeFunction(functionName, payload = {}) {\n    try {\n      console.log(`Calling Edge Function: ${functionName}`, payload);\n      \n      const { data, error } = await this.supabase.functions.invoke(functionName, {\n        body: payload\n      });\n\n      if (error) {\n        console.error(`Edge Function error (${functionName}):`, error);\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error(`Failed to call Edge Function ${functionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Database Operations\n   */\n  async dbQuery(table, operation, params = {}) {\n    let query = this.supabase.from(table);\n    \n    switch(operation) {\n      case 'select':\n        query = query.select(params.columns || '*');\n        if (params.filter) query = query.match(params.filter);\n        if (params.limit) query = query.limit(params.limit);\n        if (params.orderBy) query = query.order(params.orderBy.column, { ascending: params.orderBy.ascending });\n        break;\n      \n      case 'insert':\n        query = query.insert(params.data);\n        break;\n      \n      case 'update':\n        query = query.update(params.data);\n        if (params.filter) query = query.match(params.filter);\n        break;\n      \n      case 'delete':\n        query = query.delete();\n        if (params.filter) query = query.match(params.filter);\n        break;\n    }\n\n    const { data, error } = await query;\n    \n    if (error) {\n      console.error(`Database error (${table}/${operation}):`, error);\n      throw error;\n    }\n    \n    return data;\n  }\n\n  // Authentication methods\n  async login(email, password) {\n    const { data, error } = await this.supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    \n    if (error) throw error;\n    return data;\n  }\n\n  async signup(email, password, metadata = {}) {\n    const { data, error } = await this.supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata\n      }\n    });\n    \n    if (error) throw error;\n    return data;\n  }\n\n  async logout() {\n    const { error } = await this.supabase.auth.signOut();\n    if (error) throw error;\n  }\n\n  // Organization methods\n  async getOrganizations() {\n    return this.dbQuery('organizations', 'select');\n  }\n\n  async createOrganization(orgData) {\n    return this.dbQuery('organizations', 'insert', { data: orgData });\n  }\n\n  async updateOrganization(id, updates) {\n    return this.dbQuery('organizations', 'update', {\n      data: updates,\n      filter: { id }\n    });\n  }\n\n  // Project methods  \n  async getProjects(organizationId = null) {\n    const params = organizationId \n      ? { filter: { organization_id: organizationId } }\n      : {};\n    return this.dbQuery('projects', 'select', params);\n  }\n\n  async createProject(projectData) {\n    return this.dbQuery('projects', 'insert', { data: projectData });\n  }\n\n  // Intelligence/Monitoring methods (via Edge Functions)\n  async getIntelligenceFindings(organizationId) {\n    return this.callEdgeFunction('monitor-intelligence', {\n      action: 'getFindings',\n      organizationId\n    });\n  }\n\n  async startMonitoring(organizationId, sources) {\n    return this.callEdgeFunction('monitor-intelligence', {\n      action: 'startMonitoring',\n      organizationId,\n      sources\n    });\n  }\n\n  async stopMonitoring(organizationId) {\n    return this.callEdgeFunction('monitor-intelligence', {\n      action: 'stopMonitoring',\n      organizationId\n    });\n  }\n\n  // Claude AI methods (via Edge Functions)\n  async sendClaudeMessage(message, context = {}) {\n    return this.callEdgeFunction('claude-chat', {\n      prompt: message,  // Edge Function expects 'prompt' not 'message'\n      system: context.systemPrompt,\n      model: context.model || 'claude-sonnet-4-20250514',\n      max_tokens: context.max_tokens || 1000,\n      temperature: context.temperature || 0.7\n    });\n  }\n\n  async generateContent(type, params) {\n    // Build a comprehensive prompt for content generation\n    const prompt = `Generate ${type} content with the following parameters:\nType: ${type}\n${params.prompt || ''}\nCompany: ${params.companyName || 'the company'}\nIndustry: ${params.industry || 'technology'}\nTone: ${params.tone || 'professional'}\n${params.context ? `Additional context: ${JSON.stringify(params.context)}` : ''}`;\n    \n    return this.callEdgeFunction('claude-chat', {\n      prompt,\n      system: \"You are Niv, an experienced PR strategist with 20 years of expertise. Generate high-quality PR content that is strategic, compelling, and tailored to the target audience.\",\n      model: params.model || 'claude-sonnet-4-20250514',\n      max_tokens: params.max_tokens || 2000,\n      temperature: params.temperature || 0.7\n    });\n  }\n\n  async analyzeOpportunity(opportunityData) {\n    const prompt = `Analyze this PR opportunity and provide strategic recommendations:\n${JSON.stringify(opportunityData, null, 2)}\n\nProvide analysis including:\n1. Strategic value (1-10)\n2. Timing recommendations\n3. Key angles to pursue\n4. Potential risks\n5. Action steps`;\n\n    return this.callEdgeFunction('claude-chat', {\n      prompt,\n      system: \"You are Niv, a senior PR strategist. Analyze opportunities with deep strategic insight.\",\n      model: 'claude-sonnet-4-20250514',\n      max_tokens: 1500\n    });\n  }\n\n  // ============= NIV CONVERSATION PERSISTENCE METHODS =============\n\n  // Enhanced Niv Strategic Orchestrator with conversation persistence\n  async callNivChat({ message, messages = [], context = {}, mode = 'strategic_orchestration', conversationId = null }) {\n    console.log('üîç [supabaseApiService] Calling Niv Backend Orchestrator:', {\n      message,\n      messagesCount: messages.length,\n      context,\n      mode,\n      conversationId\n    });\n    \n    // Get current user for conversation tracking\n    const session = await this.getSession();\n    const userId = session?.user?.id;\n    const sessionId = conversationId || `session-${Date.now()}`;\n    const organizationId = context.organizationId || null;\n    \n    try {\n      // Determine backend URL based on environment\n      const backendUrl = process.env.REACT_APP_BACKEND_URL || \n                        (process.env.NODE_ENV === 'production' \n                          ? 'https://backend-orchestrator.vercel.app'\n                          : 'https://backend-orchestrator.vercel.app');\n      \n      // Call backend orchestrator (using working multimode endpoint)\n      const response = await fetch(`${backendUrl}/api/niv-multimode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message,\n          messages,\n          sessionId,\n          userId,\n          organizationId,\n          mode\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Backend responded with ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      console.log('‚úÖ [supabaseApiService] Backend Orchestrator response:', {\n        hasResponse: !!data?.response,\n        shouldSave: data?.shouldSave,\n        artifactCreated: !!data?.artifact,\n        mcpsTriggered: data?.mcpsTriggered || [],\n        conversationId: sessionId\n      });\n      \n      // Format response to match expected structure (supports multi-mode)\n      return {\n        response: data.response,\n        message: data.message || data.response,\n        chatMessage: data.chatMessage || data.response,\n        shouldSave: data.shouldSave || false,\n        conversationId: sessionId,\n        workItems: data.workItems || [],\n        artifacts: data.artifacts || [],\n        scope: data.scope,\n        metadata: data.metadata,\n        mcpsTriggered: data.mcpsTriggered,\n        mcpInsights: data.mcpInsights\n      };\n    } catch (error) {\n      console.error('Failed to call backend orchestrator:', error);\n      // Return a helpful fallback response\n      return {\n        response: `I understand you need help with: ${message}. As your AI PR strategist, I can assist with press releases, media strategies, and campaign planning.`,\n        message: 'Niv is ready to help!',\n        chatMessage: 'How can I assist with your PR needs today?',\n        shouldSave: false,\n        conversationId: sessionId\n      };\n    }\n  }\n\n  // Load conversation history and context\n  async loadNivConversation(conversationId) {\n    try {\n      const { data: conversation, error } = await this.supabase\n        .from('niv_conversations')\n        .select(`\n          *,\n          niv_conversation_messages (\n            id, role, content, message_type, metadata, created_at\n          ),\n          niv_work_items (\n            id, title, description, work_item_type, generated_content, \n            status, metadata, created_at, updated_at\n          ),\n          niv_strategic_context (\n            context_type, extracted_data, confidence_score, validated\n          )\n        `)\n        .eq('id', conversationId)\n        .single();\n\n      if (error) {\n        console.error('Error loading conversation:', error);\n        throw error;\n      }\n\n      return {\n        conversation,\n        messages: conversation.niv_conversation_messages || [],\n        workItems: conversation.niv_work_items || [],\n        strategicContext: conversation.niv_strategic_context || []\n      };\n    } catch (error) {\n      console.error('Failed to load conversation:', error);\n      throw error;\n    }\n  }\n\n  // Get recent conversations for a user\n  async getRecentNivConversations(limit = 10) {\n    try {\n      const session = await this.getSession();\n      if (!session?.user?.id) {\n        throw new Error('User not authenticated');\n      }\n\n      const { data: conversations, error } = await this.supabase\n        .from('niv_conversations')\n        .select(`\n          id, title, description, conversation_phase, status,\n          created_at, updated_at, last_message_at,\n          niv_conversation_messages (count),\n          niv_work_items (count)\n        `)\n        .eq('user_id', session.user.id)\n        .order('last_message_at', { ascending: false })\n        .limit(limit);\n\n      if (error) {\n        console.error('Error fetching recent conversations:', error);\n        throw error;\n      }\n\n      return conversations || [];\n    } catch (error) {\n      console.error('Failed to get recent conversations:', error);\n      throw error;\n    }\n  }\n\n  // Search conversations by content or metadata\n  async searchNivConversations(query, filters = {}) {\n    try {\n      const session = await this.getSession();\n      if (!session?.user?.id) {\n        throw new Error('User not authenticated');\n      }\n\n      let queryBuilder = this.supabase\n        .from('niv_conversations')\n        .select(`\n          id, title, description, conversation_phase, status,\n          created_at, updated_at, last_message_at,\n          niv_conversation_messages (\n            id, content, created_at\n          ),\n          niv_work_items (\n            id, title, work_item_type\n          )\n        `)\n        .eq('user_id', session.user.id);\n\n      // Add text search if query provided\n      if (query) {\n        queryBuilder = queryBuilder.or(`title.ilike.%${query}%,description.ilike.%${query}%`);\n      }\n\n      // Add filters\n      if (filters.phase) {\n        queryBuilder = queryBuilder.eq('conversation_phase', filters.phase);\n      }\n      \n      if (filters.status) {\n        queryBuilder = queryBuilder.eq('status', filters.status);\n      }\n\n      if (filters.dateFrom) {\n        queryBuilder = queryBuilder.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        queryBuilder = queryBuilder.lte('created_at', filters.dateTo);\n      }\n\n      const { data: conversations, error } = await queryBuilder\n        .order('last_message_at', { ascending: false })\n        .limit(50);\n\n      if (error) {\n        console.error('Error searching conversations:', error);\n        throw error;\n      }\n\n      return conversations || [];\n    } catch (error) {\n      console.error('Failed to search conversations:', error);\n      throw error;\n    }\n  }\n\n  // Update conversation metadata\n  async updateNivConversation(conversationId, updates) {\n    try {\n      const { data, error } = await this.supabase\n        .from('niv_conversations')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', conversationId)\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error updating conversation:', error);\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Failed to update conversation:', error);\n      throw error;\n    }\n  }\n\n  // Delete conversation and all associated data\n  async deleteNivConversation(conversationId) {\n    try {\n      const { error } = await this.supabase\n        .from('niv_conversations')\n        .delete()\n        .eq('id', conversationId);\n\n      if (error) {\n        console.error('Error deleting conversation:', error);\n        throw error;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to delete conversation:', error);\n      throw error;\n    }\n  }\n\n  // ============= NIV WORK ITEM MANAGEMENT =============\n\n  // Update work item content\n  async updateNivWorkItem(workItemId, updates) {\n    try {\n      const { data, error } = await this.supabase\n        .from('niv_work_items')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', workItemId)\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error updating work item:', error);\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Failed to update work item:', error);\n      throw error;\n    }\n  }\n\n  // Create work item revision\n  async createWorkItemRevision(workItemId, revisionData) {\n    try {\n      const session = await this.getSession();\n      const { data, error } = await this.supabase\n        .from('niv_work_item_revisions')\n        .insert({\n          work_item_id: workItemId,\n          user_id: session?.user?.id,\n          ...revisionData\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error creating work item revision:', error);\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Failed to create work item revision:', error);\n      throw error;\n    }\n  }\n\n  // Get work item revisions\n  async getWorkItemRevisions(workItemId) {\n    try {\n      const { data: revisions, error } = await this.supabase\n        .from('niv_work_item_revisions')\n        .select('*')\n        .eq('work_item_id', workItemId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error fetching work item revisions:', error);\n        throw error;\n      }\n\n      return revisions || [];\n    } catch (error) {\n      console.error('Failed to get work item revisions:', error);\n      throw error;\n    }\n  }\n\n  // ============= NIV USER PREFERENCES =============\n\n  // Get user preferences for Niv\n  async getNivUserPreferences() {\n    try {\n      const session = await this.getSession();\n      if (!session?.user?.id) {\n        throw new Error('User not authenticated');\n      }\n\n      const { data: preferences, error } = await this.supabase\n        .from('niv_user_preferences')\n        .select('*')\n        .eq('user_id', session.user.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned\n        console.error('Error fetching user preferences:', error);\n        throw error;\n      }\n\n      return preferences || null;\n    } catch (error) {\n      console.error('Failed to get user preferences:', error);\n      throw error;\n    }\n  }\n\n  // Update user preferences for Niv\n  async updateNivUserPreferences(preferences) {\n    try {\n      const session = await this.getSession();\n      if (!session?.user?.id) {\n        throw new Error('User not authenticated');\n      }\n\n      const { data, error } = await this.supabase\n        .from('niv_user_preferences')\n        .upsert({\n          user_id: session.user.id,\n          ...preferences,\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error updating user preferences:', error);\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Failed to update user preferences:', error);\n      throw error;\n    }\n  }\n\n  // ============= NIV ANALYTICS =============\n\n  // Save conversation analytics\n  async saveNivConversationAnalytics(conversationId, analytics) {\n    try {\n      const session = await this.getSession();\n      const { data, error } = await this.supabase\n        .from('niv_conversation_analytics')\n        .upsert({\n          conversation_id: conversationId,\n          user_id: session?.user?.id,\n          ...analytics,\n          created_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error saving conversation analytics:', error);\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Failed to save conversation analytics:', error);\n      throw error;\n    }\n  }\n\n  // Get user analytics summary\n  async getNivUserAnalytics(timeframe = '30d') {\n    try {\n      const session = await this.getSession();\n      if (!session?.user?.id) {\n        throw new Error('User not authenticated');\n      }\n\n      // Calculate date filter\n      const daysAgo = parseInt(timeframe.replace('d', ''));\n      const fromDate = new Date();\n      fromDate.setDate(fromDate.getDate() - daysAgo);\n\n      const { data: analytics, error } = await this.supabase\n        .from('niv_conversation_analytics')\n        .select('*')\n        .eq('user_id', session.user.id)\n        .gte('created_at', fromDate.toISOString())\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error fetching user analytics:', error);\n        throw error;\n      }\n\n      return analytics || [];\n    } catch (error) {\n      console.error('Failed to get user analytics:', error);\n      throw error;\n    }\n  }\n\n  // ============= ORGANIZATION CONTEXT =============\n\n  // Get organization Niv context\n  async getOrganizationNivContext(organizationId) {\n    try {\n      const { data: context, error } = await this.supabase\n        .from('niv_organization_context')\n        .select('*')\n        .eq('organization_id', organizationId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        console.error('Error fetching organization context:', error);\n        throw error;\n      }\n\n      return context || null;\n    } catch (error) {\n      console.error('Failed to get organization context:', error);\n      throw error;\n    }\n  }\n\n  // Update organization Niv context\n  async updateOrganizationNivContext(organizationId, context) {\n    try {\n      const { data, error } = await this.supabase\n        .from('niv_organization_context')\n        .upsert({\n          organization_id: organizationId,\n          ...context,\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error updating organization context:', error);\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Failed to update organization context:', error);\n      throw error;\n    }\n  }\n\n  // Legacy Niv Chat - Keep for backward compatibility\n  async callNivChatLegacy({ message, context = {}, mode = 'chat', sessionId = null }) {\n    return this.callEdgeFunction('niv-chat', {\n      message,\n      context,\n      mode,\n      conversationId: sessionId\n    });\n  }\n\n  // Campaign methods\n  async analyzeCampaign(campaignData) {\n    const prompt = `Analyze this PR campaign and provide strategic guidance:\n${JSON.stringify(campaignData, null, 2)}\n\nProvide comprehensive campaign analysis including messaging, targeting, and execution strategy.`;\n\n    return this.callEdgeFunction('claude-chat', {\n      prompt,\n      system: \"You are Niv, an expert PR strategist with 20 years of experience running successful campaigns.\",\n      model: 'claude-sonnet-4-20250514',\n      max_tokens: 2000\n    });\n  }\n\n  // Crisis management\n  async analyzeCrisis(crisisData) {\n    const prompt = `URGENT: Analyze this crisis situation and provide immediate strategic guidance:\n${JSON.stringify(crisisData, null, 2)}\n\nProvide crisis response plan including:\n1. Immediate actions (first hour)\n2. Key stakeholders to address\n3. Core messaging framework\n4. Media response strategy\n5. Timeline for updates`;\n\n    return this.callEdgeFunction('claude-chat', {\n      prompt,\n      system: \"You are Niv, a crisis management expert. Time is critical. Be direct, strategic, and action-oriented.\",\n      model: 'claude-sonnet-4-20250514',  // Use Claude Sonnet 4 for crisis\n      max_tokens: 2000,\n      temperature: 0.3  // Lower temperature for more consistent crisis response\n    });\n  }\n\n  // Real-time subscriptions\n  subscribeToFindings(organizationId, callback) {\n    return this.supabase\n      .channel(`findings:${organizationId}`)\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'intelligence_findings',\n          filter: `organization_id=eq.${organizationId}`\n        },\n        callback\n      )\n      .subscribe();\n  }\n\n  subscribeToOpportunities(organizationId, callback) {\n    return this.supabase\n      .channel(`opportunities:${organizationId}`)\n      .on('postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'opportunity_queue',\n          filter: `organization_id=eq.${organizationId}`\n        },\n        callback\n      )\n      .subscribe();\n  }\n\n  // Utility methods\n  async uploadFile(bucket, path, file) {\n    const { data, error } = await this.supabase.storage\n      .from(bucket)\n      .upload(path, file);\n    \n    if (error) throw error;\n    return data;\n  }\n\n  async getFileUrl(bucket, path) {\n    const { data } = this.supabase.storage\n      .from(bucket)\n      .getPublicUrl(path);\n    \n    return data.publicUrl;\n  }\n}\n\n// Create singleton instance\nconst supabaseApiService = new SupabaseApiService();\n\n// Export both the class and instance\nexport { SupabaseApiService };\nexport default supabaseApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}