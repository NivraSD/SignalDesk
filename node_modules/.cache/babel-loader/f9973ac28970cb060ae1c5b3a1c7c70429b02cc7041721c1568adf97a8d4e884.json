{"ast":null,"code":"import axios from 'axios';\n\n/**\n * Narrative Vacuum Score (NVS) Service\n * Discovers PR opportunities by finding gaps where media wants stories but no one's providing them\n * This finds opportunities clients didn't know existed\n */\nclass NarrativeVacuumService {\n  constructor() {\n    // Thresholds for opportunity detection\n    this.thresholds = {\n      immediate: 80,\n      // Alert CEO/CMO immediately\n      high: 60,\n      // Alert PR team today\n      medium: 40,\n      // Include in weekly digest\n      low: 20 // Monitor only\n    };\n\n    // Topic half-life in days (how quickly opportunities expire)\n    this.topicHalfLife = {\n      breaking_news: 0.5,\n      // 12 hours\n      trending_topic: 2,\n      // 2 days\n      industry_news: 7,\n      // 1 week\n      thought_leadership: 30,\n      // 1 month\n      evergreen: 90 // 3 months\n    };\n\n    // Category importance weights\n    this.categoryWeights = {\n      crisis_response: 1.5,\n      funding_news: 1.3,\n      product_launch: 1.2,\n      thought_leadership: 1.0,\n      industry_trend: 0.9,\n      company_update: 0.8\n    };\n  }\n\n  /**\n   * Main formula: Calculate Narrative Vacuum Score\n   * NVS = (MediaDemand × CompetitorAbsence × ClientStrength × TimeDecay) / MarketSaturation\n   */\n  async calculateNVS(topic, client, context = {}) {\n    try {\n      // Get all components\n      const mediaDemand = await this.calculateMediaDemand(topic);\n      const competitorAbsence = await this.calculateCompetitorAbsence(topic, client.competitors);\n      const clientStrength = this.assessClientStrength(topic, client);\n      const timeDecay = this.calculateTimeDecay(topic, context.daysSinceEmerged || 0);\n      const marketSaturation = await this.calculateMarketSaturation(topic);\n\n      // Calculate raw score\n      const rawScore = mediaDemand * competitorAbsence * clientStrength * timeDecay / (marketSaturation || 1);\n\n      // Apply category weight\n      const categoryWeight = this.categoryWeights[context.category] || 1.0;\n      const finalScore = Math.min(100, rawScore * categoryWeight);\n      return {\n        score: finalScore,\n        components: {\n          mediaDemand,\n          competitorAbsence,\n          clientStrength,\n          timeDecay,\n          marketSaturation\n        },\n        action: this.getRecommendedAction(finalScore),\n        urgency: this.getUrgencyLevel(finalScore),\n        explanation: this.explainScore(finalScore, {\n          mediaDemand,\n          competitorAbsence,\n          clientStrength\n        })\n      };\n    } catch (error) {\n      console.error('Error calculating NVS:', error);\n      return {\n        score: 0,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Calculate Media Demand - How badly does media want this story?\n   */\n  async calculateMediaDemand(topic) {\n    const signals = {\n      haroRequests: await this.getHARORequests(topic),\n      journalistQueries: await this.getJournalistQueries(topic),\n      googleTrends: await this.getGoogleTrendsScore(topic),\n      newsRepetition: await this.getNewsRepetitionRate(topic),\n      socialBuzz: await this.getSocialBuzzScore(topic)\n    };\n\n    // Weight different demand signals\n    const demand = signals.haroRequests * 30 +\n    // Direct journalist requests (highest weight)\n    signals.journalistQueries * 25 +\n    // Journalists asking on social\n    signals.googleTrends * 20 +\n    // Public search interest\n    signals.newsRepetition * 15 +\n    // Media covering repeatedly\n    signals.socialBuzz * 10; // Social media discussion\n\n    return Math.min(100, demand);\n  }\n\n  /**\n   * Calculate Competitor Absence - Are competitors missing this opportunity?\n   */\n  async calculateCompetitorAbsence(topic, competitors = []) {\n    if (!competitors || competitors.length === 0) {\n      return 80; // High opportunity if no competitors defined\n    }\n    const absenceSignals = await Promise.all(competitors.map(async competitor => {\n      const signals = {\n        pressReleases: await this.checkCompetitorPressReleases(competitor, topic),\n        executiveQuotes: await this.checkCompetitorQuotes(competitor, topic),\n        socialActivity: await this.checkCompetitorSocial(competitor, topic),\n        contentPublished: await this.checkCompetitorContent(competitor, topic)\n      };\n\n      // Calculate how absent this competitor is (0-100)\n      const absence = 100 - (signals.pressReleases * 40 + signals.executiveQuotes * 30 + signals.socialActivity * 20 + signals.contentPublished * 10);\n      return Math.max(0, absence);\n    }));\n\n    // Average absence across all competitors\n    return absenceSignals.reduce((a, b) => a + b, 0) / absenceSignals.length;\n  }\n\n  /**\n   * Assess Client Strength - Can the client credibly own this narrative?\n   */\n  assessClientStrength(topic, client) {\n    const strengths = {\n      expertise: this.getClientExpertise(topic, client),\n      previousSuccess: this.getClientTrackRecord(topic, client),\n      executiveCredibility: this.getExecutiveCredibility(topic, client),\n      contentAssets: this.getClientContent(topic, client),\n      uniqueAngle: this.getClientUniqueness(topic, client)\n    };\n\n    // Calculate weighted strength\n    const strength = strengths.expertise * 30 + strengths.previousSuccess * 25 + strengths.executiveCredibility * 20 + strengths.contentAssets * 15 + strengths.uniqueAngle * 10;\n    return Math.min(100, strength);\n  }\n\n  /**\n   * Calculate Time Decay - How fresh is this opportunity?\n   */\n  calculateTimeDecay(topic, daysSinceEmerged) {\n    const halfLife = this.topicHalfLife[topic.type] || this.topicHalfLife.industry_news;\n\n    // Exponential decay formula\n    const decay = Math.exp(-daysSinceEmerged / halfLife);\n    return decay * 100; // Convert to 0-100 scale\n  }\n\n  /**\n   * Calculate Market Saturation - How crowded is this narrative space?\n   */\n  async calculateMarketSaturation(topic) {\n    const saturationSignals = {\n      totalCoverage: await this.getTotalMediaCoverage(topic),\n      uniqueVoices: await this.getUniqueVoicesCount(topic),\n      messageRepetition: await this.getMessageRepetitionRate(topic),\n      audienceFatigue: await this.getAudienceFatigueScore(topic)\n    };\n\n    // Higher saturation = less opportunity\n    const saturation = saturationSignals.totalCoverage * 0.3 + saturationSignals.uniqueVoices * 0.3 + saturationSignals.messageRepetition * 0.2 + saturationSignals.audienceFatigue * 0.2;\n    return Math.max(1, saturation); // Never divide by zero\n  }\n\n  /**\n   * Mock data fetchers - Replace with real API calls\n   */\n  async getHARORequests(topic) {\n    // In production: Query HARO API or email digest\n    const mockRequests = {\n      'AI': 0.8,\n      'sustainability': 0.7,\n      'remote work': 0.6,\n      'cybersecurity': 0.9,\n      'supply chain': 0.5\n    };\n\n    // Fuzzy match topic to requests\n    const topicLower = topic.toLowerCase();\n    for (const [key, value] of Object.entries(mockRequests)) {\n      if (topicLower.includes(key) || key.includes(topicLower)) {\n        return value;\n      }\n    }\n    return Math.random() * 0.3; // Low random value if no match\n  }\n  async getJournalistQueries(topic) {\n    // In production: Monitor Twitter API for journalist requests\n    // Search for patterns like \"looking for sources\", \"need expert\", \"seeking comment\"\n    const mockActivity = Math.random() * 0.8 + 0.2;\n    return mockActivity;\n  }\n  async getGoogleTrendsScore(topic) {\n    // In production: Use Google Trends API\n    try {\n      // Simulate trending topics\n      const trendingTopics = ['AI', 'climate', 'recession', 'crypto', 'layoffs'];\n      const isHot = trendingTopics.some(t => topic.toLowerCase().includes(t));\n      return isHot ? 0.7 + Math.random() * 0.3 : Math.random() * 0.5;\n    } catch (error) {\n      return 0.5; // Default middle value\n    }\n  }\n  async getNewsRepetitionRate(topic) {\n    // Count how many times this topic appears in recent news\n    // Higher repetition = higher demand\n    return Math.random() * 0.7 + 0.3;\n  }\n  async getSocialBuzzScore(topic) {\n    // Measure social media volume and engagement\n    return Math.random() * 0.6 + 0.2;\n  }\n  async checkCompetitorPressReleases(competitor, topic) {\n    // Check if competitor has issued press releases on this topic\n    // In production: Query PR Newswire, Business Wire APIs\n    return Math.random() * 0.3; // Assume low activity\n  }\n  async checkCompetitorQuotes(competitor, topic) {\n    // Check if competitor executives are quoted on this topic\n    return Math.random() * 0.2;\n  }\n  async checkCompetitorSocial(competitor, topic) {\n    // Check competitor social media activity on topic\n    return Math.random() * 0.25;\n  }\n  async checkCompetitorContent(competitor, topic) {\n    // Check if competitor has published content on topic\n    return Math.random() * 0.2;\n  }\n  getClientExpertise(topic, client) {\n    // Assess client's domain expertise\n    const expertiseMap = client.expertiseAreas || {};\n\n    // Check for keyword matches\n    const topicLower = topic.toLowerCase();\n    for (const [area, score] of Object.entries(expertiseMap)) {\n      if (topicLower.includes(area.toLowerCase())) {\n        return score;\n      }\n    }\n    return 0.3; // Low default expertise\n  }\n  getClientTrackRecord(topic, client) {\n    // Look at past media wins on similar topics\n    const history = client.mediaWins || [];\n    const relevantWins = history.filter(win => win.topic && win.topic.toLowerCase().includes(topic.toLowerCase()));\n    return Math.min(1, relevantWins.length * 0.2);\n  }\n  getExecutiveCredibility(topic, client) {\n    // Assess if client has credible spokespersons for this topic\n    return client.executiveMediaScore || 0.5;\n  }\n  getClientContent(topic, client) {\n    // Check if client has existing content assets\n    const content = client.contentLibrary || [];\n    const relevantContent = content.filter(item => item.topics && item.topics.some(t => t.toLowerCase().includes(topic.toLowerCase())));\n    return Math.min(1, relevantContent.length * 0.15);\n  }\n  getClientUniqueness(topic, client) {\n    // Assess if client has unique angle or data\n    return client.proprietaryData ? 0.8 : 0.4;\n  }\n  async getTotalMediaCoverage(topic) {\n    // Measure how much this topic is already covered\n    return Math.random() * 60 + 20;\n  }\n  async getUniqueVoicesCount(topic) {\n    // Count distinct sources talking about this\n    return Math.random() * 50 + 10;\n  }\n  async getMessageRepetitionRate(topic) {\n    // How repetitive are the messages\n    return Math.random() * 40 + 30;\n  }\n  async getAudienceFatigueScore(topic) {\n    // Measure if audience is tired of this topic\n    return Math.random() * 30 + 10;\n  }\n\n  /**\n   * Get recommended action based on score\n   */\n  getRecommendedAction(score) {\n    if (score >= this.thresholds.immediate) {\n      return {\n        action: 'IMMEDIATE_ACTION',\n        description: 'Brief CEO/CMO immediately and prepare rapid response',\n        timeframe: '0-2 hours',\n        priority: 'CRITICAL'\n      };\n    } else if (score >= this.thresholds.high) {\n      return {\n        action: 'PRIORITY_RESPONSE',\n        description: 'Prepare comprehensive response within 24 hours',\n        timeframe: '24 hours',\n        priority: 'HIGH'\n      };\n    } else if (score >= this.thresholds.medium) {\n      return {\n        action: 'PLANNED_ENGAGEMENT',\n        description: 'Develop content and outreach plan this week',\n        timeframe: '2-5 days',\n        priority: 'MEDIUM'\n      };\n    } else {\n      return {\n        action: 'MONITOR',\n        description: 'Continue monitoring, no immediate action needed',\n        timeframe: 'Ongoing',\n        priority: 'LOW'\n      };\n    }\n  }\n\n  /**\n   * Get urgency level\n   */\n  getUrgencyLevel(score) {\n    if (score >= 80) return 'IMMEDIATE';\n    if (score >= 60) return 'TODAY';\n    if (score >= 40) return 'THIS_WEEK';\n    return 'MONITOR';\n  }\n\n  /**\n   * Explain the score in human terms\n   */\n  explainScore(score, components) {\n    const {\n      mediaDemand,\n      competitorAbsence,\n      clientStrength\n    } = components;\n    let explanation = '';\n    if (score >= 80) {\n      explanation = `🚨 MAJOR OPPORTUNITY: `;\n    } else if (score >= 60) {\n      explanation = `📍 Strong opportunity: `;\n    } else if (score >= 40) {\n      explanation = `💡 Potential opportunity: `;\n    } else {\n      explanation = `👀 Worth monitoring: `;\n    }\n\n    // Add specific insights\n    if (mediaDemand > 70) {\n      explanation += 'Media is actively seeking this story. ';\n    }\n    if (competitorAbsence > 80) {\n      explanation += 'Competitors haven\\'t claimed this narrative yet. ';\n    }\n    if (clientStrength > 70) {\n      explanation += 'You have strong credibility in this area. ';\n    }\n    if (mediaDemand < 40) {\n      explanation += 'Limited media interest currently. ';\n    }\n    if (competitorAbsence < 30) {\n      explanation += 'Competitors are already active here. ';\n    }\n    if (clientStrength < 40) {\n      explanation += 'Would need to build credibility first. ';\n    }\n    return explanation;\n  }\n\n  /**\n   * Discover narrative vacuums across multiple topics\n   */\n  async discoverOpportunities(client, options = {}) {\n    const opportunities = [];\n\n    // Topics to scan - mix of trending and evergreen\n    const topicsToScan = [\n    // Current events\n    {\n      name: 'AI regulation',\n      type: 'breaking_news',\n      category: 'thought_leadership'\n    }, {\n      name: 'sustainable technology',\n      type: 'trending_topic',\n      category: 'industry_trend'\n    }, {\n      name: 'remote work evolution',\n      type: 'industry_news',\n      category: 'thought_leadership'\n    }, {\n      name: 'supply chain resilience',\n      type: 'industry_news',\n      category: 'industry_trend'\n    }, {\n      name: 'cybersecurity threats',\n      type: 'breaking_news',\n      category: 'crisis_response'\n    },\n    // Industry-specific (customize based on client)\n    ...(client.industry ? this.getIndustryTopics(client.industry) : [])];\n\n    // Calculate NVS for each topic\n    for (const topic of topicsToScan) {\n      const nvsResult = await this.calculateNVS(topic.name, client, {\n        daysSinceEmerged: topic.daysSinceEmerged || 0,\n        category: topic.category\n      });\n      if (nvsResult.score >= (options.minScore || this.thresholds.low)) {\n        opportunities.push({\n          topic: topic.name,\n          type: topic.type,\n          category: topic.category,\n          ...nvsResult,\n          discoveredAt: new Date().toISOString()\n        });\n      }\n    }\n\n    // Sort by score descending\n    opportunities.sort((a, b) => b.score - a.score);\n    return {\n      opportunities: opportunities.slice(0, options.limit || 10),\n      summary: {\n        total: opportunities.length,\n        immediate: opportunities.filter(o => o.urgency === 'IMMEDIATE').length,\n        high: opportunities.filter(o => o.urgency === 'TODAY').length,\n        medium: opportunities.filter(o => o.urgency === 'THIS_WEEK').length\n      }\n    };\n  }\n\n  /**\n   * Get industry-specific topics to monitor\n   */\n  getIndustryTopics(industry) {\n    const industryTopics = {\n      'technology': [{\n        name: 'AI ethics',\n        type: 'thought_leadership'\n      }, {\n        name: 'data privacy regulations',\n        type: 'industry_news'\n      }, {\n        name: 'quantum computing',\n        type: 'evergreen'\n      }],\n      'healthcare': [{\n        name: 'telemedicine adoption',\n        type: 'trending_topic'\n      }, {\n        name: 'drug pricing transparency',\n        type: 'industry_news'\n      }, {\n        name: 'mental health awareness',\n        type: 'evergreen'\n      }],\n      'finance': [{\n        name: 'cryptocurrency regulation',\n        type: 'breaking_news'\n      }, {\n        name: 'ESG investing',\n        type: 'trending_topic'\n      }, {\n        name: 'digital banking transformation',\n        type: 'industry_news'\n      }],\n      'retail': [{\n        name: 'supply chain innovation',\n        type: 'industry_news'\n      }, {\n        name: 'sustainable packaging',\n        type: 'trending_topic'\n      }, {\n        name: 'omnichannel experience',\n        type: 'evergreen'\n      }]\n    };\n    return industryTopics[industry.toLowerCase()] || [];\n  }\n\n  /**\n   * Monitor for emerging narrative vacuums in real-time\n   */\n  async startRealTimeMonitoring(client, callback) {\n    // Check every 30 minutes for new opportunities\n    const interval = setInterval(async () => {\n      const opportunities = await this.discoverOpportunities(client, {\n        minScore: this.thresholds.medium\n      });\n\n      // Notify about high-scoring opportunities\n      const urgent = opportunities.opportunities.filter(o => o.score >= this.thresholds.high);\n      if (urgent.length > 0 && callback) {\n        callback(urgent);\n      }\n    }, 30 * 60 * 1000); // 30 minutes\n\n    return {\n      stop: () => clearInterval(interval)\n    };\n  }\n}\nexport default new NarrativeVacuumService();","map":{"version":3,"names":["axios","NarrativeVacuumService","constructor","thresholds","immediate","high","medium","low","topicHalfLife","breaking_news","trending_topic","industry_news","thought_leadership","evergreen","categoryWeights","crisis_response","funding_news","product_launch","industry_trend","company_update","calculateNVS","topic","client","context","mediaDemand","calculateMediaDemand","competitorAbsence","calculateCompetitorAbsence","competitors","clientStrength","assessClientStrength","timeDecay","calculateTimeDecay","daysSinceEmerged","marketSaturation","calculateMarketSaturation","rawScore","categoryWeight","category","finalScore","Math","min","score","components","action","getRecommendedAction","urgency","getUrgencyLevel","explanation","explainScore","error","console","message","signals","haroRequests","getHARORequests","journalistQueries","getJournalistQueries","googleTrends","getGoogleTrendsScore","newsRepetition","getNewsRepetitionRate","socialBuzz","getSocialBuzzScore","demand","length","absenceSignals","Promise","all","map","competitor","pressReleases","checkCompetitorPressReleases","executiveQuotes","checkCompetitorQuotes","socialActivity","checkCompetitorSocial","contentPublished","checkCompetitorContent","absence","max","reduce","a","b","strengths","expertise","getClientExpertise","previousSuccess","getClientTrackRecord","executiveCredibility","getExecutiveCredibility","contentAssets","getClientContent","uniqueAngle","getClientUniqueness","strength","halfLife","type","decay","exp","saturationSignals","totalCoverage","getTotalMediaCoverage","uniqueVoices","getUniqueVoicesCount","messageRepetition","getMessageRepetitionRate","audienceFatigue","getAudienceFatigueScore","saturation","mockRequests","topicLower","toLowerCase","key","value","Object","entries","includes","random","mockActivity","trendingTopics","isHot","some","t","expertiseMap","expertiseAreas","area","history","mediaWins","relevantWins","filter","win","executiveMediaScore","content","contentLibrary","relevantContent","item","topics","proprietaryData","description","timeframe","priority","discoverOpportunities","options","opportunities","topicsToScan","name","industry","getIndustryTopics","nvsResult","minScore","push","discoveredAt","Date","toISOString","sort","slice","limit","summary","total","o","industryTopics","startRealTimeMonitoring","callback","interval","setInterval","urgent","stop","clearInterval"],"sources":["/Users/jonathanliebowitz/Desktop/SignalDesk/frontend/src/services/narrativeVacuumService.js"],"sourcesContent":["import axios from 'axios';\n\n/**\n * Narrative Vacuum Score (NVS) Service\n * Discovers PR opportunities by finding gaps where media wants stories but no one's providing them\n * This finds opportunities clients didn't know existed\n */\nclass NarrativeVacuumService {\n  constructor() {\n    // Thresholds for opportunity detection\n    this.thresholds = {\n      immediate: 80,  // Alert CEO/CMO immediately\n      high: 60,       // Alert PR team today\n      medium: 40,     // Include in weekly digest\n      low: 20         // Monitor only\n    };\n\n    // Topic half-life in days (how quickly opportunities expire)\n    this.topicHalfLife = {\n      breaking_news: 0.5,      // 12 hours\n      trending_topic: 2,       // 2 days\n      industry_news: 7,        // 1 week\n      thought_leadership: 30,  // 1 month\n      evergreen: 90           // 3 months\n    };\n\n    // Category importance weights\n    this.categoryWeights = {\n      crisis_response: 1.5,\n      funding_news: 1.3,\n      product_launch: 1.2,\n      thought_leadership: 1.0,\n      industry_trend: 0.9,\n      company_update: 0.8\n    };\n  }\n\n  /**\n   * Main formula: Calculate Narrative Vacuum Score\n   * NVS = (MediaDemand × CompetitorAbsence × ClientStrength × TimeDecay) / MarketSaturation\n   */\n  async calculateNVS(topic, client, context = {}) {\n    try {\n      // Get all components\n      const mediaDemand = await this.calculateMediaDemand(topic);\n      const competitorAbsence = await this.calculateCompetitorAbsence(topic, client.competitors);\n      const clientStrength = this.assessClientStrength(topic, client);\n      const timeDecay = this.calculateTimeDecay(topic, context.daysSinceEmerged || 0);\n      const marketSaturation = await this.calculateMarketSaturation(topic);\n\n      // Calculate raw score\n      const rawScore = (mediaDemand * competitorAbsence * clientStrength * timeDecay) / (marketSaturation || 1);\n      \n      // Apply category weight\n      const categoryWeight = this.categoryWeights[context.category] || 1.0;\n      const finalScore = Math.min(100, rawScore * categoryWeight);\n\n      return {\n        score: finalScore,\n        components: {\n          mediaDemand,\n          competitorAbsence,\n          clientStrength,\n          timeDecay,\n          marketSaturation\n        },\n        action: this.getRecommendedAction(finalScore),\n        urgency: this.getUrgencyLevel(finalScore),\n        explanation: this.explainScore(finalScore, { mediaDemand, competitorAbsence, clientStrength })\n      };\n    } catch (error) {\n      console.error('Error calculating NVS:', error);\n      return { score: 0, error: error.message };\n    }\n  }\n\n  /**\n   * Calculate Media Demand - How badly does media want this story?\n   */\n  async calculateMediaDemand(topic) {\n    const signals = {\n      haroRequests: await this.getHARORequests(topic),\n      journalistQueries: await this.getJournalistQueries(topic),\n      googleTrends: await this.getGoogleTrendsScore(topic),\n      newsRepetition: await this.getNewsRepetitionRate(topic),\n      socialBuzz: await this.getSocialBuzzScore(topic)\n    };\n\n    // Weight different demand signals\n    const demand = \n      (signals.haroRequests * 30) +        // Direct journalist requests (highest weight)\n      (signals.journalistQueries * 25) +    // Journalists asking on social\n      (signals.googleTrends * 20) +         // Public search interest\n      (signals.newsRepetition * 15) +       // Media covering repeatedly\n      (signals.socialBuzz * 10);            // Social media discussion\n\n    return Math.min(100, demand);\n  }\n\n  /**\n   * Calculate Competitor Absence - Are competitors missing this opportunity?\n   */\n  async calculateCompetitorAbsence(topic, competitors = []) {\n    if (!competitors || competitors.length === 0) {\n      return 80; // High opportunity if no competitors defined\n    }\n\n    const absenceSignals = await Promise.all(\n      competitors.map(async competitor => {\n        const signals = {\n          pressReleases: await this.checkCompetitorPressReleases(competitor, topic),\n          executiveQuotes: await this.checkCompetitorQuotes(competitor, topic),\n          socialActivity: await this.checkCompetitorSocial(competitor, topic),\n          contentPublished: await this.checkCompetitorContent(competitor, topic)\n        };\n\n        // Calculate how absent this competitor is (0-100)\n        const absence = 100 - (\n          signals.pressReleases * 40 +\n          signals.executiveQuotes * 30 +\n          signals.socialActivity * 20 +\n          signals.contentPublished * 10\n        );\n\n        return Math.max(0, absence);\n      })\n    );\n\n    // Average absence across all competitors\n    return absenceSignals.reduce((a, b) => a + b, 0) / absenceSignals.length;\n  }\n\n  /**\n   * Assess Client Strength - Can the client credibly own this narrative?\n   */\n  assessClientStrength(topic, client) {\n    const strengths = {\n      expertise: this.getClientExpertise(topic, client),\n      previousSuccess: this.getClientTrackRecord(topic, client),\n      executiveCredibility: this.getExecutiveCredibility(topic, client),\n      contentAssets: this.getClientContent(topic, client),\n      uniqueAngle: this.getClientUniqueness(topic, client)\n    };\n\n    // Calculate weighted strength\n    const strength = \n      (strengths.expertise * 30) +\n      (strengths.previousSuccess * 25) +\n      (strengths.executiveCredibility * 20) +\n      (strengths.contentAssets * 15) +\n      (strengths.uniqueAngle * 10);\n\n    return Math.min(100, strength);\n  }\n\n  /**\n   * Calculate Time Decay - How fresh is this opportunity?\n   */\n  calculateTimeDecay(topic, daysSinceEmerged) {\n    const halfLife = this.topicHalfLife[topic.type] || this.topicHalfLife.industry_news;\n    \n    // Exponential decay formula\n    const decay = Math.exp(-daysSinceEmerged / halfLife);\n    \n    return decay * 100; // Convert to 0-100 scale\n  }\n\n  /**\n   * Calculate Market Saturation - How crowded is this narrative space?\n   */\n  async calculateMarketSaturation(topic) {\n    const saturationSignals = {\n      totalCoverage: await this.getTotalMediaCoverage(topic),\n      uniqueVoices: await this.getUniqueVoicesCount(topic),\n      messageRepetition: await this.getMessageRepetitionRate(topic),\n      audienceFatigue: await this.getAudienceFatigueScore(topic)\n    };\n\n    // Higher saturation = less opportunity\n    const saturation = \n      (saturationSignals.totalCoverage * 0.3) +\n      (saturationSignals.uniqueVoices * 0.3) +\n      (saturationSignals.messageRepetition * 0.2) +\n      (saturationSignals.audienceFatigue * 0.2);\n\n    return Math.max(1, saturation); // Never divide by zero\n  }\n\n  /**\n   * Mock data fetchers - Replace with real API calls\n   */\n  async getHARORequests(topic) {\n    // In production: Query HARO API or email digest\n    const mockRequests = {\n      'AI': 0.8,\n      'sustainability': 0.7,\n      'remote work': 0.6,\n      'cybersecurity': 0.9,\n      'supply chain': 0.5\n    };\n    \n    // Fuzzy match topic to requests\n    const topicLower = topic.toLowerCase();\n    for (const [key, value] of Object.entries(mockRequests)) {\n      if (topicLower.includes(key) || key.includes(topicLower)) {\n        return value;\n      }\n    }\n    return Math.random() * 0.3; // Low random value if no match\n  }\n\n  async getJournalistQueries(topic) {\n    // In production: Monitor Twitter API for journalist requests\n    // Search for patterns like \"looking for sources\", \"need expert\", \"seeking comment\"\n    const mockActivity = Math.random() * 0.8 + 0.2;\n    return mockActivity;\n  }\n\n  async getGoogleTrendsScore(topic) {\n    // In production: Use Google Trends API\n    try {\n      // Simulate trending topics\n      const trendingTopics = ['AI', 'climate', 'recession', 'crypto', 'layoffs'];\n      const isHot = trendingTopics.some(t => topic.toLowerCase().includes(t));\n      return isHot ? 0.7 + Math.random() * 0.3 : Math.random() * 0.5;\n    } catch (error) {\n      return 0.5; // Default middle value\n    }\n  }\n\n  async getNewsRepetitionRate(topic) {\n    // Count how many times this topic appears in recent news\n    // Higher repetition = higher demand\n    return Math.random() * 0.7 + 0.3;\n  }\n\n  async getSocialBuzzScore(topic) {\n    // Measure social media volume and engagement\n    return Math.random() * 0.6 + 0.2;\n  }\n\n  async checkCompetitorPressReleases(competitor, topic) {\n    // Check if competitor has issued press releases on this topic\n    // In production: Query PR Newswire, Business Wire APIs\n    return Math.random() * 0.3; // Assume low activity\n  }\n\n  async checkCompetitorQuotes(competitor, topic) {\n    // Check if competitor executives are quoted on this topic\n    return Math.random() * 0.2;\n  }\n\n  async checkCompetitorSocial(competitor, topic) {\n    // Check competitor social media activity on topic\n    return Math.random() * 0.25;\n  }\n\n  async checkCompetitorContent(competitor, topic) {\n    // Check if competitor has published content on topic\n    return Math.random() * 0.2;\n  }\n\n  getClientExpertise(topic, client) {\n    // Assess client's domain expertise\n    const expertiseMap = client.expertiseAreas || {};\n    \n    // Check for keyword matches\n    const topicLower = topic.toLowerCase();\n    for (const [area, score] of Object.entries(expertiseMap)) {\n      if (topicLower.includes(area.toLowerCase())) {\n        return score;\n      }\n    }\n    return 0.3; // Low default expertise\n  }\n\n  getClientTrackRecord(topic, client) {\n    // Look at past media wins on similar topics\n    const history = client.mediaWins || [];\n    const relevantWins = history.filter(win => \n      win.topic && win.topic.toLowerCase().includes(topic.toLowerCase())\n    );\n    \n    return Math.min(1, relevantWins.length * 0.2);\n  }\n\n  getExecutiveCredibility(topic, client) {\n    // Assess if client has credible spokespersons for this topic\n    return client.executiveMediaScore || 0.5;\n  }\n\n  getClientContent(topic, client) {\n    // Check if client has existing content assets\n    const content = client.contentLibrary || [];\n    const relevantContent = content.filter(item =>\n      item.topics && item.topics.some(t => t.toLowerCase().includes(topic.toLowerCase()))\n    );\n    \n    return Math.min(1, relevantContent.length * 0.15);\n  }\n\n  getClientUniqueness(topic, client) {\n    // Assess if client has unique angle or data\n    return client.proprietaryData ? 0.8 : 0.4;\n  }\n\n  async getTotalMediaCoverage(topic) {\n    // Measure how much this topic is already covered\n    return Math.random() * 60 + 20;\n  }\n\n  async getUniqueVoicesCount(topic) {\n    // Count distinct sources talking about this\n    return Math.random() * 50 + 10;\n  }\n\n  async getMessageRepetitionRate(topic) {\n    // How repetitive are the messages\n    return Math.random() * 40 + 30;\n  }\n\n  async getAudienceFatigueScore(topic) {\n    // Measure if audience is tired of this topic\n    return Math.random() * 30 + 10;\n  }\n\n  /**\n   * Get recommended action based on score\n   */\n  getRecommendedAction(score) {\n    if (score >= this.thresholds.immediate) {\n      return {\n        action: 'IMMEDIATE_ACTION',\n        description: 'Brief CEO/CMO immediately and prepare rapid response',\n        timeframe: '0-2 hours',\n        priority: 'CRITICAL'\n      };\n    } else if (score >= this.thresholds.high) {\n      return {\n        action: 'PRIORITY_RESPONSE',\n        description: 'Prepare comprehensive response within 24 hours',\n        timeframe: '24 hours',\n        priority: 'HIGH'\n      };\n    } else if (score >= this.thresholds.medium) {\n      return {\n        action: 'PLANNED_ENGAGEMENT',\n        description: 'Develop content and outreach plan this week',\n        timeframe: '2-5 days',\n        priority: 'MEDIUM'\n      };\n    } else {\n      return {\n        action: 'MONITOR',\n        description: 'Continue monitoring, no immediate action needed',\n        timeframe: 'Ongoing',\n        priority: 'LOW'\n      };\n    }\n  }\n\n  /**\n   * Get urgency level\n   */\n  getUrgencyLevel(score) {\n    if (score >= 80) return 'IMMEDIATE';\n    if (score >= 60) return 'TODAY';\n    if (score >= 40) return 'THIS_WEEK';\n    return 'MONITOR';\n  }\n\n  /**\n   * Explain the score in human terms\n   */\n  explainScore(score, components) {\n    const { mediaDemand, competitorAbsence, clientStrength } = components;\n    \n    let explanation = '';\n    \n    if (score >= 80) {\n      explanation = `🚨 MAJOR OPPORTUNITY: `;\n    } else if (score >= 60) {\n      explanation = `📍 Strong opportunity: `;\n    } else if (score >= 40) {\n      explanation = `💡 Potential opportunity: `;\n    } else {\n      explanation = `👀 Worth monitoring: `;\n    }\n\n    // Add specific insights\n    if (mediaDemand > 70) {\n      explanation += 'Media is actively seeking this story. ';\n    }\n    if (competitorAbsence > 80) {\n      explanation += 'Competitors haven\\'t claimed this narrative yet. ';\n    }\n    if (clientStrength > 70) {\n      explanation += 'You have strong credibility in this area. ';\n    }\n    \n    if (mediaDemand < 40) {\n      explanation += 'Limited media interest currently. ';\n    }\n    if (competitorAbsence < 30) {\n      explanation += 'Competitors are already active here. ';\n    }\n    if (clientStrength < 40) {\n      explanation += 'Would need to build credibility first. ';\n    }\n\n    return explanation;\n  }\n\n  /**\n   * Discover narrative vacuums across multiple topics\n   */\n  async discoverOpportunities(client, options = {}) {\n    const opportunities = [];\n    \n    // Topics to scan - mix of trending and evergreen\n    const topicsToScan = [\n      // Current events\n      { name: 'AI regulation', type: 'breaking_news', category: 'thought_leadership' },\n      { name: 'sustainable technology', type: 'trending_topic', category: 'industry_trend' },\n      { name: 'remote work evolution', type: 'industry_news', category: 'thought_leadership' },\n      { name: 'supply chain resilience', type: 'industry_news', category: 'industry_trend' },\n      { name: 'cybersecurity threats', type: 'breaking_news', category: 'crisis_response' },\n      \n      // Industry-specific (customize based on client)\n      ...(client.industry ? this.getIndustryTopics(client.industry) : [])\n    ];\n\n    // Calculate NVS for each topic\n    for (const topic of topicsToScan) {\n      const nvsResult = await this.calculateNVS(topic.name, client, {\n        daysSinceEmerged: topic.daysSinceEmerged || 0,\n        category: topic.category\n      });\n\n      if (nvsResult.score >= (options.minScore || this.thresholds.low)) {\n        opportunities.push({\n          topic: topic.name,\n          type: topic.type,\n          category: topic.category,\n          ...nvsResult,\n          discoveredAt: new Date().toISOString()\n        });\n      }\n    }\n\n    // Sort by score descending\n    opportunities.sort((a, b) => b.score - a.score);\n\n    return {\n      opportunities: opportunities.slice(0, options.limit || 10),\n      summary: {\n        total: opportunities.length,\n        immediate: opportunities.filter(o => o.urgency === 'IMMEDIATE').length,\n        high: opportunities.filter(o => o.urgency === 'TODAY').length,\n        medium: opportunities.filter(o => o.urgency === 'THIS_WEEK').length\n      }\n    };\n  }\n\n  /**\n   * Get industry-specific topics to monitor\n   */\n  getIndustryTopics(industry) {\n    const industryTopics = {\n      'technology': [\n        { name: 'AI ethics', type: 'thought_leadership' },\n        { name: 'data privacy regulations', type: 'industry_news' },\n        { name: 'quantum computing', type: 'evergreen' }\n      ],\n      'healthcare': [\n        { name: 'telemedicine adoption', type: 'trending_topic' },\n        { name: 'drug pricing transparency', type: 'industry_news' },\n        { name: 'mental health awareness', type: 'evergreen' }\n      ],\n      'finance': [\n        { name: 'cryptocurrency regulation', type: 'breaking_news' },\n        { name: 'ESG investing', type: 'trending_topic' },\n        { name: 'digital banking transformation', type: 'industry_news' }\n      ],\n      'retail': [\n        { name: 'supply chain innovation', type: 'industry_news' },\n        { name: 'sustainable packaging', type: 'trending_topic' },\n        { name: 'omnichannel experience', type: 'evergreen' }\n      ]\n    };\n\n    return industryTopics[industry.toLowerCase()] || [];\n  }\n\n  /**\n   * Monitor for emerging narrative vacuums in real-time\n   */\n  async startRealTimeMonitoring(client, callback) {\n    // Check every 30 minutes for new opportunities\n    const interval = setInterval(async () => {\n      const opportunities = await this.discoverOpportunities(client, {\n        minScore: this.thresholds.medium\n      });\n\n      // Notify about high-scoring opportunities\n      const urgent = opportunities.opportunities.filter(o => o.score >= this.thresholds.high);\n      \n      if (urgent.length > 0 && callback) {\n        callback(urgent);\n      }\n    }, 30 * 60 * 1000); // 30 minutes\n\n    return {\n      stop: () => clearInterval(interval)\n    };\n  }\n}\n\nexport default new NarrativeVacuumService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}