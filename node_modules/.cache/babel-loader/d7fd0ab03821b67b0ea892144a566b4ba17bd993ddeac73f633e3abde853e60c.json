{"ast":null,"code":"import _objectSpread from\"/Users/jonathanliebowitz/Desktop/SignalDesk/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Supabase-Only API Service for SignalDesk\n * All backend functionality through Supabase Edge Functions and Database\n */import{supabase}from'../config/supabase';class SupabaseApiService{constructor(){this.supabase=supabase;console.log('✅ Supabase API Service initialized');console.log('🚀 Using Supabase for ALL backend operations');}/**\n   * Get current user session\n   */async getSession(){const{data:{session}}=await this.supabase.auth.getSession();return session;}/**\n   * Call Supabase Edge Function\n   */async callEdgeFunction(functionName){let payload=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{console.log(\"Calling Edge Function: \".concat(functionName),payload);const{data,error}=await this.supabase.functions.invoke(functionName,{body:payload});if(error){console.error(\"Edge Function error (\".concat(functionName,\"):\"),error);throw error;}return data;}catch(error){console.error(\"Failed to call Edge Function \".concat(functionName,\":\"),error);throw error;}}/**\n   * Database Operations\n   */async dbQuery(table,operation){let params=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};let query=this.supabase.from(table);switch(operation){case'select':query=query.select(params.columns||'*');if(params.filter)query=query.match(params.filter);if(params.limit)query=query.limit(params.limit);if(params.orderBy)query=query.order(params.orderBy.column,{ascending:params.orderBy.ascending});break;case'insert':query=query.insert(params.data);break;case'update':query=query.update(params.data);if(params.filter)query=query.match(params.filter);break;case'delete':query=query.delete();if(params.filter)query=query.match(params.filter);break;}const{data,error}=await query;if(error){console.error(\"Database error (\".concat(table,\"/\").concat(operation,\"):\"),error);throw error;}return data;}// Authentication methods\nasync login(email,password){const{data,error}=await this.supabase.auth.signInWithPassword({email,password});if(error)throw error;return data;}async signup(email,password){let metadata=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const{data,error}=await this.supabase.auth.signUp({email,password,options:{data:metadata}});if(error)throw error;return data;}async logout(){const{error}=await this.supabase.auth.signOut();if(error)throw error;}// Organization methods\nasync getOrganizations(){return this.dbQuery('organizations','select');}async createOrganization(orgData){return this.dbQuery('organizations','insert',{data:orgData});}async updateOrganization(id,updates){return this.dbQuery('organizations','update',{data:updates,filter:{id}});}// Project methods  \nasync getProjects(){let organizationId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;const params=organizationId?{filter:{organization_id:organizationId}}:{};return this.dbQuery('projects','select',params);}async createProject(projectData){return this.dbQuery('projects','insert',{data:projectData});}// Intelligence/Monitoring methods (via Edge Functions)\nasync getIntelligenceFindings(organizationId){return this.callEdgeFunction('monitor-intelligence',{action:'getFindings',organizationId});}async startMonitoring(organizationId,sources){return this.callEdgeFunction('monitor-intelligence',{action:'startMonitoring',organizationId,sources});}async stopMonitoring(organizationId){return this.callEdgeFunction('monitor-intelligence',{action:'stopMonitoring',organizationId});}// Claude AI methods (via Edge Functions)\nasync sendClaudeMessage(message){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return this.callEdgeFunction('claude-chat',{prompt:message,// Edge Function expects 'prompt' not 'message'\nsystem:context.systemPrompt,model:context.model||'claude-sonnet-4-20250514',max_tokens:context.max_tokens||1000,temperature:context.temperature||0.7});}async generateContent(type,params){// Build a comprehensive prompt for content generation\nconst prompt=\"Generate \".concat(type,\" content with the following parameters:\\nType: \").concat(type,\"\\n\").concat(params.prompt||'',\"\\nCompany: \").concat(params.companyName||'the company',\"\\nIndustry: \").concat(params.industry||'technology',\"\\nTone: \").concat(params.tone||'professional',\"\\n\").concat(params.context?\"Additional context: \".concat(JSON.stringify(params.context)):'');return this.callEdgeFunction('claude-chat',{prompt,system:\"You are Niv, an experienced PR strategist with 20 years of expertise. Generate high-quality PR content that is strategic, compelling, and tailored to the target audience.\",model:params.model||'claude-sonnet-4-20250514',max_tokens:params.max_tokens||2000,temperature:params.temperature||0.7});}async analyzeOpportunity(opportunityData){const prompt=\"Analyze this PR opportunity and provide strategic recommendations:\\n\".concat(JSON.stringify(opportunityData,null,2),\"\\n\\nProvide analysis including:\\n1. Strategic value (1-10)\\n2. Timing recommendations\\n3. Key angles to pursue\\n4. Potential risks\\n5. Action steps\");return this.callEdgeFunction('claude-chat',{prompt,system:\"You are Niv, a senior PR strategist. Analyze opportunities with deep strategic insight.\",model:'claude-sonnet-4-20250514',max_tokens:1500});}// ============= NIV CONVERSATION PERSISTENCE METHODS =============\n// Enhanced Niv Strategic Orchestrator with conversation persistence\nasync callNivChat(_ref){var _session$user;let{message,messages=[],context={},mode='strategic_orchestration',conversationId=null}=_ref;console.log('🔍 [supabaseApiService] Calling Niv Backend Orchestrator:',{message,messagesCount:messages.length,context,mode,conversationId});// Get current user for conversation tracking\nconst session=await this.getSession();const userId=session===null||session===void 0?void 0:(_session$user=session.user)===null||_session$user===void 0?void 0:_session$user.id;const sessionId=conversationId||\"session-\".concat(Date.now());const organizationId=context.organizationId||null;try{// Determine backend URL based on environment\nconst backendUrl=process.env.REACT_APP_BACKEND_URL||(process.env.NODE_ENV==='production'?'https://backend-orchestrator.vercel.app':'https://backend-orchestrator.vercel.app');// Call backend orchestrator (using working multimode endpoint)\nconst response=await fetch(\"\".concat(backendUrl,\"/api/niv-multimode\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message,messages,sessionId,userId,organizationId,mode})});if(!response.ok){throw new Error(\"Backend responded with \".concat(response.status));}const data=await response.json();console.log('✅ [supabaseApiService] Backend Orchestrator response:',{hasResponse:!!(data!==null&&data!==void 0&&data.response),shouldSave:data===null||data===void 0?void 0:data.shouldSave,artifactCreated:!!(data!==null&&data!==void 0&&data.artifact),mcpsTriggered:(data===null||data===void 0?void 0:data.mcpsTriggered)||[],conversationId:sessionId});// Format response to match expected structure (supports multi-mode)\nreturn{response:data.response,message:data.message||data.response,chatMessage:data.chatMessage||data.response,shouldSave:data.shouldSave||false,conversationId:sessionId,workItems:data.workItems||[],artifacts:data.artifacts||[],scope:data.scope,metadata:data.metadata,mcpsTriggered:data.mcpsTriggered,mcpInsights:data.mcpInsights};}catch(error){console.error('Failed to call backend orchestrator:',error);// Return a helpful fallback response\nreturn{response:\"I understand you need help with: \".concat(message,\". As your AI PR strategist, I can assist with press releases, media strategies, and campaign planning.\"),message:'Niv is ready to help!',chatMessage:'How can I assist with your PR needs today?',shouldSave:false,conversationId:sessionId};}}// Load conversation history and context\nasync loadNivConversation(conversationId){try{const{data:conversation,error}=await this.supabase.from('niv_conversations').select(\"\\n          *,\\n          niv_conversation_messages (\\n            id, role, content, message_type, metadata, created_at\\n          ),\\n          niv_work_items (\\n            id, title, description, work_item_type, generated_content, \\n            status, metadata, created_at, updated_at\\n          ),\\n          niv_strategic_context (\\n            context_type, extracted_data, confidence_score, validated\\n          )\\n        \").eq('id',conversationId).single();if(error){console.error('Error loading conversation:',error);throw error;}return{conversation,messages:conversation.niv_conversation_messages||[],workItems:conversation.niv_work_items||[],strategicContext:conversation.niv_strategic_context||[]};}catch(error){console.error('Failed to load conversation:',error);throw error;}}// Get recent conversations for a user\nasync getRecentNivConversations(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;try{var _session$user2;const session=await this.getSession();if(!(session!==null&&session!==void 0&&(_session$user2=session.user)!==null&&_session$user2!==void 0&&_session$user2.id)){throw new Error('User not authenticated');}const{data:conversations,error}=await this.supabase.from('niv_conversations').select(\"\\n          id, title, description, conversation_phase, status,\\n          created_at, updated_at, last_message_at,\\n          niv_conversation_messages (count),\\n          niv_work_items (count)\\n        \").eq('user_id',session.user.id).order('last_message_at',{ascending:false}).limit(limit);if(error){console.error('Error fetching recent conversations:',error);throw error;}return conversations||[];}catch(error){console.error('Failed to get recent conversations:',error);throw error;}}// Search conversations by content or metadata\nasync searchNivConversations(query){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{var _session$user3;const session=await this.getSession();if(!(session!==null&&session!==void 0&&(_session$user3=session.user)!==null&&_session$user3!==void 0&&_session$user3.id)){throw new Error('User not authenticated');}let queryBuilder=this.supabase.from('niv_conversations').select(\"\\n          id, title, description, conversation_phase, status,\\n          created_at, updated_at, last_message_at,\\n          niv_conversation_messages (\\n            id, content, created_at\\n          ),\\n          niv_work_items (\\n            id, title, work_item_type\\n          )\\n        \").eq('user_id',session.user.id);// Add text search if query provided\nif(query){queryBuilder=queryBuilder.or(\"title.ilike.%\".concat(query,\"%,description.ilike.%\").concat(query,\"%\"));}// Add filters\nif(filters.phase){queryBuilder=queryBuilder.eq('conversation_phase',filters.phase);}if(filters.status){queryBuilder=queryBuilder.eq('status',filters.status);}if(filters.dateFrom){queryBuilder=queryBuilder.gte('created_at',filters.dateFrom);}if(filters.dateTo){queryBuilder=queryBuilder.lte('created_at',filters.dateTo);}const{data:conversations,error}=await queryBuilder.order('last_message_at',{ascending:false}).limit(50);if(error){console.error('Error searching conversations:',error);throw error;}return conversations||[];}catch(error){console.error('Failed to search conversations:',error);throw error;}}// Update conversation metadata\nasync updateNivConversation(conversationId,updates){try{const{data,error}=await this.supabase.from('niv_conversations').update(_objectSpread(_objectSpread({},updates),{},{updated_at:new Date().toISOString()})).eq('id',conversationId).select().single();if(error){console.error('Error updating conversation:',error);throw error;}return data;}catch(error){console.error('Failed to update conversation:',error);throw error;}}// Delete conversation and all associated data\nasync deleteNivConversation(conversationId){try{const{error}=await this.supabase.from('niv_conversations').delete().eq('id',conversationId);if(error){console.error('Error deleting conversation:',error);throw error;}return true;}catch(error){console.error('Failed to delete conversation:',error);throw error;}}// ============= NIV WORK ITEM MANAGEMENT =============\n// Update work item content\nasync updateNivWorkItem(workItemId,updates){try{const{data,error}=await this.supabase.from('niv_work_items').update(_objectSpread(_objectSpread({},updates),{},{updated_at:new Date().toISOString()})).eq('id',workItemId).select().single();if(error){console.error('Error updating work item:',error);throw error;}return data;}catch(error){console.error('Failed to update work item:',error);throw error;}}// Create work item revision\nasync createWorkItemRevision(workItemId,revisionData){try{var _session$user4;const session=await this.getSession();const{data,error}=await this.supabase.from('niv_work_item_revisions').insert(_objectSpread({work_item_id:workItemId,user_id:session===null||session===void 0?void 0:(_session$user4=session.user)===null||_session$user4===void 0?void 0:_session$user4.id},revisionData)).select().single();if(error){console.error('Error creating work item revision:',error);throw error;}return data;}catch(error){console.error('Failed to create work item revision:',error);throw error;}}// Get work item revisions\nasync getWorkItemRevisions(workItemId){try{const{data:revisions,error}=await this.supabase.from('niv_work_item_revisions').select('*').eq('work_item_id',workItemId).order('created_at',{ascending:false});if(error){console.error('Error fetching work item revisions:',error);throw error;}return revisions||[];}catch(error){console.error('Failed to get work item revisions:',error);throw error;}}// ============= NIV USER PREFERENCES =============\n// Get user preferences for Niv\nasync getNivUserPreferences(){try{var _session$user5;const session=await this.getSession();if(!(session!==null&&session!==void 0&&(_session$user5=session.user)!==null&&_session$user5!==void 0&&_session$user5.id)){throw new Error('User not authenticated');}const{data:preferences,error}=await this.supabase.from('niv_user_preferences').select('*').eq('user_id',session.user.id).single();if(error&&error.code!=='PGRST116'){// PGRST116 = no rows returned\nconsole.error('Error fetching user preferences:',error);throw error;}return preferences||null;}catch(error){console.error('Failed to get user preferences:',error);throw error;}}// Update user preferences for Niv\nasync updateNivUserPreferences(preferences){try{var _session$user6;const session=await this.getSession();if(!(session!==null&&session!==void 0&&(_session$user6=session.user)!==null&&_session$user6!==void 0&&_session$user6.id)){throw new Error('User not authenticated');}const{data,error}=await this.supabase.from('niv_user_preferences').upsert(_objectSpread(_objectSpread({user_id:session.user.id},preferences),{},{updated_at:new Date().toISOString()})).select().single();if(error){console.error('Error updating user preferences:',error);throw error;}return data;}catch(error){console.error('Failed to update user preferences:',error);throw error;}}// ============= NIV ANALYTICS =============\n// Save conversation analytics\nasync saveNivConversationAnalytics(conversationId,analytics){try{var _session$user7;const session=await this.getSession();const{data,error}=await this.supabase.from('niv_conversation_analytics').upsert(_objectSpread(_objectSpread({conversation_id:conversationId,user_id:session===null||session===void 0?void 0:(_session$user7=session.user)===null||_session$user7===void 0?void 0:_session$user7.id},analytics),{},{created_at:new Date().toISOString()})).select().single();if(error){console.error('Error saving conversation analytics:',error);throw error;}return data;}catch(error){console.error('Failed to save conversation analytics:',error);throw error;}}// Get user analytics summary\nasync getNivUserAnalytics(){let timeframe=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'30d';try{var _session$user8;const session=await this.getSession();if(!(session!==null&&session!==void 0&&(_session$user8=session.user)!==null&&_session$user8!==void 0&&_session$user8.id)){throw new Error('User not authenticated');}// Calculate date filter\nconst daysAgo=parseInt(timeframe.replace('d',''));const fromDate=new Date();fromDate.setDate(fromDate.getDate()-daysAgo);const{data:analytics,error}=await this.supabase.from('niv_conversation_analytics').select('*').eq('user_id',session.user.id).gte('created_at',fromDate.toISOString()).order('created_at',{ascending:false});if(error){console.error('Error fetching user analytics:',error);throw error;}return analytics||[];}catch(error){console.error('Failed to get user analytics:',error);throw error;}}// ============= ORGANIZATION CONTEXT =============\n// Get organization Niv context\nasync getOrganizationNivContext(organizationId){try{const{data:context,error}=await this.supabase.from('niv_organization_context').select('*').eq('organization_id',organizationId).single();if(error&&error.code!=='PGRST116'){console.error('Error fetching organization context:',error);throw error;}return context||null;}catch(error){console.error('Failed to get organization context:',error);throw error;}}// Update organization Niv context\nasync updateOrganizationNivContext(organizationId,context){try{const{data,error}=await this.supabase.from('niv_organization_context').upsert(_objectSpread(_objectSpread({organization_id:organizationId},context),{},{updated_at:new Date().toISOString()})).select().single();if(error){console.error('Error updating organization context:',error);throw error;}return data;}catch(error){console.error('Failed to update organization context:',error);throw error;}}// Legacy Niv Chat - Keep for backward compatibility\nasync callNivChatLegacy(_ref2){let{message,context={},mode='chat',sessionId=null}=_ref2;return this.callEdgeFunction('niv-chat',{message,context,mode,conversationId:sessionId});}// Campaign methods\nasync analyzeCampaign(campaignData){const prompt=\"Analyze this PR campaign and provide strategic guidance:\\n\".concat(JSON.stringify(campaignData,null,2),\"\\n\\nProvide comprehensive campaign analysis including messaging, targeting, and execution strategy.\");return this.callEdgeFunction('claude-chat',{prompt,system:\"You are Niv, an expert PR strategist with 20 years of experience running successful campaigns.\",model:'claude-sonnet-4-20250514',max_tokens:2000});}// Crisis management\nasync analyzeCrisis(crisisData){const prompt=\"URGENT: Analyze this crisis situation and provide immediate strategic guidance:\\n\".concat(JSON.stringify(crisisData,null,2),\"\\n\\nProvide crisis response plan including:\\n1. Immediate actions (first hour)\\n2. Key stakeholders to address\\n3. Core messaging framework\\n4. Media response strategy\\n5. Timeline for updates\");return this.callEdgeFunction('claude-chat',{prompt,system:\"You are Niv, a crisis management expert. Time is critical. Be direct, strategic, and action-oriented.\",model:'claude-sonnet-4-20250514',// Use Claude Sonnet 4 for crisis\nmax_tokens:2000,temperature:0.3// Lower temperature for more consistent crisis response\n});}// Real-time subscriptions\nsubscribeToFindings(organizationId,callback){return this.supabase.channel(\"findings:\".concat(organizationId)).on('postgres_changes',{event:'*',schema:'public',table:'intelligence_findings',filter:\"organization_id=eq.\".concat(organizationId)},callback).subscribe();}subscribeToOpportunities(organizationId,callback){return this.supabase.channel(\"opportunities:\".concat(organizationId)).on('postgres_changes',{event:'*',schema:'public',table:'opportunity_queue',filter:\"organization_id=eq.\".concat(organizationId)},callback).subscribe();}// Utility methods\nasync uploadFile(bucket,path,file){const{data,error}=await this.supabase.storage.from(bucket).upload(path,file);if(error)throw error;return data;}async getFileUrl(bucket,path){const{data}=this.supabase.storage.from(bucket).getPublicUrl(path);return data.publicUrl;}}// Create singleton instance\nconst supabaseApiService=new SupabaseApiService();// Export both the class and instance\nexport{SupabaseApiService};export default supabaseApiService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}