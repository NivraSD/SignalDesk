-- Strategic Campaigns Table
-- Stores campaign blueprints generated by Strategic Campaign Planner

-- Drop table if exists (for clean recreation)
DROP TABLE IF EXISTS campaigns CASCADE;

CREATE TABLE campaigns (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,

  -- Campaign Identity
  campaign_name TEXT NOT NULL,
  campaign_description TEXT,

  -- Campaign Objective (from intake form)
  objective JSONB NOT NULL, -- stores full CampaignObjective interface

  -- Pattern Recommendation (from analysis step)
  pattern_recommendation JSONB NOT NULL, -- stores PatternRecommendation interface

  -- Campaign Blueprint (from generation step)
  blueprint JSONB NOT NULL, -- stores CampaignBlueprint interface

  -- Campaign Status
  status TEXT DEFAULT 'draft', -- draft, in_progress, completed, archived

  -- Execution Tracking
  phases_completed INTEGER DEFAULT 0,
  total_phases INTEGER DEFAULT 0,
  content_generated INTEGER DEFAULT 0,
  content_total INTEGER DEFAULT 0,

  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  started_at TIMESTAMPTZ,
  completed_at TIMESTAMPTZ,

  -- Metadata
  tags TEXT[],
  folder TEXT,
  created_by UUID REFERENCES auth.users(id),

  CONSTRAINT valid_status CHECK (status IN ('draft', 'in_progress', 'completed', 'archived'))
);

-- Add indexes for common queries
CREATE INDEX idx_campaigns_organization_id ON campaigns(organization_id);
CREATE INDEX idx_campaigns_status ON campaigns(status);
CREATE INDEX idx_campaigns_created_at ON campaigns(created_at DESC);
CREATE INDEX idx_campaigns_folder ON campaigns(folder);

-- Enable Row Level Security
ALTER TABLE campaigns ENABLE ROW LEVEL SECURITY;

-- RLS Policies (matching content_library pattern)
CREATE POLICY "Users can view campaigns"
  ON campaigns FOR SELECT
  USING (true);

CREATE POLICY "Users can create campaigns"
  ON campaigns FOR INSERT
  WITH CHECK (true);

CREATE POLICY "Users can update campaigns"
  ON campaigns FOR UPDATE
  USING (true);

CREATE POLICY "Users can delete campaigns"
  ON campaigns FOR DELETE
  USING (true);

-- Add updated_at trigger
CREATE OR REPLACE FUNCTION update_campaigns_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER campaigns_updated_at_trigger
  BEFORE UPDATE ON campaigns
  FOR EACH ROW
  EXECUTE FUNCTION update_campaigns_updated_at();

-- Grant permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON campaigns TO authenticated;
GRANT USAGE ON SCHEMA public TO authenticated;
